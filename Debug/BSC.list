
BSC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007ba0  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08007d68  08007d68  00017d68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007d88  08007d88  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08007d88  08007d88  00017d88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007d90  08007d90  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007d90  08007d90  00017d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007d94  08007d94  00017d94  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  08007d98  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000330  20000010  08007da8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000340  08007da8  00020340  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014108  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002832  00000000  00000000  00034148  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001048  00000000  00000000  00036980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f50  00000000  00000000  000379c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002641a  00000000  00000000  00038918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013a75  00000000  00000000  0005ed32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000efae3  00000000  00000000  000727a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0016228a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004578  00000000  00000000  001622dc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000010 	.word	0x20000010
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08007d50 	.word	0x08007d50

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000014 	.word	0x20000014
 8000204:	08007d50 	.word	0x08007d50

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__aeabi_d2iz>:
 80009a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80009a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009ac:	d215      	bcs.n	80009da <__aeabi_d2iz+0x36>
 80009ae:	d511      	bpl.n	80009d4 <__aeabi_d2iz+0x30>
 80009b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80009b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80009b8:	d912      	bls.n	80009e0 <__aeabi_d2iz+0x3c>
 80009ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80009be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80009c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80009c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80009ca:	fa23 f002 	lsr.w	r0, r3, r2
 80009ce:	bf18      	it	ne
 80009d0:	4240      	negne	r0, r0
 80009d2:	4770      	bx	lr
 80009d4:	f04f 0000 	mov.w	r0, #0
 80009d8:	4770      	bx	lr
 80009da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80009de:	d105      	bne.n	80009ec <__aeabi_d2iz+0x48>
 80009e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80009e4:	bf08      	it	eq
 80009e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80009ea:	4770      	bx	lr
 80009ec:	f04f 0000 	mov.w	r0, #0
 80009f0:	4770      	bx	lr
 80009f2:	bf00      	nop

080009f4 <__aeabi_d2uiz>:
 80009f4:	004a      	lsls	r2, r1, #1
 80009f6:	d211      	bcs.n	8000a1c <__aeabi_d2uiz+0x28>
 80009f8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80009fc:	d211      	bcs.n	8000a22 <__aeabi_d2uiz+0x2e>
 80009fe:	d50d      	bpl.n	8000a1c <__aeabi_d2uiz+0x28>
 8000a00:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a04:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a08:	d40e      	bmi.n	8000a28 <__aeabi_d2uiz+0x34>
 8000a0a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a0e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a12:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a16:	fa23 f002 	lsr.w	r0, r3, r2
 8000a1a:	4770      	bx	lr
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a26:	d102      	bne.n	8000a2e <__aeabi_d2uiz+0x3a>
 8000a28:	f04f 30ff 	mov.w	r0, #4294967295
 8000a2c:	4770      	bx	lr
 8000a2e:	f04f 0000 	mov.w	r0, #0
 8000a32:	4770      	bx	lr

08000a34 <__aeabi_uldivmod>:
 8000a34:	b953      	cbnz	r3, 8000a4c <__aeabi_uldivmod+0x18>
 8000a36:	b94a      	cbnz	r2, 8000a4c <__aeabi_uldivmod+0x18>
 8000a38:	2900      	cmp	r1, #0
 8000a3a:	bf08      	it	eq
 8000a3c:	2800      	cmpeq	r0, #0
 8000a3e:	bf1c      	itt	ne
 8000a40:	f04f 31ff 	movne.w	r1, #4294967295
 8000a44:	f04f 30ff 	movne.w	r0, #4294967295
 8000a48:	f000 b974 	b.w	8000d34 <__aeabi_idiv0>
 8000a4c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000a50:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000a54:	f000 f806 	bl	8000a64 <__udivmoddi4>
 8000a58:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000a5c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000a60:	b004      	add	sp, #16
 8000a62:	4770      	bx	lr

08000a64 <__udivmoddi4>:
 8000a64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000a68:	9d08      	ldr	r5, [sp, #32]
 8000a6a:	4604      	mov	r4, r0
 8000a6c:	468e      	mov	lr, r1
 8000a6e:	2b00      	cmp	r3, #0
 8000a70:	d14d      	bne.n	8000b0e <__udivmoddi4+0xaa>
 8000a72:	428a      	cmp	r2, r1
 8000a74:	4694      	mov	ip, r2
 8000a76:	d969      	bls.n	8000b4c <__udivmoddi4+0xe8>
 8000a78:	fab2 f282 	clz	r2, r2
 8000a7c:	b152      	cbz	r2, 8000a94 <__udivmoddi4+0x30>
 8000a7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000a82:	f1c2 0120 	rsb	r1, r2, #32
 8000a86:	fa20 f101 	lsr.w	r1, r0, r1
 8000a8a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a8e:	ea41 0e03 	orr.w	lr, r1, r3
 8000a92:	4094      	lsls	r4, r2
 8000a94:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000a98:	0c21      	lsrs	r1, r4, #16
 8000a9a:	fbbe f6f8 	udiv	r6, lr, r8
 8000a9e:	fa1f f78c 	uxth.w	r7, ip
 8000aa2:	fb08 e316 	mls	r3, r8, r6, lr
 8000aa6:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000aaa:	fb06 f107 	mul.w	r1, r6, r7
 8000aae:	4299      	cmp	r1, r3
 8000ab0:	d90a      	bls.n	8000ac8 <__udivmoddi4+0x64>
 8000ab2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ab6:	f106 30ff 	add.w	r0, r6, #4294967295
 8000aba:	f080 811f 	bcs.w	8000cfc <__udivmoddi4+0x298>
 8000abe:	4299      	cmp	r1, r3
 8000ac0:	f240 811c 	bls.w	8000cfc <__udivmoddi4+0x298>
 8000ac4:	3e02      	subs	r6, #2
 8000ac6:	4463      	add	r3, ip
 8000ac8:	1a5b      	subs	r3, r3, r1
 8000aca:	b2a4      	uxth	r4, r4
 8000acc:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ad0:	fb08 3310 	mls	r3, r8, r0, r3
 8000ad4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ad8:	fb00 f707 	mul.w	r7, r0, r7
 8000adc:	42a7      	cmp	r7, r4
 8000ade:	d90a      	bls.n	8000af6 <__udivmoddi4+0x92>
 8000ae0:	eb1c 0404 	adds.w	r4, ip, r4
 8000ae4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ae8:	f080 810a 	bcs.w	8000d00 <__udivmoddi4+0x29c>
 8000aec:	42a7      	cmp	r7, r4
 8000aee:	f240 8107 	bls.w	8000d00 <__udivmoddi4+0x29c>
 8000af2:	4464      	add	r4, ip
 8000af4:	3802      	subs	r0, #2
 8000af6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000afa:	1be4      	subs	r4, r4, r7
 8000afc:	2600      	movs	r6, #0
 8000afe:	b11d      	cbz	r5, 8000b08 <__udivmoddi4+0xa4>
 8000b00:	40d4      	lsrs	r4, r2
 8000b02:	2300      	movs	r3, #0
 8000b04:	e9c5 4300 	strd	r4, r3, [r5]
 8000b08:	4631      	mov	r1, r6
 8000b0a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b0e:	428b      	cmp	r3, r1
 8000b10:	d909      	bls.n	8000b26 <__udivmoddi4+0xc2>
 8000b12:	2d00      	cmp	r5, #0
 8000b14:	f000 80ef 	beq.w	8000cf6 <__udivmoddi4+0x292>
 8000b18:	2600      	movs	r6, #0
 8000b1a:	e9c5 0100 	strd	r0, r1, [r5]
 8000b1e:	4630      	mov	r0, r6
 8000b20:	4631      	mov	r1, r6
 8000b22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000b26:	fab3 f683 	clz	r6, r3
 8000b2a:	2e00      	cmp	r6, #0
 8000b2c:	d14a      	bne.n	8000bc4 <__udivmoddi4+0x160>
 8000b2e:	428b      	cmp	r3, r1
 8000b30:	d302      	bcc.n	8000b38 <__udivmoddi4+0xd4>
 8000b32:	4282      	cmp	r2, r0
 8000b34:	f200 80f9 	bhi.w	8000d2a <__udivmoddi4+0x2c6>
 8000b38:	1a84      	subs	r4, r0, r2
 8000b3a:	eb61 0303 	sbc.w	r3, r1, r3
 8000b3e:	2001      	movs	r0, #1
 8000b40:	469e      	mov	lr, r3
 8000b42:	2d00      	cmp	r5, #0
 8000b44:	d0e0      	beq.n	8000b08 <__udivmoddi4+0xa4>
 8000b46:	e9c5 4e00 	strd	r4, lr, [r5]
 8000b4a:	e7dd      	b.n	8000b08 <__udivmoddi4+0xa4>
 8000b4c:	b902      	cbnz	r2, 8000b50 <__udivmoddi4+0xec>
 8000b4e:	deff      	udf	#255	; 0xff
 8000b50:	fab2 f282 	clz	r2, r2
 8000b54:	2a00      	cmp	r2, #0
 8000b56:	f040 8092 	bne.w	8000c7e <__udivmoddi4+0x21a>
 8000b5a:	eba1 010c 	sub.w	r1, r1, ip
 8000b5e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000b62:	fa1f fe8c 	uxth.w	lr, ip
 8000b66:	2601      	movs	r6, #1
 8000b68:	0c20      	lsrs	r0, r4, #16
 8000b6a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000b6e:	fb07 1113 	mls	r1, r7, r3, r1
 8000b72:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000b76:	fb0e f003 	mul.w	r0, lr, r3
 8000b7a:	4288      	cmp	r0, r1
 8000b7c:	d908      	bls.n	8000b90 <__udivmoddi4+0x12c>
 8000b7e:	eb1c 0101 	adds.w	r1, ip, r1
 8000b82:	f103 38ff 	add.w	r8, r3, #4294967295
 8000b86:	d202      	bcs.n	8000b8e <__udivmoddi4+0x12a>
 8000b88:	4288      	cmp	r0, r1
 8000b8a:	f200 80cb 	bhi.w	8000d24 <__udivmoddi4+0x2c0>
 8000b8e:	4643      	mov	r3, r8
 8000b90:	1a09      	subs	r1, r1, r0
 8000b92:	b2a4      	uxth	r4, r4
 8000b94:	fbb1 f0f7 	udiv	r0, r1, r7
 8000b98:	fb07 1110 	mls	r1, r7, r0, r1
 8000b9c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000ba0:	fb0e fe00 	mul.w	lr, lr, r0
 8000ba4:	45a6      	cmp	lr, r4
 8000ba6:	d908      	bls.n	8000bba <__udivmoddi4+0x156>
 8000ba8:	eb1c 0404 	adds.w	r4, ip, r4
 8000bac:	f100 31ff 	add.w	r1, r0, #4294967295
 8000bb0:	d202      	bcs.n	8000bb8 <__udivmoddi4+0x154>
 8000bb2:	45a6      	cmp	lr, r4
 8000bb4:	f200 80bb 	bhi.w	8000d2e <__udivmoddi4+0x2ca>
 8000bb8:	4608      	mov	r0, r1
 8000bba:	eba4 040e 	sub.w	r4, r4, lr
 8000bbe:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000bc2:	e79c      	b.n	8000afe <__udivmoddi4+0x9a>
 8000bc4:	f1c6 0720 	rsb	r7, r6, #32
 8000bc8:	40b3      	lsls	r3, r6
 8000bca:	fa22 fc07 	lsr.w	ip, r2, r7
 8000bce:	ea4c 0c03 	orr.w	ip, ip, r3
 8000bd2:	fa20 f407 	lsr.w	r4, r0, r7
 8000bd6:	fa01 f306 	lsl.w	r3, r1, r6
 8000bda:	431c      	orrs	r4, r3
 8000bdc:	40f9      	lsrs	r1, r7
 8000bde:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000be2:	fa00 f306 	lsl.w	r3, r0, r6
 8000be6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000bea:	0c20      	lsrs	r0, r4, #16
 8000bec:	fa1f fe8c 	uxth.w	lr, ip
 8000bf0:	fb09 1118 	mls	r1, r9, r8, r1
 8000bf4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000bf8:	fb08 f00e 	mul.w	r0, r8, lr
 8000bfc:	4288      	cmp	r0, r1
 8000bfe:	fa02 f206 	lsl.w	r2, r2, r6
 8000c02:	d90b      	bls.n	8000c1c <__udivmoddi4+0x1b8>
 8000c04:	eb1c 0101 	adds.w	r1, ip, r1
 8000c08:	f108 3aff 	add.w	sl, r8, #4294967295
 8000c0c:	f080 8088 	bcs.w	8000d20 <__udivmoddi4+0x2bc>
 8000c10:	4288      	cmp	r0, r1
 8000c12:	f240 8085 	bls.w	8000d20 <__udivmoddi4+0x2bc>
 8000c16:	f1a8 0802 	sub.w	r8, r8, #2
 8000c1a:	4461      	add	r1, ip
 8000c1c:	1a09      	subs	r1, r1, r0
 8000c1e:	b2a4      	uxth	r4, r4
 8000c20:	fbb1 f0f9 	udiv	r0, r1, r9
 8000c24:	fb09 1110 	mls	r1, r9, r0, r1
 8000c28:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000c2c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000c30:	458e      	cmp	lr, r1
 8000c32:	d908      	bls.n	8000c46 <__udivmoddi4+0x1e2>
 8000c34:	eb1c 0101 	adds.w	r1, ip, r1
 8000c38:	f100 34ff 	add.w	r4, r0, #4294967295
 8000c3c:	d26c      	bcs.n	8000d18 <__udivmoddi4+0x2b4>
 8000c3e:	458e      	cmp	lr, r1
 8000c40:	d96a      	bls.n	8000d18 <__udivmoddi4+0x2b4>
 8000c42:	3802      	subs	r0, #2
 8000c44:	4461      	add	r1, ip
 8000c46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000c4a:	fba0 9402 	umull	r9, r4, r0, r2
 8000c4e:	eba1 010e 	sub.w	r1, r1, lr
 8000c52:	42a1      	cmp	r1, r4
 8000c54:	46c8      	mov	r8, r9
 8000c56:	46a6      	mov	lr, r4
 8000c58:	d356      	bcc.n	8000d08 <__udivmoddi4+0x2a4>
 8000c5a:	d053      	beq.n	8000d04 <__udivmoddi4+0x2a0>
 8000c5c:	b15d      	cbz	r5, 8000c76 <__udivmoddi4+0x212>
 8000c5e:	ebb3 0208 	subs.w	r2, r3, r8
 8000c62:	eb61 010e 	sbc.w	r1, r1, lr
 8000c66:	fa01 f707 	lsl.w	r7, r1, r7
 8000c6a:	fa22 f306 	lsr.w	r3, r2, r6
 8000c6e:	40f1      	lsrs	r1, r6
 8000c70:	431f      	orrs	r7, r3
 8000c72:	e9c5 7100 	strd	r7, r1, [r5]
 8000c76:	2600      	movs	r6, #0
 8000c78:	4631      	mov	r1, r6
 8000c7a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c7e:	f1c2 0320 	rsb	r3, r2, #32
 8000c82:	40d8      	lsrs	r0, r3
 8000c84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000c88:	fa21 f303 	lsr.w	r3, r1, r3
 8000c8c:	4091      	lsls	r1, r2
 8000c8e:	4301      	orrs	r1, r0
 8000c90:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000c94:	fa1f fe8c 	uxth.w	lr, ip
 8000c98:	fbb3 f0f7 	udiv	r0, r3, r7
 8000c9c:	fb07 3610 	mls	r6, r7, r0, r3
 8000ca0:	0c0b      	lsrs	r3, r1, #16
 8000ca2:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000ca6:	fb00 f60e 	mul.w	r6, r0, lr
 8000caa:	429e      	cmp	r6, r3
 8000cac:	fa04 f402 	lsl.w	r4, r4, r2
 8000cb0:	d908      	bls.n	8000cc4 <__udivmoddi4+0x260>
 8000cb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000cb6:	f100 38ff 	add.w	r8, r0, #4294967295
 8000cba:	d22f      	bcs.n	8000d1c <__udivmoddi4+0x2b8>
 8000cbc:	429e      	cmp	r6, r3
 8000cbe:	d92d      	bls.n	8000d1c <__udivmoddi4+0x2b8>
 8000cc0:	3802      	subs	r0, #2
 8000cc2:	4463      	add	r3, ip
 8000cc4:	1b9b      	subs	r3, r3, r6
 8000cc6:	b289      	uxth	r1, r1
 8000cc8:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ccc:	fb07 3316 	mls	r3, r7, r6, r3
 8000cd0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000cd4:	fb06 f30e 	mul.w	r3, r6, lr
 8000cd8:	428b      	cmp	r3, r1
 8000cda:	d908      	bls.n	8000cee <__udivmoddi4+0x28a>
 8000cdc:	eb1c 0101 	adds.w	r1, ip, r1
 8000ce0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ce4:	d216      	bcs.n	8000d14 <__udivmoddi4+0x2b0>
 8000ce6:	428b      	cmp	r3, r1
 8000ce8:	d914      	bls.n	8000d14 <__udivmoddi4+0x2b0>
 8000cea:	3e02      	subs	r6, #2
 8000cec:	4461      	add	r1, ip
 8000cee:	1ac9      	subs	r1, r1, r3
 8000cf0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000cf4:	e738      	b.n	8000b68 <__udivmoddi4+0x104>
 8000cf6:	462e      	mov	r6, r5
 8000cf8:	4628      	mov	r0, r5
 8000cfa:	e705      	b.n	8000b08 <__udivmoddi4+0xa4>
 8000cfc:	4606      	mov	r6, r0
 8000cfe:	e6e3      	b.n	8000ac8 <__udivmoddi4+0x64>
 8000d00:	4618      	mov	r0, r3
 8000d02:	e6f8      	b.n	8000af6 <__udivmoddi4+0x92>
 8000d04:	454b      	cmp	r3, r9
 8000d06:	d2a9      	bcs.n	8000c5c <__udivmoddi4+0x1f8>
 8000d08:	ebb9 0802 	subs.w	r8, r9, r2
 8000d0c:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000d10:	3801      	subs	r0, #1
 8000d12:	e7a3      	b.n	8000c5c <__udivmoddi4+0x1f8>
 8000d14:	4646      	mov	r6, r8
 8000d16:	e7ea      	b.n	8000cee <__udivmoddi4+0x28a>
 8000d18:	4620      	mov	r0, r4
 8000d1a:	e794      	b.n	8000c46 <__udivmoddi4+0x1e2>
 8000d1c:	4640      	mov	r0, r8
 8000d1e:	e7d1      	b.n	8000cc4 <__udivmoddi4+0x260>
 8000d20:	46d0      	mov	r8, sl
 8000d22:	e77b      	b.n	8000c1c <__udivmoddi4+0x1b8>
 8000d24:	3b02      	subs	r3, #2
 8000d26:	4461      	add	r1, ip
 8000d28:	e732      	b.n	8000b90 <__udivmoddi4+0x12c>
 8000d2a:	4630      	mov	r0, r6
 8000d2c:	e709      	b.n	8000b42 <__udivmoddi4+0xde>
 8000d2e:	4464      	add	r4, ip
 8000d30:	3802      	subs	r0, #2
 8000d32:	e742      	b.n	8000bba <__udivmoddi4+0x156>

08000d34 <__aeabi_idiv0>:
 8000d34:	4770      	bx	lr
 8000d36:	bf00      	nop

08000d38 <HAL_TIM_PeriodElapsedCallback>:
extern uint8_t g_uCAN_Rx_Data[8];
extern uint32_t FLAG_RxCplt;


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)//sequence timer. generate per 1ms
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	6078      	str	r0, [r7, #4]
  if(htim->Instance == TIM5)
 8000d40:	687b      	ldr	r3, [r7, #4]
 8000d42:	681b      	ldr	r3, [r3, #0]
 8000d44:	4a21      	ldr	r2, [pc, #132]	; (8000dcc <HAL_TIM_PeriodElapsedCallback+0x94>)
 8000d46:	4293      	cmp	r3, r2
 8000d48:	d10c      	bne.n	8000d64 <HAL_TIM_PeriodElapsedCallback+0x2c>
  {
	  us_Tick++;
 8000d4a:	4b21      	ldr	r3, [pc, #132]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000d4c:	681b      	ldr	r3, [r3, #0]
 8000d4e:	3301      	adds	r3, #1
 8000d50:	4a1f      	ldr	r2, [pc, #124]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000d52:	6013      	str	r3, [r2, #0]
	  if(us_Tick>0xffff0000){us_Tick=0;}
 8000d54:	4b1e      	ldr	r3, [pc, #120]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000d56:	681b      	ldr	r3, [r3, #0]
 8000d58:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000d5c:	d902      	bls.n	8000d64 <HAL_TIM_PeriodElapsedCallback+0x2c>
 8000d5e:	4b1c      	ldr	r3, [pc, #112]	; (8000dd0 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8000d60:	2200      	movs	r2, #0
 8000d62:	601a      	str	r2, [r3, #0]
  }

  if(htim->Instance == TIM6)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a1a      	ldr	r2, [pc, #104]	; (8000dd4 <HAL_TIM_PeriodElapsedCallback+0x9c>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d116      	bne.n	8000d9c <HAL_TIM_PeriodElapsedCallback+0x64>
  {
	  gTick++;
 8000d6e:	4b1a      	ldr	r3, [pc, #104]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	3301      	adds	r3, #1
 8000d74:	4a18      	ldr	r2, [pc, #96]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000d76:	6013      	str	r3, [r2, #0]
	  if((gTick%10) == 0){Tick_100ms++;}
 8000d78:	4b17      	ldr	r3, [pc, #92]	; (8000dd8 <HAL_TIM_PeriodElapsedCallback+0xa0>)
 8000d7a:	6819      	ldr	r1, [r3, #0]
 8000d7c:	4b17      	ldr	r3, [pc, #92]	; (8000ddc <HAL_TIM_PeriodElapsedCallback+0xa4>)
 8000d7e:	fba3 2301 	umull	r2, r3, r3, r1
 8000d82:	08da      	lsrs	r2, r3, #3
 8000d84:	4613      	mov	r3, r2
 8000d86:	009b      	lsls	r3, r3, #2
 8000d88:	4413      	add	r3, r2
 8000d8a:	005b      	lsls	r3, r3, #1
 8000d8c:	1aca      	subs	r2, r1, r3
 8000d8e:	2a00      	cmp	r2, #0
 8000d90:	d104      	bne.n	8000d9c <HAL_TIM_PeriodElapsedCallback+0x64>
 8000d92:	4b13      	ldr	r3, [pc, #76]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	3301      	adds	r3, #1
 8000d98:	4a11      	ldr	r2, [pc, #68]	; (8000de0 <HAL_TIM_PeriodElapsedCallback+0xa8>)
 8000d9a:	6013      	str	r3, [r2, #0]
  }
  if(htim->Instance == TIM7)
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	4a10      	ldr	r2, [pc, #64]	; (8000de4 <HAL_TIM_PeriodElapsedCallback+0xac>)
 8000da2:	4293      	cmp	r3, r2
 8000da4:	d10c      	bne.n	8000dc0 <HAL_TIM_PeriodElapsedCallback+0x88>
  {
	  USS_tick++;
 8000da6:	4b10      	ldr	r3, [pc, #64]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000da8:	681b      	ldr	r3, [r3, #0]
 8000daa:	3301      	adds	r3, #1
 8000dac:	4a0e      	ldr	r2, [pc, #56]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000dae:	6013      	str	r3, [r2, #0]
	  if(USS_tick>0xffff0000){USS_tick=0;}
 8000db0:	4b0d      	ldr	r3, [pc, #52]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8000db8:	d902      	bls.n	8000dc0 <HAL_TIM_PeriodElapsedCallback+0x88>
 8000dba:	4b0b      	ldr	r3, [pc, #44]	; (8000de8 <HAL_TIM_PeriodElapsedCallback+0xb0>)
 8000dbc:	2200      	movs	r2, #0
 8000dbe:	601a      	str	r2, [r3, #0]
  }

}
 8000dc0:	bf00      	nop
 8000dc2:	370c      	adds	r7, #12
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dca:	4770      	bx	lr
 8000dcc:	40000c00 	.word	0x40000c00
 8000dd0:	2000002c 	.word	0x2000002c
 8000dd4:	40001000 	.word	0x40001000
 8000dd8:	20000030 	.word	0x20000030
 8000ddc:	cccccccd 	.word	0xcccccccd
 8000de0:	20000038 	.word	0x20000038
 8000de4:	40001400 	.word	0x40001400
 8000de8:	2000005c 	.word	0x2000005c

08000dec <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000dec:	b480      	push	{r7}
 8000dee:	b083      	sub	sp, #12
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	4603      	mov	r3, r0
 8000df4:	80fb      	strh	r3, [r7, #6]
    if(GPIO_Pin == USS_Data1_Pin) {
 8000df6:	88fb      	ldrh	r3, [r7, #6]
 8000df8:	2b40      	cmp	r3, #64	; 0x40
 8000dfa:	d103      	bne.n	8000e04 <HAL_GPIO_EXTI_Callback+0x18>
    	USS_end = us_Tick;
 8000dfc:	4b04      	ldr	r3, [pc, #16]	; (8000e10 <HAL_GPIO_EXTI_Callback+0x24>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a04      	ldr	r2, [pc, #16]	; (8000e14 <HAL_GPIO_EXTI_Callback+0x28>)
 8000e02:	6013      	str	r3, [r2, #0]
    }
}
 8000e04:	bf00      	nop
 8000e06:	370c      	adds	r7, #12
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0e:	4770      	bx	lr
 8000e10:	2000002c 	.word	0x2000002c
 8000e14:	20000058 	.word	0x20000058

08000e18 <startTTS>:


void startTTS()
{
 8000e18:	b580      	push	{r7, lr}
 8000e1a:	b084      	sub	sp, #16
 8000e1c:	af00      	add	r7, sp, #0
    char packit[8];
    int index=0;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	60fb      	str	r3, [r7, #12]

    packit[index++]= 0;
 8000e22:	68fb      	ldr	r3, [r7, #12]
 8000e24:	1c5a      	adds	r2, r3, #1
 8000e26:	60fa      	str	r2, [r7, #12]
 8000e28:	3310      	adds	r3, #16
 8000e2a:	443b      	add	r3, r7
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0; // temporarily designated
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	1c5a      	adds	r2, r3, #1
 8000e36:	60fa      	str	r2, [r7, #12]
 8000e38:	3310      	adds	r3, #16
 8000e3a:	443b      	add	r3, r7
 8000e3c:	2200      	movs	r2, #0
 8000e3e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8000e42:	68fb      	ldr	r3, [r7, #12]
 8000e44:	1c5a      	adds	r2, r3, #1
 8000e46:	60fa      	str	r2, [r7, #12]
 8000e48:	3310      	adds	r3, #16
 8000e4a:	443b      	add	r3, r7
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	1c5a      	adds	r2, r3, #1
 8000e56:	60fa      	str	r2, [r7, #12]
 8000e58:	3310      	adds	r3, #16
 8000e5a:	443b      	add	r3, r7
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	1c5a      	adds	r2, r3, #1
 8000e66:	60fa      	str	r2, [r7, #12]
 8000e68:	3310      	adds	r3, #16
 8000e6a:	443b      	add	r3, r7
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	1c5a      	adds	r2, r3, #1
 8000e76:	60fa      	str	r2, [r7, #12]
 8000e78:	3310      	adds	r3, #16
 8000e7a:	443b      	add	r3, r7
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 1;
 8000e82:	68fb      	ldr	r3, [r7, #12]
 8000e84:	1c5a      	adds	r2, r3, #1
 8000e86:	60fa      	str	r2, [r7, #12]
 8000e88:	3310      	adds	r3, #16
 8000e8a:	443b      	add	r3, r7
 8000e8c:	2201      	movs	r2, #1
 8000e8e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= 0;
 8000e92:	68fb      	ldr	r3, [r7, #12]
 8000e94:	1c5a      	adds	r2, r3, #1
 8000e96:	60fa      	str	r2, [r7, #12]
 8000e98:	3310      	adds	r3, #16
 8000e9a:	443b      	add	r3, r7
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	f803 2c0c 	strb.w	r2, [r3, #-12]

//    if(!can->send8BytePackit(CANID8,packit))
//        can->reset();
    sendCan(5001, packit, 8, 1);
 8000ea2:	1d39      	adds	r1, r7, #4
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	2208      	movs	r2, #8
 8000ea8:	f241 3089 	movw	r0, #5001	; 0x1389
 8000eac:	f000 fde2 	bl	8001a74 <sendCan>
}
 8000eb0:	bf00      	nop
 8000eb2:	3710      	adds	r7, #16
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	bd80      	pop	{r7, pc}

08000eb8 <parsePmm>:

void parsePmm(uint8_t *msg)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
    /* x / x / x / x / x / x / air,uv,relay state/ Battery */
    battery = msg[7];
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	3307      	adds	r3, #7
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	461a      	mov	r2, r3
 8000ec8:	4b12      	ldr	r3, [pc, #72]	; (8000f14 <parsePmm+0x5c>)
 8000eca:	601a      	str	r2, [r3, #0]
    sensor_state->air_purifier = (msg[6]&128)>>7;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	3306      	adds	r3, #6
 8000ed0:	781a      	ldrb	r2, [r3, #0]
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <parsePmm+0x60>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	09d2      	lsrs	r2, r2, #7
 8000ed8:	b2d2      	uxtb	r2, r2
 8000eda:	74da      	strb	r2, [r3, #19]
    sensor_state->uv = (msg[6]&64)>>6;
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	3306      	adds	r3, #6
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	119b      	asrs	r3, r3, #6
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	4b0c      	ldr	r3, [pc, #48]	; (8000f18 <parsePmm+0x60>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f002 0201 	and.w	r2, r2, #1
 8000eee:	b2d2      	uxtb	r2, r2
 8000ef0:	749a      	strb	r2, [r3, #18]
    sensor_state->relay = (msg[6]&32)>>5;
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	3306      	adds	r3, #6
 8000ef6:	781b      	ldrb	r3, [r3, #0]
 8000ef8:	115b      	asrs	r3, r3, #5
 8000efa:	b2da      	uxtb	r2, r3
 8000efc:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <parsePmm+0x60>)
 8000efe:	681b      	ldr	r3, [r3, #0]
 8000f00:	f002 0201 	and.w	r2, r2, #1
 8000f04:	b2d2      	uxtb	r2, r2
 8000f06:	745a      	strb	r2, [r3, #17]
}
 8000f08:	bf00      	nop
 8000f0a:	370c      	adds	r7, #12
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f12:	4770      	bx	lr
 8000f14:	20000078 	.word	0x20000078
 8000f18:	20000074 	.word	0x20000074

08000f1c <parseTop>:


void parseTop(uint8_t *msg)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
    /* x / x / x / x / x / x /touch sensor/PIR */
    for(int i=0; i<6; i++)
 8000f24:	2300      	movs	r3, #0
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	e012      	b.n	8000f50 <parseTop+0x34>
        pir[i] = (msg[7]>>i)&1; // back is 0
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	3307      	adds	r3, #7
 8000f2e:	781b      	ldrb	r3, [r3, #0]
 8000f30:	461a      	mov	r2, r3
 8000f32:	68fb      	ldr	r3, [r7, #12]
 8000f34:	fa42 f303 	asr.w	r3, r2, r3
 8000f38:	b2db      	uxtb	r3, r3
 8000f3a:	f003 0301 	and.w	r3, r3, #1
 8000f3e:	b2d9      	uxtb	r1, r3
 8000f40:	4a0a      	ldr	r2, [pc, #40]	; (8000f6c <parseTop+0x50>)
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	4413      	add	r3, r2
 8000f46:	460a      	mov	r2, r1
 8000f48:	701a      	strb	r2, [r3, #0]
    for(int i=0; i<6; i++)
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	3301      	adds	r3, #1
 8000f4e:	60fb      	str	r3, [r7, #12]
 8000f50:	68fb      	ldr	r3, [r7, #12]
 8000f52:	2b05      	cmp	r3, #5
 8000f54:	dde9      	ble.n	8000f2a <parseTop+0xe>
    touch = msg[6];
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	799a      	ldrb	r2, [r3, #6]
 8000f5a:	4b05      	ldr	r3, [pc, #20]	; (8000f70 <parseTop+0x54>)
 8000f5c:	701a      	strb	r2, [r3, #0]
}
 8000f5e:	bf00      	nop
 8000f60:	3714      	adds	r7, #20
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr
 8000f6a:	bf00      	nop
 8000f6c:	2000006c 	.word	0x2000006c
 8000f70:	20000069 	.word	0x20000069

08000f74 <parseState>:


void parseState(uint8_t *msg)
{
 8000f74:	b480      	push	{r7}
 8000f76:	b083      	sub	sp, #12
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
    /* x / x / x / x / charging relay / air,uv on off / speaker / robot state */
    robot_state = msg[7];
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	3307      	adds	r3, #7
 8000f80:	781b      	ldrb	r3, [r3, #0]
 8000f82:	461a      	mov	r2, r3
 8000f84:	4b19      	ldr	r3, [pc, #100]	; (8000fec <parseState+0x78>)
 8000f86:	601a      	str	r2, [r3, #0]
    air_sw = (msg[5] & 128)>>7;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	3305      	adds	r3, #5
 8000f8c:	781b      	ldrb	r3, [r3, #0]
 8000f8e:	09db      	lsrs	r3, r3, #7
 8000f90:	b2da      	uxtb	r2, r3
 8000f92:	4b17      	ldr	r3, [pc, #92]	; (8000ff0 <parseState+0x7c>)
 8000f94:	701a      	strb	r2, [r3, #0]
    uv_sw = (msg[5] & 64)>>6;
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	3305      	adds	r3, #5
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	119b      	asrs	r3, r3, #6
 8000f9e:	b2db      	uxtb	r3, r3
 8000fa0:	f003 0301 	and.w	r3, r3, #1
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	4b13      	ldr	r3, [pc, #76]	; (8000ff4 <parseState+0x80>)
 8000fa8:	701a      	strb	r2, [r3, #0]
    charge_relay_sw = (msg[4] & 128)>>7;
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3304      	adds	r3, #4
 8000fae:	781b      	ldrb	r3, [r3, #0]
 8000fb0:	09db      	lsrs	r3, r3, #7
 8000fb2:	b2da      	uxtb	r2, r3
 8000fb4:	4b10      	ldr	r3, [pc, #64]	; (8000ff8 <parseState+0x84>)
 8000fb6:	701a      	strb	r2, [r3, #0]
    charger_sw = (msg[4] & 64)>>6;
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	3304      	adds	r3, #4
 8000fbc:	781b      	ldrb	r3, [r3, #0]
 8000fbe:	119b      	asrs	r3, r3, #6
 8000fc0:	b2db      	uxtb	r3, r3
 8000fc2:	f003 0301 	and.w	r3, r3, #1
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	4b0c      	ldr	r3, [pc, #48]	; (8000ffc <parseState+0x88>)
 8000fca:	701a      	strb	r2, [r3, #0]
    check_docking_sig = (msg[4] & 32)>>5;
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	3304      	adds	r3, #4
 8000fd0:	781b      	ldrb	r3, [r3, #0]
 8000fd2:	115b      	asrs	r3, r3, #5
 8000fd4:	b2db      	uxtb	r3, r3
 8000fd6:	f003 0301 	and.w	r3, r3, #1
 8000fda:	b2da      	uxtb	r2, r3
 8000fdc:	4b08      	ldr	r3, [pc, #32]	; (8001000 <parseState+0x8c>)
 8000fde:	701a      	strb	r2, [r3, #0]
    //fan_duty = msg[3] / 100.0;
    //controlFan(air_sw);
}
 8000fe0:	bf00      	nop
 8000fe2:	370c      	adds	r7, #12
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	20000060 	.word	0x20000060
 8000ff0:	20000064 	.word	0x20000064
 8000ff4:	20000065 	.word	0x20000065
 8000ff8:	20000066 	.word	0x20000066
 8000ffc:	20000067 	.word	0x20000067
 8001000:	20000068 	.word	0x20000068

08001004 <controlMotor>:

void controlMotor()
{
 8001004:	b598      	push	{r3, r4, r7, lr}
 8001006:	af00      	add	r7, sp, #0
    static int count = 0;
    if(motor_sw)
 8001008:	4b35      	ldr	r3, [pc, #212]	; (80010e0 <controlMotor+0xdc>)
 800100a:	781b      	ldrb	r3, [r3, #0]
 800100c:	2b00      	cmp	r3, #0
 800100e:	d060      	beq.n	80010d2 <controlMotor+0xce>
    {
        if(motor_disable_flag)
 8001010:	4b34      	ldr	r3, [pc, #208]	; (80010e4 <controlMotor+0xe0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	2b00      	cmp	r3, #0
 8001016:	d004      	beq.n	8001022 <controlMotor+0x1e>
        {
            enable();
 8001018:	f001 fccc 	bl	80029b4 <enable>
            motor_disable_flag = 0;
 800101c:	4b31      	ldr	r3, [pc, #196]	; (80010e4 <controlMotor+0xe0>)
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
        }
        if(motor_break == 1)
 8001022:	4b31      	ldr	r3, [pc, #196]	; (80010e8 <controlMotor+0xe4>)
 8001024:	681b      	ldr	r3, [r3, #0]
 8001026:	2b01      	cmp	r3, #1
 8001028:	d11e      	bne.n	8001068 <controlMotor+0x64>
        {
            control((int)motor->cmd_motor_rpm_left,(int)motor->cmd_motor_rpm_right);
 800102a:	4b30      	ldr	r3, [pc, #192]	; (80010ec <controlMotor+0xe8>)
 800102c:	681b      	ldr	r3, [r3, #0]
 800102e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001032:	4610      	mov	r0, r2
 8001034:	4619      	mov	r1, r3
 8001036:	f7ff fcb5 	bl	80009a4 <__aeabi_d2iz>
 800103a:	4603      	mov	r3, r0
 800103c:	b21c      	sxth	r4, r3
 800103e:	4b2b      	ldr	r3, [pc, #172]	; (80010ec <controlMotor+0xe8>)
 8001040:	681b      	ldr	r3, [r3, #0]
 8001042:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001046:	4610      	mov	r0, r2
 8001048:	4619      	mov	r1, r3
 800104a:	f7ff fcab 	bl	80009a4 <__aeabi_d2iz>
 800104e:	4603      	mov	r3, r0
 8001050:	b21b      	sxth	r3, r3
 8001052:	4619      	mov	r1, r3
 8001054:	4620      	mov	r0, r4
 8001056:	f001 fe4d 	bl	8002cf4 <control>
            motor_break = 2;
 800105a:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <controlMotor+0xe4>)
 800105c:	2202      	movs	r2, #2
 800105e:	601a      	str	r2, [r3, #0]
            count = 0;
 8001060:	4b23      	ldr	r3, [pc, #140]	; (80010f0 <controlMotor+0xec>)
 8001062:	2200      	movs	r2, #0
 8001064:	601a      	str	r2, [r3, #0]
    else
    {
        disable();
        motor_disable_flag = 1;
    }
}
 8001066:	e039      	b.n	80010dc <controlMotor+0xd8>
        else if(motor_break == 2)
 8001068:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <controlMotor+0xe4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	2b02      	cmp	r3, #2
 800106e:	d124      	bne.n	80010ba <controlMotor+0xb6>
            count ++;
 8001070:	4b1f      	ldr	r3, [pc, #124]	; (80010f0 <controlMotor+0xec>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	3301      	adds	r3, #1
 8001076:	4a1e      	ldr	r2, [pc, #120]	; (80010f0 <controlMotor+0xec>)
 8001078:	6013      	str	r3, [r2, #0]
            control((int)motor->cmd_motor_rpm_left,(int)motor->cmd_motor_rpm_right);
 800107a:	4b1c      	ldr	r3, [pc, #112]	; (80010ec <controlMotor+0xe8>)
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001082:	4610      	mov	r0, r2
 8001084:	4619      	mov	r1, r3
 8001086:	f7ff fc8d 	bl	80009a4 <__aeabi_d2iz>
 800108a:	4603      	mov	r3, r0
 800108c:	b21c      	sxth	r4, r3
 800108e:	4b17      	ldr	r3, [pc, #92]	; (80010ec <controlMotor+0xe8>)
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8001096:	4610      	mov	r0, r2
 8001098:	4619      	mov	r1, r3
 800109a:	f7ff fc83 	bl	80009a4 <__aeabi_d2iz>
 800109e:	4603      	mov	r3, r0
 80010a0:	b21b      	sxth	r3, r3
 80010a2:	4619      	mov	r1, r3
 80010a4:	4620      	mov	r0, r4
 80010a6:	f001 fe25 	bl	8002cf4 <control>
            if(count == 20)
 80010aa:	4b11      	ldr	r3, [pc, #68]	; (80010f0 <controlMotor+0xec>)
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	2b14      	cmp	r3, #20
 80010b0:	d114      	bne.n	80010dc <controlMotor+0xd8>
                motor_break = 3;
 80010b2:	4b0d      	ldr	r3, [pc, #52]	; (80010e8 <controlMotor+0xe4>)
 80010b4:	2203      	movs	r2, #3
 80010b6:	601a      	str	r2, [r3, #0]
}
 80010b8:	e010      	b.n	80010dc <controlMotor+0xd8>
        else if(motor_break == 3)
 80010ba:	4b0b      	ldr	r3, [pc, #44]	; (80010e8 <controlMotor+0xe4>)
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b03      	cmp	r3, #3
 80010c0:	d10c      	bne.n	80010dc <controlMotor+0xd8>
            control(0,0);
 80010c2:	2100      	movs	r1, #0
 80010c4:	2000      	movs	r0, #0
 80010c6:	f001 fe15 	bl	8002cf4 <control>
            count = 0;
 80010ca:	4b09      	ldr	r3, [pc, #36]	; (80010f0 <controlMotor+0xec>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	601a      	str	r2, [r3, #0]
}
 80010d0:	e004      	b.n	80010dc <controlMotor+0xd8>
        disable();
 80010d2:	f001 fcd3 	bl	8002a7c <disable>
        motor_disable_flag = 1;
 80010d6:	4b03      	ldr	r3, [pc, #12]	; (80010e4 <controlMotor+0xe0>)
 80010d8:	2201      	movs	r2, #1
 80010da:	601a      	str	r2, [r3, #0]
}
 80010dc:	bf00      	nop
 80010de:	bd98      	pop	{r3, r4, r7, pc}
 80010e0:	20000000 	.word	0x20000000
 80010e4:	20000050 	.word	0x20000050
 80010e8:	2000004c 	.word	0x2000004c
 80010ec:	20000084 	.word	0x20000084
 80010f0:	20000088 	.word	0x20000088
 80010f4:	00000000 	.word	0x00000000

080010f8 <toRPM>:


int toRPM()
{
 80010f8:	b5b0      	push	{r4, r5, r7, lr}
 80010fa:	af00      	add	r7, sp, #0
    motor->cmd_motor_rpm_right = (60/(2*Math_PI*WHEEL_RADIUS)) * (motor->cmd_v + (WHEEL_DISTANCE/2)*motor->cmd_w);
 80010fc:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <toRPM+0xa8>)
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001104:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <toRPM+0xa8>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800110c:	a320      	add	r3, pc, #128	; (adr r3, 8001190 <toRPM+0x98>)
 800110e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001112:	f7ff fa35 	bl	8000580 <__aeabi_dmul>
 8001116:	4602      	mov	r2, r0
 8001118:	460b      	mov	r3, r1
 800111a:	4620      	mov	r0, r4
 800111c:	4629      	mov	r1, r5
 800111e:	f7ff f879 	bl	8000214 <__adddf3>
 8001122:	4602      	mov	r2, r0
 8001124:	460b      	mov	r3, r1
 8001126:	4610      	mov	r0, r2
 8001128:	4619      	mov	r1, r3
 800112a:	4b1d      	ldr	r3, [pc, #116]	; (80011a0 <toRPM+0xa8>)
 800112c:	681c      	ldr	r4, [r3, #0]
 800112e:	a31a      	add	r3, pc, #104	; (adr r3, 8001198 <toRPM+0xa0>)
 8001130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001134:	f7ff fa24 	bl	8000580 <__aeabi_dmul>
 8001138:	4602      	mov	r2, r0
 800113a:	460b      	mov	r3, r1
 800113c:	e9c4 2302 	strd	r2, r3, [r4, #8]
    motor->cmd_motor_rpm_left = (60/(2*Math_PI*WHEEL_RADIUS)) * (motor->cmd_v - (WHEEL_DISTANCE/2)*motor->cmd_w);
 8001140:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <toRPM+0xa8>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8001148:	4b15      	ldr	r3, [pc, #84]	; (80011a0 <toRPM+0xa8>)
 800114a:	681b      	ldr	r3, [r3, #0]
 800114c:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8001150:	a30f      	add	r3, pc, #60	; (adr r3, 8001190 <toRPM+0x98>)
 8001152:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001156:	f7ff fa13 	bl	8000580 <__aeabi_dmul>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	4620      	mov	r0, r4
 8001160:	4629      	mov	r1, r5
 8001162:	f7ff f855 	bl	8000210 <__aeabi_dsub>
 8001166:	4602      	mov	r2, r0
 8001168:	460b      	mov	r3, r1
 800116a:	4610      	mov	r0, r2
 800116c:	4619      	mov	r1, r3
 800116e:	4b0c      	ldr	r3, [pc, #48]	; (80011a0 <toRPM+0xa8>)
 8001170:	681c      	ldr	r4, [r3, #0]
 8001172:	a309      	add	r3, pc, #36	; (adr r3, 8001198 <toRPM+0xa0>)
 8001174:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001178:	f7ff fa02 	bl	8000580 <__aeabi_dmul>
 800117c:	4602      	mov	r2, r0
 800117e:	460b      	mov	r3, r1
 8001180:	e9c4 2300 	strd	r2, r3, [r4]
    return 0;
 8001184:	2300      	movs	r3, #0
}
 8001186:	4618      	mov	r0, r3
 8001188:	bdb0      	pop	{r4, r5, r7, pc}
 800118a:	bf00      	nop
 800118c:	f3af 8000 	nop.w
 8001190:	0e560419 	.word	0x0e560419
 8001194:	3fcdb22d 	.word	0x3fcdb22d
 8001198:	31bcaa49 	.word	0x31bcaa49
 800119c:	40625d31 	.word	0x40625d31
 80011a0:	20000084 	.word	0x20000084

080011a4 <parseCmdvel>:

void parseCmdvel(uint8_t *msg)
{
 80011a4:	b590      	push	{r4, r7, lr}
 80011a6:	b085      	sub	sp, #20
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]
    /*cmd_v lower/cmd_v upper/cmd_w lower/cmd_w upper/ x / x / x / x */
    int16_t temp;
    temp = ((int16_t)msg[0]|(int16_t)msg[1]<<8);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	781b      	ldrb	r3, [r3, #0]
 80011b0:	b21a      	sxth	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	3301      	adds	r3, #1
 80011b6:	781b      	ldrb	r3, [r3, #0]
 80011b8:	021b      	lsls	r3, r3, #8
 80011ba:	b21b      	sxth	r3, r3
 80011bc:	4313      	orrs	r3, r2
 80011be:	81fb      	strh	r3, [r7, #14]
    motor->cmd_v = (double)temp/SIGNIFICANT_FIGURES;
 80011c0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011c4:	4618      	mov	r0, r3
 80011c6:	f7ff f971 	bl	80004ac <__aeabi_i2d>
 80011ca:	4b19      	ldr	r3, [pc, #100]	; (8001230 <parseCmdvel+0x8c>)
 80011cc:	681c      	ldr	r4, [r3, #0]
 80011ce:	f04f 0200 	mov.w	r2, #0
 80011d2:	4b18      	ldr	r3, [pc, #96]	; (8001234 <parseCmdvel+0x90>)
 80011d4:	f7ff fafe 	bl	80007d4 <__aeabi_ddiv>
 80011d8:	4602      	mov	r2, r0
 80011da:	460b      	mov	r3, r1
 80011dc:	e9c4 2308 	strd	r2, r3, [r4, #32]
    temp = ((int16_t)msg[2]|(int16_t)msg[3]<<8);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	3302      	adds	r3, #2
 80011e4:	781b      	ldrb	r3, [r3, #0]
 80011e6:	b21a      	sxth	r2, r3
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	3303      	adds	r3, #3
 80011ec:	781b      	ldrb	r3, [r3, #0]
 80011ee:	021b      	lsls	r3, r3, #8
 80011f0:	b21b      	sxth	r3, r3
 80011f2:	4313      	orrs	r3, r2
 80011f4:	81fb      	strh	r3, [r7, #14]
    motor->cmd_w = (double)temp/SIGNIFICANT_FIGURES;
 80011f6:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff f956 	bl	80004ac <__aeabi_i2d>
 8001200:	4b0b      	ldr	r3, [pc, #44]	; (8001230 <parseCmdvel+0x8c>)
 8001202:	681c      	ldr	r4, [r3, #0]
 8001204:	f04f 0200 	mov.w	r2, #0
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <parseCmdvel+0x90>)
 800120a:	f7ff fae3 	bl	80007d4 <__aeabi_ddiv>
 800120e:	4602      	mov	r2, r0
 8001210:	460b      	mov	r3, r1
 8001212:	e9c4 230a 	strd	r2, r3, [r4, #40]	; 0x28
    motor_sw = msg[4];
 8001216:	687b      	ldr	r3, [r7, #4]
 8001218:	791a      	ldrb	r2, [r3, #4]
 800121a:	4b07      	ldr	r3, [pc, #28]	; (8001238 <parseCmdvel+0x94>)
 800121c:	701a      	strb	r2, [r3, #0]
    toRPM();
 800121e:	f7ff ff6b 	bl	80010f8 <toRPM>
    motor_break = 1;
 8001222:	4b06      	ldr	r3, [pc, #24]	; (800123c <parseCmdvel+0x98>)
 8001224:	2201      	movs	r2, #1
 8001226:	601a      	str	r2, [r3, #0]
}
 8001228:	bf00      	nop
 800122a:	3714      	adds	r7, #20
 800122c:	46bd      	mov	sp, r7
 800122e:	bd90      	pop	{r4, r7, pc}
 8001230:	20000084 	.word	0x20000084
 8001234:	40590000 	.word	0x40590000
 8001238:	20000000 	.word	0x20000000
 800123c:	2000004c 	.word	0x2000004c

08001240 <sendEnc>:



void sendEnc(int id)
{
 8001240:	b590      	push	{r4, r7, lr}
 8001242:	b087      	sub	sp, #28
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
    /*enc_v lower/enc_v upper/enc_w lower/enc_w upper/Undefined/Undefined/Undefined/Undefined*/
    char packit[8];
    int index=0;
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

    packit[index++]= ((int16_t)(motor->real_v*SIGNIFICANT_FIGURES)) & 0xff;
 800124c:	4b5f      	ldr	r3, [pc, #380]	; (80013cc <sendEnc+0x18c>)
 800124e:	681b      	ldr	r3, [r3, #0]
 8001250:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001254:	f04f 0200 	mov.w	r2, #0
 8001258:	4b5d      	ldr	r3, [pc, #372]	; (80013d0 <sendEnc+0x190>)
 800125a:	f7ff f991 	bl	8000580 <__aeabi_dmul>
 800125e:	4602      	mov	r2, r0
 8001260:	460b      	mov	r3, r1
 8001262:	4610      	mov	r0, r2
 8001264:	4619      	mov	r1, r3
 8001266:	f7ff fb9d 	bl	80009a4 <__aeabi_d2iz>
 800126a:	4603      	mov	r3, r0
 800126c:	b219      	sxth	r1, r3
 800126e:	697b      	ldr	r3, [r7, #20]
 8001270:	1c5a      	adds	r2, r3, #1
 8001272:	617a      	str	r2, [r7, #20]
 8001274:	b2ca      	uxtb	r2, r1
 8001276:	3318      	adds	r3, #24
 8001278:	443b      	add	r3, r7
 800127a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_v*SIGNIFICANT_FIGURES))>>8 & 0xff;
 800127e:	4b53      	ldr	r3, [pc, #332]	; (80013cc <sendEnc+0x18c>)
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	e9d3 010c 	ldrd	r0, r1, [r3, #48]	; 0x30
 8001286:	f04f 0200 	mov.w	r2, #0
 800128a:	4b51      	ldr	r3, [pc, #324]	; (80013d0 <sendEnc+0x190>)
 800128c:	f7ff f978 	bl	8000580 <__aeabi_dmul>
 8001290:	4602      	mov	r2, r0
 8001292:	460b      	mov	r3, r1
 8001294:	4610      	mov	r0, r2
 8001296:	4619      	mov	r1, r3
 8001298:	f7ff fb84 	bl	80009a4 <__aeabi_d2iz>
 800129c:	4603      	mov	r3, r0
 800129e:	b21b      	sxth	r3, r3
 80012a0:	121b      	asrs	r3, r3, #8
 80012a2:	b219      	sxth	r1, r3
 80012a4:	697b      	ldr	r3, [r7, #20]
 80012a6:	1c5a      	adds	r2, r3, #1
 80012a8:	617a      	str	r2, [r7, #20]
 80012aa:	b2ca      	uxtb	r2, r1
 80012ac:	3318      	adds	r3, #24
 80012ae:	443b      	add	r3, r7
 80012b0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_w*SIGNIFICANT_FIGURES)) & 0xff;
 80012b4:	4b45      	ldr	r3, [pc, #276]	; (80013cc <sendEnc+0x18c>)
 80012b6:	681b      	ldr	r3, [r3, #0]
 80012b8:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	4b43      	ldr	r3, [pc, #268]	; (80013d0 <sendEnc+0x190>)
 80012c2:	f7ff f95d 	bl	8000580 <__aeabi_dmul>
 80012c6:	4602      	mov	r2, r0
 80012c8:	460b      	mov	r3, r1
 80012ca:	4610      	mov	r0, r2
 80012cc:	4619      	mov	r1, r3
 80012ce:	f7ff fb69 	bl	80009a4 <__aeabi_d2iz>
 80012d2:	4603      	mov	r3, r0
 80012d4:	b219      	sxth	r1, r3
 80012d6:	697b      	ldr	r3, [r7, #20]
 80012d8:	1c5a      	adds	r2, r3, #1
 80012da:	617a      	str	r2, [r7, #20]
 80012dc:	b2ca      	uxtb	r2, r1
 80012de:	3318      	adds	r3, #24
 80012e0:	443b      	add	r3, r7
 80012e2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= ((int16_t)(motor->real_w*SIGNIFICANT_FIGURES))>>8 & 0xff;
 80012e6:	4b39      	ldr	r3, [pc, #228]	; (80013cc <sendEnc+0x18c>)
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80012ee:	f04f 0200 	mov.w	r2, #0
 80012f2:	4b37      	ldr	r3, [pc, #220]	; (80013d0 <sendEnc+0x190>)
 80012f4:	f7ff f944 	bl	8000580 <__aeabi_dmul>
 80012f8:	4602      	mov	r2, r0
 80012fa:	460b      	mov	r3, r1
 80012fc:	4610      	mov	r0, r2
 80012fe:	4619      	mov	r1, r3
 8001300:	f7ff fb50 	bl	80009a4 <__aeabi_d2iz>
 8001304:	4603      	mov	r3, r0
 8001306:	b21b      	sxth	r3, r3
 8001308:	121b      	asrs	r3, r3, #8
 800130a:	b219      	sxth	r1, r3
 800130c:	697b      	ldr	r3, [r7, #20]
 800130e:	1c5a      	adds	r2, r3, #1
 8001310:	617a      	str	r2, [r7, #20]
 8001312:	b2ca      	uxtb	r2, r1
 8001314:	3318      	adds	r3, #24
 8001316:	443b      	add	r3, r7
 8001318:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= (sensor_state->motor[1]<<1) | sensor_state->motor[0];
 800131c:	4b2d      	ldr	r3, [pc, #180]	; (80013d4 <sendEnc+0x194>)
 800131e:	681b      	ldr	r3, [r3, #0]
 8001320:	7c1b      	ldrb	r3, [r3, #16]
 8001322:	005b      	lsls	r3, r3, #1
 8001324:	b25a      	sxtb	r2, r3
 8001326:	4b2b      	ldr	r3, [pc, #172]	; (80013d4 <sendEnc+0x194>)
 8001328:	681b      	ldr	r3, [r3, #0]
 800132a:	7bdb      	ldrb	r3, [r3, #15]
 800132c:	b25b      	sxtb	r3, r3
 800132e:	4313      	orrs	r3, r2
 8001330:	b259      	sxtb	r1, r3
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	617a      	str	r2, [r7, #20]
 8001338:	b2ca      	uxtb	r2, r1
 800133a:	3318      	adds	r3, #24
 800133c:	443b      	add	r3, r7
 800133e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= motor->RCURR * 100;
 8001342:	4b22      	ldr	r3, [pc, #136]	; (80013cc <sendEnc+0x18c>)
 8001344:	681b      	ldr	r3, [r3, #0]
 8001346:	e9d3 0112 	ldrd	r0, r1, [r3, #72]	; 0x48
 800134a:	f04f 0200 	mov.w	r2, #0
 800134e:	4b20      	ldr	r3, [pc, #128]	; (80013d0 <sendEnc+0x190>)
 8001350:	f7ff f916 	bl	8000580 <__aeabi_dmul>
 8001354:	4602      	mov	r2, r0
 8001356:	460b      	mov	r3, r1
 8001358:	4610      	mov	r0, r2
 800135a:	4619      	mov	r1, r3
 800135c:	697c      	ldr	r4, [r7, #20]
 800135e:	1c63      	adds	r3, r4, #1
 8001360:	617b      	str	r3, [r7, #20]
 8001362:	f7ff fb47 	bl	80009f4 <__aeabi_d2uiz>
 8001366:	4603      	mov	r3, r0
 8001368:	b2da      	uxtb	r2, r3
 800136a:	f104 0318 	add.w	r3, r4, #24
 800136e:	443b      	add	r3, r7
 8001370:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]= motor->LCURR * 100;
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <sendEnc+0x18c>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800137c:	f04f 0200 	mov.w	r2, #0
 8001380:	4b13      	ldr	r3, [pc, #76]	; (80013d0 <sendEnc+0x190>)
 8001382:	f7ff f8fd 	bl	8000580 <__aeabi_dmul>
 8001386:	4602      	mov	r2, r0
 8001388:	460b      	mov	r3, r1
 800138a:	4610      	mov	r0, r2
 800138c:	4619      	mov	r1, r3
 800138e:	697c      	ldr	r4, [r7, #20]
 8001390:	1c63      	adds	r3, r4, #1
 8001392:	617b      	str	r3, [r7, #20]
 8001394:	f7ff fb2e 	bl	80009f4 <__aeabi_d2uiz>
 8001398:	4603      	mov	r3, r0
 800139a:	b2da      	uxtb	r2, r3
 800139c:	f104 0318 	add.w	r3, r4, #24
 80013a0:	443b      	add	r3, r7
 80013a2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    packit[index++]=0;
 80013a6:	697b      	ldr	r3, [r7, #20]
 80013a8:	1c5a      	adds	r2, r3, #1
 80013aa:	617a      	str	r2, [r7, #20]
 80013ac:	3318      	adds	r3, #24
 80013ae:	443b      	add	r3, r7
 80013b0:	2200      	movs	r2, #0
 80013b2:	f803 2c0c 	strb.w	r2, [r3, #-12]

    sendCan(id, packit, 8, 1);//test
 80013b6:	6878      	ldr	r0, [r7, #4]
 80013b8:	f107 010c 	add.w	r1, r7, #12
 80013bc:	2301      	movs	r3, #1
 80013be:	2208      	movs	r2, #8
 80013c0:	f000 fb58 	bl	8001a74 <sendCan>
}
 80013c4:	bf00      	nop
 80013c6:	371c      	adds	r7, #28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bd90      	pop	{r4, r7, pc}
 80013cc:	20000084 	.word	0x20000084
 80013d0:	40590000 	.word	0x40590000
 80013d4:	20000074 	.word	0x20000074

080013d8 <toVW>:


int toVW(void)
{
 80013d8:	b598      	push	{r3, r4, r7, lr}
 80013da:	af00      	add	r7, sp, #0

    motor->real_motor_rpm_left=(double)motor->LRPM;
 80013dc:	4b2c      	ldr	r3, [pc, #176]	; (8001490 <toVW+0xb8>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 80013e4:	4a2a      	ldr	r2, [pc, #168]	; (8001490 <toVW+0xb8>)
 80013e6:	6814      	ldr	r4, [r2, #0]
 80013e8:	4618      	mov	r0, r3
 80013ea:	f7ff f85f 	bl	80004ac <__aeabi_i2d>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	e9c4 2304 	strd	r2, r3, [r4, #16]
    motor->real_motor_rpm_right=(double)motor->RRPM;
 80013f6:	4b26      	ldr	r3, [pc, #152]	; (8001490 <toVW+0xb8>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 80013fe:	4a24      	ldr	r2, [pc, #144]	; (8001490 <toVW+0xb8>)
 8001400:	6814      	ldr	r4, [r2, #0]
 8001402:	4618      	mov	r0, r3
 8001404:	f7ff f852 	bl	80004ac <__aeabi_i2d>
 8001408:	4602      	mov	r2, r0
 800140a:	460b      	mov	r3, r1
 800140c:	e9c4 2306 	strd	r2, r3, [r4, #24]

    motor->real_v = (motor->real_motor_rpm_left+motor->real_motor_rpm_right)*(Math_PI*WHEEL_RADIUS/60);
 8001410:	4b1f      	ldr	r3, [pc, #124]	; (8001490 <toVW+0xb8>)
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
 8001418:	4b1d      	ldr	r3, [pc, #116]	; (8001490 <toVW+0xb8>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8001420:	f7fe fef8 	bl	8000214 <__adddf3>
 8001424:	4602      	mov	r2, r0
 8001426:	460b      	mov	r3, r1
 8001428:	4610      	mov	r0, r2
 800142a:	4619      	mov	r1, r3
 800142c:	4b18      	ldr	r3, [pc, #96]	; (8001490 <toVW+0xb8>)
 800142e:	681c      	ldr	r4, [r3, #0]
 8001430:	a313      	add	r3, pc, #76	; (adr r3, 8001480 <toVW+0xa8>)
 8001432:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001436:	f7ff f8a3 	bl	8000580 <__aeabi_dmul>
 800143a:	4602      	mov	r2, r0
 800143c:	460b      	mov	r3, r1
 800143e:	e9c4 230c 	strd	r2, r3, [r4, #48]	; 0x30
    motor->real_w = (motor->real_motor_rpm_right-motor->real_motor_rpm_left)*((Math_PI*WHEEL_RADIUS)/(30*WHEEL_DISTANCE));
 8001442:	4b13      	ldr	r3, [pc, #76]	; (8001490 <toVW+0xb8>)
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	e9d3 0106 	ldrd	r0, r1, [r3, #24]
 800144a:	4b11      	ldr	r3, [pc, #68]	; (8001490 <toVW+0xb8>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8001452:	f7fe fedd 	bl	8000210 <__aeabi_dsub>
 8001456:	4602      	mov	r2, r0
 8001458:	460b      	mov	r3, r1
 800145a:	4610      	mov	r0, r2
 800145c:	4619      	mov	r1, r3
 800145e:	4b0c      	ldr	r3, [pc, #48]	; (8001490 <toVW+0xb8>)
 8001460:	681c      	ldr	r4, [r3, #0]
 8001462:	a309      	add	r3, pc, #36	; (adr r3, 8001488 <toVW+0xb0>)
 8001464:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001468:	f7ff f88a 	bl	8000580 <__aeabi_dmul>
 800146c:	4602      	mov	r2, r0
 800146e:	460b      	mov	r3, r1
 8001470:	e9c4 230e 	strd	r2, r3, [r4, #56]	; 0x38
    return 0;
 8001474:	2300      	movs	r3, #0
}
 8001476:	4618      	mov	r0, r3
 8001478:	bd98      	pop	{r3, r4, r7, pc}
 800147a:	bf00      	nop
 800147c:	f3af 8000 	nop.w
 8001480:	306c65e9 	.word	0x306c65e9
 8001484:	3f6be16e 	.word	0x3f6be16e
 8001488:	5313b470 	.word	0x5313b470
 800148c:	3f8e0b32 	.word	0x3f8e0b32
 8001490:	20000084 	.word	0x20000084

08001494 <parseEnc>:


void parseEnc(uint8_t *msg)
{
 8001494:	b590      	push	{r4, r7, lr}
 8001496:	b083      	sub	sp, #12
 8001498:	af00      	add	r7, sp, #0
 800149a:	6078      	str	r0, [r7, #4]
    /*PID(216)/Motor1 status/Motor1 rpm lower/Motor1 rpm upper/Motor2 status/Motor2 rpm lower/Motor2 rpm upper/temperature(deg)*/
    if(msg[0]==PID_PNT_MONITOR)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	781b      	ldrb	r3, [r3, #0]
 80014a0:	2bd8      	cmp	r3, #216	; 0xd8
 80014a2:	d136      	bne.n	8001512 <parseEnc+0x7e>
    {

        motor->LRPM=((int16_t)msg[2] | ((int16_t)msg[3]<<8));
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	3302      	adds	r3, #2
 80014a8:	781b      	ldrb	r3, [r3, #0]
 80014aa:	b219      	sxth	r1, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	3303      	adds	r3, #3
 80014b0:	781b      	ldrb	r3, [r3, #0]
 80014b2:	021b      	lsls	r3, r3, #8
 80014b4:	b21a      	sxth	r2, r3
 80014b6:	4b34      	ldr	r3, [pc, #208]	; (8001588 <parseEnc+0xf4>)
 80014b8:	681b      	ldr	r3, [r3, #0]
 80014ba:	430a      	orrs	r2, r1
 80014bc:	b212      	sxth	r2, r2
 80014be:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        motor->RRPM=((int16_t)msg[5] | ((int16_t)msg[6]<<8));
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	3305      	adds	r3, #5
 80014c6:	781b      	ldrb	r3, [r3, #0]
 80014c8:	b219      	sxth	r1, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	3306      	adds	r3, #6
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	021b      	lsls	r3, r3, #8
 80014d2:	b21a      	sxth	r2, r3
 80014d4:	4b2c      	ldr	r3, [pc, #176]	; (8001588 <parseEnc+0xf4>)
 80014d6:	681b      	ldr	r3, [r3, #0]
 80014d8:	430a      	orrs	r2, r1
 80014da:	b212      	sxth	r2, r2
 80014dc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
        motor->LRPM=-1*(motor->LRPM);
 80014e0:	4b29      	ldr	r3, [pc, #164]	; (8001588 <parseEnc+0xf4>)
 80014e2:	681b      	ldr	r3, [r3, #0]
 80014e4:	f9b3 3042 	ldrsh.w	r3, [r3, #66]	; 0x42
 80014e8:	b29b      	uxth	r3, r3
 80014ea:	425b      	negs	r3, r3
 80014ec:	b29a      	uxth	r2, r3
 80014ee:	4b26      	ldr	r3, [pc, #152]	; (8001588 <parseEnc+0xf4>)
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	b212      	sxth	r2, r2
 80014f4:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
        sensor_state->motor[0] = msg[1];
 80014f8:	4b24      	ldr	r3, [pc, #144]	; (800158c <parseEnc+0xf8>)
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	687a      	ldr	r2, [r7, #4]
 80014fe:	7852      	ldrb	r2, [r2, #1]
 8001500:	73da      	strb	r2, [r3, #15]
        sensor_state->motor[1] = msg[4];
 8001502:	4b22      	ldr	r3, [pc, #136]	; (800158c <parseEnc+0xf8>)
 8001504:	681b      	ldr	r3, [r3, #0]
 8001506:	687a      	ldr	r2, [r7, #4]
 8001508:	7912      	ldrb	r2, [r2, #4]
 800150a:	741a      	strb	r2, [r3, #16]

        toVW();
 800150c:	f7ff ff64 	bl	80013d8 <toVW>
    }
    else if(msg[0]==PID_MAIN_DATA2)
    {
        motor->LCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
    }
}
 8001510:	e036      	b.n	8001580 <parseEnc+0xec>
    else if(msg[0]==PID_MAIN_DATA)
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	2bc1      	cmp	r3, #193	; 0xc1
 8001518:	d117      	bne.n	800154a <parseEnc+0xb6>
        motor->RCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	3304      	adds	r3, #4
 800151e:	781b      	ldrb	r3, [r3, #0]
 8001520:	461a      	mov	r2, r3
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	3305      	adds	r3, #5
 8001526:	781b      	ldrb	r3, [r3, #0]
 8001528:	021b      	lsls	r3, r3, #8
 800152a:	4313      	orrs	r3, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f7fe ffbd 	bl	80004ac <__aeabi_i2d>
 8001532:	4b15      	ldr	r3, [pc, #84]	; (8001588 <parseEnc+0xf4>)
 8001534:	681c      	ldr	r4, [r3, #0]
 8001536:	f04f 0200 	mov.w	r2, #0
 800153a:	4b15      	ldr	r3, [pc, #84]	; (8001590 <parseEnc+0xfc>)
 800153c:	f7ff f94a 	bl	80007d4 <__aeabi_ddiv>
 8001540:	4602      	mov	r2, r0
 8001542:	460b      	mov	r3, r1
 8001544:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
}
 8001548:	e01a      	b.n	8001580 <parseEnc+0xec>
    else if(msg[0]==PID_MAIN_DATA2)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	2bc8      	cmp	r3, #200	; 0xc8
 8001550:	d116      	bne.n	8001580 <parseEnc+0xec>
        motor->LCURR=((int16_t)msg[4] | ((int16_t)msg[5]<<8))/10.0;
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	3304      	adds	r3, #4
 8001556:	781b      	ldrb	r3, [r3, #0]
 8001558:	461a      	mov	r2, r3
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	3305      	adds	r3, #5
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	021b      	lsls	r3, r3, #8
 8001562:	4313      	orrs	r3, r2
 8001564:	4618      	mov	r0, r3
 8001566:	f7fe ffa1 	bl	80004ac <__aeabi_i2d>
 800156a:	4b07      	ldr	r3, [pc, #28]	; (8001588 <parseEnc+0xf4>)
 800156c:	681c      	ldr	r4, [r3, #0]
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	4b07      	ldr	r3, [pc, #28]	; (8001590 <parseEnc+0xfc>)
 8001574:	f7ff f92e 	bl	80007d4 <__aeabi_ddiv>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50
}
 8001580:	bf00      	nop
 8001582:	370c      	adds	r7, #12
 8001584:	46bd      	mov	sp, r7
 8001586:	bd90      	pop	{r4, r7, pc}
 8001588:	20000084 	.word	0x20000084
 800158c:	20000074 	.word	0x20000074
 8001590:	40240000 	.word	0x40240000

08001594 <parseEnc114>:

void parseEnc114(uint8_t *msg)
{
 8001594:	b590      	push	{r4, r7, lr}
 8001596:	b085      	sub	sp, #20
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
        int16_t rrpm,lrpm;
        lrpm = (int16_t)msg[4] | ((int16_t)msg[5]<<8);
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	3304      	adds	r3, #4
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	b21a      	sxth	r2, r3
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	3305      	adds	r3, #5
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	021b      	lsls	r3, r3, #8
 80015ac:	b21b      	sxth	r3, r3
 80015ae:	4313      	orrs	r3, r2
 80015b0:	81fb      	strh	r3, [r7, #14]
        rrpm = (int16_t)msg[6] | ((int16_t)msg[7]<<8);
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	3306      	adds	r3, #6
 80015b6:	781b      	ldrb	r3, [r3, #0]
 80015b8:	b21a      	sxth	r2, r3
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3307      	adds	r3, #7
 80015be:	781b      	ldrb	r3, [r3, #0]
 80015c0:	021b      	lsls	r3, r3, #8
 80015c2:	b21b      	sxth	r3, r3
 80015c4:	4313      	orrs	r3, r2
 80015c6:	81bb      	strh	r3, [r7, #12]

        motor->LRPM = (-lrpm) / 10.0;
 80015c8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80015cc:	425b      	negs	r3, r3
 80015ce:	4618      	mov	r0, r3
 80015d0:	f7fe ff6c 	bl	80004ac <__aeabi_i2d>
 80015d4:	f04f 0200 	mov.w	r2, #0
 80015d8:	4b15      	ldr	r3, [pc, #84]	; (8001630 <parseEnc114+0x9c>)
 80015da:	f7ff f8fb 	bl	80007d4 <__aeabi_ddiv>
 80015de:	4602      	mov	r2, r0
 80015e0:	460b      	mov	r3, r1
 80015e2:	4914      	ldr	r1, [pc, #80]	; (8001634 <parseEnc114+0xa0>)
 80015e4:	680c      	ldr	r4, [r1, #0]
 80015e6:	4610      	mov	r0, r2
 80015e8:	4619      	mov	r1, r3
 80015ea:	f7ff f9db 	bl	80009a4 <__aeabi_d2iz>
 80015ee:	4603      	mov	r3, r0
 80015f0:	b21b      	sxth	r3, r3
 80015f2:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
        motor->RRPM = (rrpm) / 10.0;
 80015f6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80015fa:	4618      	mov	r0, r3
 80015fc:	f7fe ff56 	bl	80004ac <__aeabi_i2d>
 8001600:	f04f 0200 	mov.w	r2, #0
 8001604:	4b0a      	ldr	r3, [pc, #40]	; (8001630 <parseEnc114+0x9c>)
 8001606:	f7ff f8e5 	bl	80007d4 <__aeabi_ddiv>
 800160a:	4602      	mov	r2, r0
 800160c:	460b      	mov	r3, r1
 800160e:	4909      	ldr	r1, [pc, #36]	; (8001634 <parseEnc114+0xa0>)
 8001610:	680c      	ldr	r4, [r1, #0]
 8001612:	4610      	mov	r0, r2
 8001614:	4619      	mov	r1, r3
 8001616:	f7ff f9c5 	bl	80009a4 <__aeabi_d2iz>
 800161a:	4603      	mov	r3, r0
 800161c:	b21b      	sxth	r3, r3
 800161e:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40

        toVW();
 8001622:	f7ff fed9 	bl	80013d8 <toVW>
}
 8001626:	bf00      	nop
 8001628:	3714      	adds	r7, #20
 800162a:	46bd      	mov	sp, r7
 800162c:	bd90      	pop	{r4, r7, pc}
 800162e:	bf00      	nop
 8001630:	40240000 	.word	0x40240000
 8001634:	20000084 	.word	0x20000084

08001638 <parseState114>:

void parseState114(uint8_t *msg)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
    sensor_state->motor[0] = (int16_t)msg[4] | ((int16_t)msg[5]<<8);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	3304      	adds	r3, #4
 8001644:	781b      	ldrb	r3, [r3, #0]
 8001646:	b25a      	sxtb	r2, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	3305      	adds	r3, #5
 800164c:	781b      	ldrb	r3, [r3, #0]
 800164e:	021b      	lsls	r3, r3, #8
 8001650:	b25b      	sxtb	r3, r3
 8001652:	4313      	orrs	r3, r2
 8001654:	b25a      	sxtb	r2, r3
 8001656:	4b12      	ldr	r3, [pc, #72]	; (80016a0 <parseState114+0x68>)
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	b2d2      	uxtb	r2, r2
 800165c:	73da      	strb	r2, [r3, #15]
    sensor_state->motor[1] = (int16_t)msg[6] | ((int16_t)msg[7]<<8);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3306      	adds	r3, #6
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	b25a      	sxtb	r2, r3
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	3307      	adds	r3, #7
 800166a:	781b      	ldrb	r3, [r3, #0]
 800166c:	021b      	lsls	r3, r3, #8
 800166e:	b25b      	sxtb	r3, r3
 8001670:	4313      	orrs	r3, r2
 8001672:	b25a      	sxtb	r2, r3
 8001674:	4b0a      	ldr	r3, [pc, #40]	; (80016a0 <parseState114+0x68>)
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	b2d2      	uxtb	r2, r2
 800167a:	741a      	strb	r2, [r3, #16]
    if(!(sensor_state->motor[0] == 0x00 && sensor_state->motor[1] == 0x00))
 800167c:	4b08      	ldr	r3, [pc, #32]	; (80016a0 <parseState114+0x68>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	7bdb      	ldrb	r3, [r3, #15]
 8001682:	2b00      	cmp	r3, #0
 8001684:	d104      	bne.n	8001690 <parseState114+0x58>
 8001686:	4b06      	ldr	r3, [pc, #24]	; (80016a0 <parseState114+0x68>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	7c1b      	ldrb	r3, [r3, #16]
 800168c:	2b00      	cmp	r3, #0
 800168e:	d003      	beq.n	8001698 <parseState114+0x60>
    {
        reset();
 8001690:	f001 fa46 	bl	8002b20 <reset>
        startMotor();
 8001694:	f001 f984 	bl	80029a0 <startMotor>
    }
}
 8001698:	bf00      	nop
 800169a:	3708      	adds	r7, #8
 800169c:	46bd      	mov	sp, r7
 800169e:	bd80      	pop	{r7, pc}
 80016a0:	20000074 	.word	0x20000074

080016a4 <spinonce>:

void spinonce(void)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0

	uint8_t canbuf[8]={10, 20, 30, 40, 50, 60, 70, 80};
 80016aa:	4aa5      	ldr	r2, [pc, #660]	; (8001940 <spinonce+0x29c>)
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016b4:	e883 0003 	stmia.w	r3, {r0, r1}
	uint8_t buf[8];
    int index = 0;
 80016b8:	2300      	movs	r3, #0
 80016ba:	61fb      	str	r3, [r7, #28]
//    int tmpindex = 0;

    uint32_t CanId = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	61bb      	str	r3, [r7, #24]
//    double cmd_v;
//    double cmd_w;


	//CanInit(0x100,0x1104);//filter id, mask
    CanInit(0,0);//filter id, mask
 80016c0:	2100      	movs	r1, #0
 80016c2:	2000      	movs	r0, #0
 80016c4:	f000 f98a 	bl	80019dc <CanInit>


    HAL_Delay(10000);
 80016c8:	f242 7010 	movw	r0, #10000	; 0x2710
 80016cc:	f001 ff40 	bl	8003550 <HAL_Delay>

    startTTS();
 80016d0:	f7ff fba2 	bl	8000e18 <startTTS>
    //state->set(IDLE);
    ready_flag = 1;
 80016d4:	4b9b      	ldr	r3, [pc, #620]	; (8001944 <spinonce+0x2a0>)
 80016d6:	2201      	movs	r2, #1
 80016d8:	701a      	strb	r2, [r3, #0]
    start_docking_flag = 0;
 80016da:	4b9b      	ldr	r3, [pc, #620]	; (8001948 <spinonce+0x2a4>)
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]
    check_msg = 0;
 80016e0:	4b9a      	ldr	r3, [pc, #616]	; (800194c <spinonce+0x2a8>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	601a      	str	r2, [r3, #0]

    settingMotor();
 80016e6:	f001 fc37 	bl	8002f58 <settingMotor>
    startMotor();
 80016ea:	f001 f959 	bl	80029a0 <startMotor>

	while(1)
	{


		if(Tick_100ms>toggle_seq+5) {		//for monitor iteration.
 80016ee:	4b98      	ldr	r3, [pc, #608]	; (8001950 <spinonce+0x2ac>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	1d5a      	adds	r2, r3, #5
 80016f4:	4b97      	ldr	r3, [pc, #604]	; (8001954 <spinonce+0x2b0>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d208      	bcs.n	800170e <spinonce+0x6a>
    		toggle_seq = Tick_100ms;
 80016fc:	4b95      	ldr	r3, [pc, #596]	; (8001954 <spinonce+0x2b0>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a93      	ldr	r2, [pc, #588]	; (8001950 <spinonce+0x2ac>)
 8001702:	6013      	str	r3, [r2, #0]
    		HAL_GPIO_TogglePin(REDtest_GPIO_Port, REDtest_Pin);
 8001704:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001708:	4893      	ldr	r0, [pc, #588]	; (8001958 <spinonce+0x2b4>)
 800170a:	f003 f946 	bl	800499a <HAL_GPIO_TogglePin>
    	}


    	if(gTick>controlmotor_seq+4) {		//about controlmotor do it!!!!!
 800170e:	4b93      	ldr	r3, [pc, #588]	; (800195c <spinonce+0x2b8>)
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	1d1a      	adds	r2, r3, #4
 8001714:	4b92      	ldr	r3, [pc, #584]	; (8001960 <spinonce+0x2bc>)
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	429a      	cmp	r2, r3
 800171a:	d209      	bcs.n	8001730 <spinonce+0x8c>
    		controlmotor_seq = gTick;
 800171c:	4b90      	ldr	r3, [pc, #576]	; (8001960 <spinonce+0x2bc>)
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a8e      	ldr	r2, [pc, #568]	; (800195c <spinonce+0x2b8>)
 8001722:	6013      	str	r3, [r2, #0]
    		//printf("hihi");
    		controlMotor();
 8001724:	f7ff fc6e 	bl	8001004 <controlMotor>
            sendEnc(CANID3);
 8001728:	f240 70d1 	movw	r0, #2001	; 0x7d1
 800172c:	f7ff fd88 	bl	8001240 <sendEnc>
    	}
    	if(gTick>reqmotor_seq+3) {		//about controlmotor do it!!!!!
 8001730:	4b8c      	ldr	r3, [pc, #560]	; (8001964 <spinonce+0x2c0>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	1cda      	adds	r2, r3, #3
 8001736:	4b8a      	ldr	r3, [pc, #552]	; (8001960 <spinonce+0x2bc>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	429a      	cmp	r2, r3
 800173c:	d20e      	bcs.n	800175c <spinonce+0xb8>
    		reqmotor_seq = gTick;
 800173e:	4b88      	ldr	r3, [pc, #544]	; (8001960 <spinonce+0x2bc>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4a88      	ldr	r2, [pc, #544]	; (8001964 <spinonce+0x2c0>)
 8001744:	6013      	str	r3, [r2, #0]

    		if((reqmotor_seq%8) == 0){reqEnc();}
 8001746:	4b87      	ldr	r3, [pc, #540]	; (8001964 <spinonce+0x2c0>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f003 0307 	and.w	r3, r3, #7
 800174e:	2b00      	cmp	r3, #0
 8001750:	d102      	bne.n	8001758 <spinonce+0xb4>
 8001752:	f001 fa35 	bl	8002bc0 <reqEnc>
 8001756:	e001      	b.n	800175c <spinonce+0xb8>
    		else{reqState();}
 8001758:	f001 fa7f 	bl	8002c5a <reqState>
    	}



		if((Tick_100ms>sendsensor_seq)){
 800175c:	4b7d      	ldr	r3, [pc, #500]	; (8001954 <spinonce+0x2b0>)
 800175e:	681a      	ldr	r2, [r3, #0]
 8001760:	4b81      	ldr	r3, [pc, #516]	; (8001968 <spinonce+0x2c4>)
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	429a      	cmp	r2, r3
 8001766:	d962      	bls.n	800182e <spinonce+0x18a>
			sendsensor_seq = Tick_100ms;
 8001768:	4b7a      	ldr	r3, [pc, #488]	; (8001954 <spinonce+0x2b0>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a7e      	ldr	r2, [pc, #504]	; (8001968 <spinonce+0x2c4>)
 800176e:	6013      	str	r3, [r2, #0]

			//printf("hihi: %d\n", USS_tick);

			/////////must need USS of fine Tuning/////////
			USS_start = us_Tick;
 8001770:	4b7e      	ldr	r3, [pc, #504]	; (800196c <spinonce+0x2c8>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4a7e      	ldr	r2, [pc, #504]	; (8001970 <spinonce+0x2cc>)
 8001776:	6013      	str	r3, [r2, #0]
			HAL_GPIO_WritePin(USS_Trigger1_GPIO_Port, USS_Trigger1_Pin, SET);
 8001778:	2201      	movs	r2, #1
 800177a:	2120      	movs	r1, #32
 800177c:	487d      	ldr	r0, [pc, #500]	; (8001974 <spinonce+0x2d0>)
 800177e:	f003 f8f3 	bl	8004968 <HAL_GPIO_WritePin>
			pre_usTick = us_Tick;
 8001782:	4b7a      	ldr	r3, [pc, #488]	; (800196c <spinonce+0x2c8>)
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	4a7c      	ldr	r2, [pc, #496]	; (8001978 <spinonce+0x2d4>)
 8001788:	6013      	str	r3, [r2, #0]
			while(us_Tick == pre_usTick){;}//wait 500us
 800178a:	bf00      	nop
 800178c:	4b77      	ldr	r3, [pc, #476]	; (800196c <spinonce+0x2c8>)
 800178e:	681a      	ldr	r2, [r3, #0]
 8001790:	4b79      	ldr	r3, [pc, #484]	; (8001978 <spinonce+0x2d4>)
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	429a      	cmp	r2, r3
 8001796:	d0f9      	beq.n	800178c <spinonce+0xe8>
			HAL_GPIO_WritePin(USS_Trigger1_GPIO_Port, USS_Trigger1_Pin, RESET);
 8001798:	2200      	movs	r2, #0
 800179a:	2120      	movs	r1, #32
 800179c:	4875      	ldr	r0, [pc, #468]	; (8001974 <spinonce+0x2d0>)
 800179e:	f003 f8e3 	bl	8004968 <HAL_GPIO_WritePin>

			//printf("sonic value start, end, diff: %d  %d  %d\n", USS_start, USS_end, (USS_end-USS_start));
			//////////////////////////////////////////////

			buf[index++] = 0;
 80017a2:	69fb      	ldr	r3, [r7, #28]
 80017a4:	1c5a      	adds	r2, r3, #1
 80017a6:	61fa      	str	r2, [r7, #28]
 80017a8:	3320      	adds	r3, #32
 80017aa:	443b      	add	r3, r7
 80017ac:	2200      	movs	r2, #0
 80017ae:	f803 2c1c 	strb.w	r2, [r3, #-28]
			buf[index++] = 0;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	1c5a      	adds	r2, r3, #1
 80017b6:	61fa      	str	r2, [r7, #28]
 80017b8:	3320      	adds	r3, #32
 80017ba:	443b      	add	r3, r7
 80017bc:	2200      	movs	r2, #0
 80017be:	f803 2c1c 	strb.w	r2, [r3, #-28]
			buf[index++] = 0;
 80017c2:	69fb      	ldr	r3, [r7, #28]
 80017c4:	1c5a      	adds	r2, r3, #1
 80017c6:	61fa      	str	r2, [r7, #28]
 80017c8:	3320      	adds	r3, #32
 80017ca:	443b      	add	r3, r7
 80017cc:	2200      	movs	r2, #0
 80017ce:	f803 2c1c 	strb.w	r2, [r3, #-28]
			buf[index++] = 0;
 80017d2:	69fb      	ldr	r3, [r7, #28]
 80017d4:	1c5a      	adds	r2, r3, #1
 80017d6:	61fa      	str	r2, [r7, #28]
 80017d8:	3320      	adds	r3, #32
 80017da:	443b      	add	r3, r7
 80017dc:	2200      	movs	r2, #0
 80017de:	f803 2c1c 	strb.w	r2, [r3, #-28]
			buf[index++] = 0;
 80017e2:	69fb      	ldr	r3, [r7, #28]
 80017e4:	1c5a      	adds	r2, r3, #1
 80017e6:	61fa      	str	r2, [r7, #28]
 80017e8:	3320      	adds	r3, #32
 80017ea:	443b      	add	r3, r7
 80017ec:	2200      	movs	r2, #0
 80017ee:	f803 2c1c 	strb.w	r2, [r3, #-28]
			buf[index++] = 0;
 80017f2:	69fb      	ldr	r3, [r7, #28]
 80017f4:	1c5a      	adds	r2, r3, #1
 80017f6:	61fa      	str	r2, [r7, #28]
 80017f8:	3320      	adds	r3, #32
 80017fa:	443b      	add	r3, r7
 80017fc:	2200      	movs	r2, #0
 80017fe:	f803 2c1c 	strb.w	r2, [r3, #-28]
			buf[index++] = 0;
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	1c5a      	adds	r2, r3, #1
 8001806:	61fa      	str	r2, [r7, #28]
 8001808:	3320      	adds	r3, #32
 800180a:	443b      	add	r3, r7
 800180c:	2200      	movs	r2, #0
 800180e:	f803 2c1c 	strb.w	r2, [r3, #-28]
			buf[index] = 0;
 8001812:	1d3a      	adds	r2, r7, #4
 8001814:	69fb      	ldr	r3, [r7, #28]
 8001816:	4413      	add	r3, r2
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]

			sendCan(2002, buf, 8, 1);//test
 800181c:	1d39      	adds	r1, r7, #4
 800181e:	2301      	movs	r3, #1
 8001820:	2208      	movs	r2, #8
 8001822:	f240 70d2 	movw	r0, #2002	; 0x7d2
 8001826:	f000 f925 	bl	8001a74 <sendCan>
			index = 0;
 800182a:	2300      	movs	r3, #0
 800182c:	61fb      	str	r3, [r7, #28]


		}
		if(FLAG_RxCplt){
 800182e:	4b53      	ldr	r3, [pc, #332]	; (800197c <spinonce+0x2d8>)
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	2b00      	cmp	r3, #0
 8001834:	f43f af5b 	beq.w	80016ee <spinonce+0x4a>
    		for(int i=0;i<8;i++){canbuf[i] = g_uCAN_Rx_Data[i];}
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
 800183c:	e00c      	b.n	8001858 <spinonce+0x1b4>
 800183e:	4a50      	ldr	r2, [pc, #320]	; (8001980 <spinonce+0x2dc>)
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	4413      	add	r3, r2
 8001844:	7819      	ldrb	r1, [r3, #0]
 8001846:	f107 020c 	add.w	r2, r7, #12
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	4413      	add	r3, r2
 800184e:	460a      	mov	r2, r1
 8001850:	701a      	strb	r2, [r3, #0]
 8001852:	697b      	ldr	r3, [r7, #20]
 8001854:	3301      	adds	r3, #1
 8001856:	617b      	str	r3, [r7, #20]
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	2b07      	cmp	r3, #7
 800185c:	ddef      	ble.n	800183e <spinonce+0x19a>
    		FLAG_RxCplt=0;
 800185e:	4b47      	ldr	r3, [pc, #284]	; (800197c <spinonce+0x2d8>)
 8001860:	2200      	movs	r2, #0
 8001862:	601a      	str	r2, [r3, #0]
			if(g_tCan_Rx_Header.StdId>g_tCan_Rx_Header.ExtId){CanId = g_tCan_Rx_Header.StdId;}
 8001864:	4b47      	ldr	r3, [pc, #284]	; (8001984 <spinonce+0x2e0>)
 8001866:	681a      	ldr	r2, [r3, #0]
 8001868:	4b46      	ldr	r3, [pc, #280]	; (8001984 <spinonce+0x2e0>)
 800186a:	685b      	ldr	r3, [r3, #4]
 800186c:	429a      	cmp	r2, r3
 800186e:	d903      	bls.n	8001878 <spinonce+0x1d4>
 8001870:	4b44      	ldr	r3, [pc, #272]	; (8001984 <spinonce+0x2e0>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	61bb      	str	r3, [r7, #24]
 8001876:	e002      	b.n	800187e <spinonce+0x1da>
			else {CanId = g_tCan_Rx_Header.ExtId;}
 8001878:	4b42      	ldr	r3, [pc, #264]	; (8001984 <spinonce+0x2e0>)
 800187a:	685b      	ldr	r3, [r3, #4]
 800187c:	61bb      	str	r3, [r7, #24]

			if(ready_flag)
 800187e:	4b31      	ldr	r3, [pc, #196]	; (8001944 <spinonce+0x2a0>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b00      	cmp	r3, #0
 8001884:	f000 809c 	beq.w	80019c0 <spinonce+0x31c>
			{
				switch(CanId)
 8001888:	69bb      	ldr	r3, [r7, #24]
 800188a:	4a3f      	ldr	r2, [pc, #252]	; (8001988 <spinonce+0x2e4>)
 800188c:	4293      	cmp	r3, r2
 800188e:	d051      	beq.n	8001934 <spinonce+0x290>
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	4a3d      	ldr	r2, [pc, #244]	; (8001988 <spinonce+0x2e4>)
 8001894:	4293      	cmp	r3, r2
 8001896:	f200 8096 	bhi.w	80019c6 <spinonce+0x322>
 800189a:	69bb      	ldr	r3, [r7, #24]
 800189c:	f640 72a1 	movw	r2, #4001	; 0xfa1
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d041      	beq.n	8001928 <spinonce+0x284>
 80018a4:	69bb      	ldr	r3, [r7, #24]
 80018a6:	f640 72a1 	movw	r2, #4001	; 0xfa1
 80018aa:	4293      	cmp	r3, r2
 80018ac:	f200 808b 	bhi.w	80019c6 <spinonce+0x322>
 80018b0:	69bb      	ldr	r3, [r7, #24]
 80018b2:	f640 32b9 	movw	r2, #3001	; 0xbb9
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d030      	beq.n	800191c <spinonce+0x278>
 80018ba:	69bb      	ldr	r3, [r7, #24]
 80018bc:	f640 32b9 	movw	r2, #3001	; 0xbb9
 80018c0:	4293      	cmp	r3, r2
 80018c2:	f200 8080 	bhi.w	80019c6 <spinonce+0x322>
 80018c6:	69bb      	ldr	r3, [r7, #24]
 80018c8:	f240 7201 	movw	r2, #1793	; 0x701
 80018cc:	4293      	cmp	r3, r2
 80018ce:	d074      	beq.n	80019ba <spinonce+0x316>
 80018d0:	69bb      	ldr	r3, [r7, #24]
 80018d2:	f240 7201 	movw	r2, #1793	; 0x701
 80018d6:	4293      	cmp	r3, r2
 80018d8:	d875      	bhi.n	80019c6 <spinonce+0x322>
 80018da:	69bb      	ldr	r3, [r7, #24]
 80018dc:	f240 5281 	movw	r2, #1409	; 0x581
 80018e0:	4293      	cmp	r3, r2
 80018e2:	d053      	beq.n	800198c <spinonce+0x2e8>
 80018e4:	69bb      	ldr	r3, [r7, #24]
 80018e6:	f240 5281 	movw	r2, #1409	; 0x581
 80018ea:	4293      	cmp	r3, r2
 80018ec:	d86b      	bhi.n	80019c6 <spinonce+0x322>
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	f240 32e9 	movw	r2, #1001	; 0x3e9
 80018f4:	4293      	cmp	r3, r2
 80018f6:	d005      	beq.n	8001904 <spinonce+0x260>
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	f240 32ea 	movw	r2, #1002	; 0x3ea
 80018fe:	4293      	cmp	r3, r2
 8001900:	d006      	beq.n	8001910 <spinonce+0x26c>
 8001902:	e060      	b.n	80019c6 <spinonce+0x322>
				{
				case CANID1:
					 parseCmdvel(canbuf);
 8001904:	f107 030c 	add.w	r3, r7, #12
 8001908:	4618      	mov	r0, r3
 800190a:	f7ff fc4b 	bl	80011a4 <parseCmdvel>
					break;
 800190e:	e05a      	b.n	80019c6 <spinonce+0x322>

				case CANID2:
					parseState(canbuf);
 8001910:	f107 030c 	add.w	r3, r7, #12
 8001914:	4618      	mov	r0, r3
 8001916:	f7ff fb2d 	bl	8000f74 <parseState>
					break;
 800191a:	e054      	b.n	80019c6 <spinonce+0x322>
				case CANID5:
					parseTop(canbuf);
 800191c:	f107 030c 	add.w	r3, r7, #12
 8001920:	4618      	mov	r0, r3
 8001922:	f7ff fafb 	bl	8000f1c <parseTop>
					break;
 8001926:	e04e      	b.n	80019c6 <spinonce+0x322>
				case CANID6:
					parsePmm(canbuf);
 8001928:	f107 030c 	add.w	r3, r7, #12
 800192c:	4618      	mov	r0, r3
 800192e:	f7ff fac3 	bl	8000eb8 <parsePmm>
					break;
 8001932:	e048      	b.n	80019c6 <spinonce+0x322>
				case CANID7:
					parseEnc(canbuf);
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	4618      	mov	r0, r3
 800193a:	f7ff fdab 	bl	8001494 <parseEnc>
					break;
 800193e:	e042      	b.n	80019c6 <spinonce+0x322>
 8001940:	08007d68 	.word	0x08007d68
 8001944:	2000007c 	.word	0x2000007c
 8001948:	2000007d 	.word	0x2000007d
 800194c:	20000080 	.word	0x20000080
 8001950:	2000003c 	.word	0x2000003c
 8001954:	20000038 	.word	0x20000038
 8001958:	40020400 	.word	0x40020400
 800195c:	20000044 	.word	0x20000044
 8001960:	20000030 	.word	0x20000030
 8001964:	20000048 	.word	0x20000048
 8001968:	20000040 	.word	0x20000040
 800196c:	2000002c 	.word	0x2000002c
 8001970:	20000054 	.word	0x20000054
 8001974:	40020c00 	.word	0x40020c00
 8001978:	20000034 	.word	0x20000034
 800197c:	2000008c 	.word	0x2000008c
 8001980:	20000090 	.word	0x20000090
 8001984:	20000098 	.word	0x20000098
 8001988:	00b8b701 	.word	0x00b8b701
				case MOTOR114_RES_ID:

					if(canbuf[1] == 0x6c && canbuf[2] == 0x60)
 800198c:	7b7b      	ldrb	r3, [r7, #13]
 800198e:	2b6c      	cmp	r3, #108	; 0x6c
 8001990:	d107      	bne.n	80019a2 <spinonce+0x2fe>
 8001992:	7bbb      	ldrb	r3, [r7, #14]
 8001994:	2b60      	cmp	r3, #96	; 0x60
 8001996:	d104      	bne.n	80019a2 <spinonce+0x2fe>
						parseEnc114(canbuf);
 8001998:	f107 030c 	add.w	r3, r7, #12
 800199c:	4618      	mov	r0, r3
 800199e:	f7ff fdf9 	bl	8001594 <parseEnc114>
					if(canbuf[1] == 0x3f && canbuf[2] == 0x60)
 80019a2:	7b7b      	ldrb	r3, [r7, #13]
 80019a4:	2b3f      	cmp	r3, #63	; 0x3f
 80019a6:	d10d      	bne.n	80019c4 <spinonce+0x320>
 80019a8:	7bbb      	ldrb	r3, [r7, #14]
 80019aa:	2b60      	cmp	r3, #96	; 0x60
 80019ac:	d10a      	bne.n	80019c4 <spinonce+0x320>
						parseState114(canbuf);
 80019ae:	f107 030c 	add.w	r3, r7, #12
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7ff fe40 	bl	8001638 <parseState114>
					break;
 80019b8:	e004      	b.n	80019c4 <spinonce+0x320>
				case MOTOR114_START_ID:
					startMotor();
 80019ba:	f000 fff1 	bl	80029a0 <startMotor>
					break;
 80019be:	e002      	b.n	80019c6 <spinonce+0x322>
				}
			}
 80019c0:	bf00      	nop
 80019c2:	e000      	b.n	80019c6 <spinonce+0x322>
					break;
 80019c4:	bf00      	nop
//					  state->set(IDLE);
//					  ready_flag = 1;
//					  start_docking_flag = 0;
//				  }
//			  }
	g_tCan_Rx_Header.StdId=0;
 80019c6:	4b04      	ldr	r3, [pc, #16]	; (80019d8 <spinonce+0x334>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	601a      	str	r2, [r3, #0]
			g_tCan_Rx_Header.ExtId=0;
 80019cc:	4b02      	ldr	r3, [pc, #8]	; (80019d8 <spinonce+0x334>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	605a      	str	r2, [r3, #4]
			CanId = 0;
 80019d2:	2300      	movs	r3, #0
 80019d4:	61bb      	str	r3, [r7, #24]
		if(Tick_100ms>toggle_seq+5) {		//for monitor iteration.
 80019d6:	e68a      	b.n	80016ee <spinonce+0x4a>
 80019d8:	20000098 	.word	0x20000098

080019dc <CanInit>:
CAN_RxHeaderTypeDef 	g_tCan_Rx_Header;

CAN_FilterTypeDef       sFilterConfig;

void CanInit(uint32_t id, uint32_t mask)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	b082      	sub	sp, #8
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
    sFilterConfig.FilterActivation = ENABLE;
    sFilterConfig.SlaveStartFilterBank = 0;

	#else//example idmask mode
    sFilterConfig.FilterBank = 0;
 80019e6:	4b21      	ldr	r3, [pc, #132]	; (8001a6c <CanInit+0x90>)
 80019e8:	2200      	movs	r2, #0
 80019ea:	615a      	str	r2, [r3, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80019ec:	4b1f      	ldr	r3, [pc, #124]	; (8001a6c <CanInit+0x90>)
 80019ee:	2200      	movs	r2, #0
 80019f0:	619a      	str	r2, [r3, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80019f2:	4b1e      	ldr	r3, [pc, #120]	; (8001a6c <CanInit+0x90>)
 80019f4:	2201      	movs	r2, #1
 80019f6:	61da      	str	r2, [r3, #28]
    sFilterConfig.FilterIdHigh = (id & 0xFFFF0000) >> 16;
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	0c1b      	lsrs	r3, r3, #16
 80019fc:	4a1b      	ldr	r2, [pc, #108]	; (8001a6c <CanInit+0x90>)
 80019fe:	6013      	str	r3, [r2, #0]
    sFilterConfig.FilterIdLow = id  & 0x0000FFF8;
 8001a00:	687a      	ldr	r2, [r7, #4]
 8001a02:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001a06:	4013      	ands	r3, r2
 8001a08:	4a18      	ldr	r2, [pc, #96]	; (8001a6c <CanInit+0x90>)
 8001a0a:	6053      	str	r3, [r2, #4]
    sFilterConfig.FilterMaskIdHigh = (mask & 0xFFFF0000) >> 16;
 8001a0c:	683b      	ldr	r3, [r7, #0]
 8001a0e:	0c1b      	lsrs	r3, r3, #16
 8001a10:	4a16      	ldr	r2, [pc, #88]	; (8001a6c <CanInit+0x90>)
 8001a12:	6093      	str	r3, [r2, #8]
    sFilterConfig.FilterMaskIdLow = mask  & 0x0000FFF8;
 8001a14:	683a      	ldr	r2, [r7, #0]
 8001a16:	f64f 73f8 	movw	r3, #65528	; 0xfff8
 8001a1a:	4013      	ands	r3, r2
 8001a1c:	4a13      	ldr	r2, [pc, #76]	; (8001a6c <CanInit+0x90>)
 8001a1e:	60d3      	str	r3, [r2, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8001a20:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <CanInit+0x90>)
 8001a22:	2200      	movs	r2, #0
 8001a24:	611a      	str	r2, [r3, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8001a26:	4b11      	ldr	r3, [pc, #68]	; (8001a6c <CanInit+0x90>)
 8001a28:	2201      	movs	r2, #1
 8001a2a:	621a      	str	r2, [r3, #32]
    sFilterConfig.SlaveStartFilterBank = 0;
 8001a2c:	4b0f      	ldr	r3, [pc, #60]	; (8001a6c <CanInit+0x90>)
 8001a2e:	2200      	movs	r2, #0
 8001a30:	625a      	str	r2, [r3, #36]	; 0x24
	#endif

    if (HAL_CAN_Start(&hcan1) != HAL_OK){Error_Handler();}/* Start Error */
 8001a32:	480f      	ldr	r0, [pc, #60]	; (8001a70 <CanInit+0x94>)
 8001a34:	f001 ff8c 	bl	8003950 <HAL_CAN_Start>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <CanInit+0x66>
 8001a3e:	f000 fbf5 	bl	800222c <Error_Handler>
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK){while(1){;}}
 8001a42:	2102      	movs	r1, #2
 8001a44:	480a      	ldr	r0, [pc, #40]	; (8001a70 <CanInit+0x94>)
 8001a46:	f002 f9e9 	bl	8003e1c <HAL_CAN_ActivateNotification>
 8001a4a:	4603      	mov	r3, r0
 8001a4c:	2b00      	cmp	r3, #0
 8001a4e:	d000      	beq.n	8001a52 <CanInit+0x76>
 8001a50:	e7fe      	b.n	8001a50 <CanInit+0x74>

    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8001a52:	4906      	ldr	r1, [pc, #24]	; (8001a6c <CanInit+0x90>)
 8001a54:	4806      	ldr	r0, [pc, #24]	; (8001a70 <CanInit+0x94>)
 8001a56:	f001 fe9b 	bl	8003790 <HAL_CAN_ConfigFilter>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d001      	beq.n	8001a64 <CanInit+0x88>
    {
		/* Filter configuration Error */
		Error_Handler();
 8001a60:	f000 fbe4 	bl	800222c <Error_Handler>
    }
}
 8001a64:	bf00      	nop
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	200000b4 	.word	0x200000b4
 8001a70:	200000dc 	.word	0x200000dc

08001a74 <sendCan>:

void sendCan(uint32_t ID, uint8_t *buf, uint8_t len, uint8_t ext)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08c      	sub	sp, #48	; 0x30
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	4611      	mov	r1, r2
 8001a80:	461a      	mov	r2, r3
 8001a82:	460b      	mov	r3, r1
 8001a84:	71fb      	strb	r3, [r7, #7]
 8001a86:	4613      	mov	r3, r2
 8001a88:	71bb      	strb	r3, [r7, #6]
	CAN_TxHeaderTypeDef tCan_Tx_Header;

    uint32_t dwTxMailBox;
    uint32_t dwCheck;

    tCan_Tx_Header.StdId = ID;//for send id 3001
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	617b      	str	r3, [r7, #20]
	tCan_Tx_Header.ExtId = ID;//for send id 3001
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	61bb      	str	r3, [r7, #24]
	tCan_Tx_Header.RTR = CAN_RTR_DATA;
 8001a92:	2300      	movs	r3, #0
 8001a94:	623b      	str	r3, [r7, #32]
	tCan_Tx_Header.IDE = ext ? CAN_ID_EXT : CAN_ID_STD;
 8001a96:	79bb      	ldrb	r3, [r7, #6]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d001      	beq.n	8001aa0 <sendCan+0x2c>
 8001a9c:	2304      	movs	r3, #4
 8001a9e:	e000      	b.n	8001aa2 <sendCan+0x2e>
 8001aa0:	2300      	movs	r3, #0
 8001aa2:	61fb      	str	r3, [r7, #28]
	tCan_Tx_Header.DLC = len;
 8001aa4:	79fb      	ldrb	r3, [r7, #7]
 8001aa6:	627b      	str	r3, [r7, #36]	; 0x24
	tCan_Tx_Header.TransmitGlobalTime = ENABLE;
 8001aa8:	2301      	movs	r3, #1
 8001aaa:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28

    dwTxMailBox = HAL_CAN_GetTxMailboxesFreeLevel(&hcan1);	//resolve the error situation
 8001aae:	480d      	ldr	r0, [pc, #52]	; (8001ae4 <sendCan+0x70>)
 8001ab0:	f002 f86d 	bl	8003b8e <HAL_CAN_GetTxMailboxesFreeLevel>
 8001ab4:	4603      	mov	r3, r0
 8001ab6:	613b      	str	r3, [r7, #16]

    if(dwTxMailBox == 0){}
 8001ab8:	693b      	ldr	r3, [r7, #16]
 8001aba:	2b00      	cmp	r3, #0
 8001abc:	d00d      	beq.n	8001ada <sendCan+0x66>
    else
    {
        dwCheck = HAL_CAN_AddTxMessage(&hcan1, &tCan_Tx_Header, buf, &dwTxMailBox);
 8001abe:	f107 0310 	add.w	r3, r7, #16
 8001ac2:	f107 0114 	add.w	r1, r7, #20
 8001ac6:	68ba      	ldr	r2, [r7, #8]
 8001ac8:	4806      	ldr	r0, [pc, #24]	; (8001ae4 <sendCan+0x70>)
 8001aca:	f001 ff85 	bl	80039d8 <HAL_CAN_AddTxMessage>
 8001ace:	4603      	mov	r3, r0
 8001ad0:	62fb      	str	r3, [r7, #44]	; 0x2c
        if(dwCheck != HAL_OK){while(1){;}}
 8001ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ad4:	2b00      	cmp	r3, #0
 8001ad6:	d000      	beq.n	8001ada <sendCan+0x66>
 8001ad8:	e7fe      	b.n	8001ad8 <sendCan+0x64>
    }
}
 8001ada:	bf00      	nop
 8001adc:	3730      	adds	r7, #48	; 0x30
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}
 8001ae2:	bf00      	nop
 8001ae4:	200000dc 	.word	0x200000dc

08001ae8 <HAL_CAN_RxFifo0MsgPendingCallback>:


void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *CanHandle)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Get RX message */

	if (HAL_CAN_GetRxMessage(&hcan1, CAN_RX_FIFO0, &g_tCan_Rx_Header, g_uCAN_Rx_Data) != HAL_OK){while(1){;}}
 8001af0:	4b09      	ldr	r3, [pc, #36]	; (8001b18 <HAL_CAN_RxFifo0MsgPendingCallback+0x30>)
 8001af2:	4a0a      	ldr	r2, [pc, #40]	; (8001b1c <HAL_CAN_RxFifo0MsgPendingCallback+0x34>)
 8001af4:	2100      	movs	r1, #0
 8001af6:	480a      	ldr	r0, [pc, #40]	; (8001b20 <HAL_CAN_RxFifo0MsgPendingCallback+0x38>)
 8001af8:	f002 f87e 	bl	8003bf8 <HAL_CAN_GetRxMessage>
 8001afc:	4603      	mov	r3, r0
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d000      	beq.n	8001b04 <HAL_CAN_RxFifo0MsgPendingCallback+0x1c>
 8001b02:	e7fe      	b.n	8001b02 <HAL_CAN_RxFifo0MsgPendingCallback+0x1a>
	FLAG_RxCplt++;
 8001b04:	4b07      	ldr	r3, [pc, #28]	; (8001b24 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	3301      	adds	r3, #1
 8001b0a:	4a06      	ldr	r2, [pc, #24]	; (8001b24 <HAL_CAN_RxFifo0MsgPendingCallback+0x3c>)
 8001b0c:	6013      	str	r3, [r2, #0]

}
 8001b0e:	bf00      	nop
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
 8001b16:	bf00      	nop
 8001b18:	20000090 	.word	0x20000090
 8001b1c:	20000098 	.word	0x20000098
 8001b20:	200000dc 	.word	0x200000dc
 8001b24:	2000008c 	.word	0x2000008c

08001b28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001b2c:	f001 fcb3 	bl	8003496 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001b30:	f000 f822 	bl	8001b78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001b34:	f000 fa54 	bl	8001fe0 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8001b38:	f000 fa22 	bl	8001f80 <MX_USART1_UART_Init>
  MX_CAN1_Init();
 8001b3c:	f000 f888 	bl	8001c50 <MX_CAN1_Init>
  MX_TIM2_Init();
 8001b40:	f000 f8bc 	bl	8001cbc <MX_TIM2_Init>
  MX_UART8_Init();
 8001b44:	f000 f9ec 	bl	8001f20 <MX_UART8_Init>
  MX_TIM6_Init();
 8001b48:	f000 f97e 	bl	8001e48 <MX_TIM6_Init>
  MX_TIM7_Init();
 8001b4c:	f000 f9b2 	bl	8001eb4 <MX_TIM7_Init>
  MX_TIM5_Init();
 8001b50:	f000 f92c 	bl	8001dac <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start_IT (&htim3);//system timer
  HAL_TIM_Base_Start_IT (&htim5);//uss timer, 2khz
 8001b54:	4805      	ldr	r0, [pc, #20]	; (8001b6c <main+0x44>)
 8001b56:	f004 f8b5 	bl	8005cc4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim6);//system timer, 100hz
 8001b5a:	4805      	ldr	r0, [pc, #20]	; (8001b70 <main+0x48>)
 8001b5c:	f004 f8b2 	bl	8005cc4 <HAL_TIM_Base_Start_IT>
  HAL_TIM_Base_Start_IT (&htim7);//uss timer, 1khz
 8001b60:	4804      	ldr	r0, [pc, #16]	; (8001b74 <main+0x4c>)
 8001b62:	f004 f8af 	bl	8005cc4 <HAL_TIM_Base_Start_IT>
//	  printf("%d %d %d %d\n", adcval[0], adcval[1], adcval[2], adcval[3]);
	  //HAL_GPIO_TogglePin(REDtest_GPIO_Port, REDtest_Pin);
//	  if(testflag == 1){HAL_GPIO_TogglePin(BLUEtest_GPIO_Port, BLUEtest_Pin);testflag=0;}
//	  printf("SystemCoreClock is %d Hz\r\n", SystemCoreClock);
	  //HAL_Delay(200);
	  spinonce();
 8001b66:	f7ff fd9d 	bl	80016a4 <spinonce>
 8001b6a:	e7fc      	b.n	8001b66 <main+0x3e>
 8001b6c:	20000150 	.word	0x20000150
 8001b70:	2000019c 	.word	0x2000019c
 8001b74:	200001e8 	.word	0x200001e8

08001b78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b094      	sub	sp, #80	; 0x50
 8001b7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b7e:	f107 0320 	add.w	r3, r7, #32
 8001b82:	2230      	movs	r2, #48	; 0x30
 8001b84:	2100      	movs	r1, #0
 8001b86:	4618      	mov	r0, r3
 8001b88:	f006 f8da 	bl	8007d40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b8c:	f107 030c 	add.w	r3, r7, #12
 8001b90:	2200      	movs	r2, #0
 8001b92:	601a      	str	r2, [r3, #0]
 8001b94:	605a      	str	r2, [r3, #4]
 8001b96:	609a      	str	r2, [r3, #8]
 8001b98:	60da      	str	r2, [r3, #12]
 8001b9a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001b9c:	4b2a      	ldr	r3, [pc, #168]	; (8001c48 <SystemClock_Config+0xd0>)
 8001b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba0:	4a29      	ldr	r2, [pc, #164]	; (8001c48 <SystemClock_Config+0xd0>)
 8001ba2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ba6:	6413      	str	r3, [r2, #64]	; 0x40
 8001ba8:	4b27      	ldr	r3, [pc, #156]	; (8001c48 <SystemClock_Config+0xd0>)
 8001baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bb0:	60bb      	str	r3, [r7, #8]
 8001bb2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001bb4:	4b25      	ldr	r3, [pc, #148]	; (8001c4c <SystemClock_Config+0xd4>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a24      	ldr	r2, [pc, #144]	; (8001c4c <SystemClock_Config+0xd4>)
 8001bba:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001bbe:	6013      	str	r3, [r2, #0]
 8001bc0:	4b22      	ldr	r3, [pc, #136]	; (8001c4c <SystemClock_Config+0xd4>)
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001bc8:	607b      	str	r3, [r7, #4]
 8001bca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001bcc:	2301      	movs	r3, #1
 8001bce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001bd0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001bd4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001bd6:	2302      	movs	r3, #2
 8001bd8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001bda:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bde:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001be0:	2304      	movs	r3, #4
 8001be2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 8001be4:	23d8      	movs	r3, #216	; 0xd8
 8001be6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001be8:	2302      	movs	r3, #2
 8001bea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8001bec:	2302      	movs	r3, #2
 8001bee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001bf0:	f107 0320 	add.w	r3, r7, #32
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f002 ff53 	bl	8004aa0 <HAL_RCC_OscConfig>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d001      	beq.n	8001c04 <SystemClock_Config+0x8c>
  {
    Error_Handler();
 8001c00:	f000 fb14 	bl	800222c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001c04:	f002 fefc 	bl	8004a00 <HAL_PWREx_EnableOverDrive>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d001      	beq.n	8001c12 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001c0e:	f000 fb0d 	bl	800222c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001c12:	230f      	movs	r3, #15
 8001c14:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001c16:	2302      	movs	r3, #2
 8001c18:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001c1e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001c22:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001c24:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001c28:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8001c2a:	f107 030c 	add.w	r3, r7, #12
 8001c2e:	2107      	movs	r1, #7
 8001c30:	4618      	mov	r0, r3
 8001c32:	f003 f9d9 	bl	8004fe8 <HAL_RCC_ClockConfig>
 8001c36:	4603      	mov	r3, r0
 8001c38:	2b00      	cmp	r3, #0
 8001c3a:	d001      	beq.n	8001c40 <SystemClock_Config+0xc8>
  {
    Error_Handler();
 8001c3c:	f000 faf6 	bl	800222c <Error_Handler>
  }
}
 8001c40:	bf00      	nop
 8001c42:	3750      	adds	r7, #80	; 0x50
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40007000 	.word	0x40007000

08001c50 <MX_CAN1_Init>:
  * @brief CAN1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_CAN1_Init(void)
{
 8001c50:	b580      	push	{r7, lr}
 8001c52:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 8001c54:	4b17      	ldr	r3, [pc, #92]	; (8001cb4 <MX_CAN1_Init+0x64>)
 8001c56:	4a18      	ldr	r2, [pc, #96]	; (8001cb8 <MX_CAN1_Init+0x68>)
 8001c58:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 27;
 8001c5a:	4b16      	ldr	r3, [pc, #88]	; (8001cb4 <MX_CAN1_Init+0x64>)
 8001c5c:	221b      	movs	r2, #27
 8001c5e:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 8001c60:	4b14      	ldr	r3, [pc, #80]	; (8001cb4 <MX_CAN1_Init+0x64>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8001c66:	4b13      	ldr	r3, [pc, #76]	; (8001cb4 <MX_CAN1_Init+0x64>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 8001c6c:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <MX_CAN1_Init+0x64>)
 8001c6e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001c72:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_1TQ;
 8001c74:	4b0f      	ldr	r3, [pc, #60]	; (8001cb4 <MX_CAN1_Init+0x64>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <MX_CAN1_Init+0x64>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = ENABLE;
 8001c80:	4b0c      	ldr	r3, [pc, #48]	; (8001cb4 <MX_CAN1_Init+0x64>)
 8001c82:	2201      	movs	r2, #1
 8001c84:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <MX_CAN1_Init+0x64>)
 8001c88:	2200      	movs	r2, #0
 8001c8a:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 8001c8c:	4b09      	ldr	r3, [pc, #36]	; (8001cb4 <MX_CAN1_Init+0x64>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8001c92:	4b08      	ldr	r3, [pc, #32]	; (8001cb4 <MX_CAN1_Init+0x64>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8001c98:	4b06      	ldr	r3, [pc, #24]	; (8001cb4 <MX_CAN1_Init+0x64>)
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 8001c9e:	4805      	ldr	r0, [pc, #20]	; (8001cb4 <MX_CAN1_Init+0x64>)
 8001ca0:	f001 fc7a 	bl	8003598 <HAL_CAN_Init>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d001      	beq.n	8001cae <MX_CAN1_Init+0x5e>
  {
    Error_Handler();
 8001caa:	f000 fabf 	bl	800222c <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 8001cae:	bf00      	nop
 8001cb0:	bd80      	pop	{r7, pc}
 8001cb2:	bf00      	nop
 8001cb4:	200000dc 	.word	0x200000dc
 8001cb8:	40006400 	.word	0x40006400

08001cbc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b08e      	sub	sp, #56	; 0x38
 8001cc0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001cc2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	601a      	str	r2, [r3, #0]
 8001cca:	605a      	str	r2, [r3, #4]
 8001ccc:	609a      	str	r2, [r3, #8]
 8001cce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001cd0:	f107 031c 	add.w	r3, r7, #28
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	605a      	str	r2, [r3, #4]
 8001cda:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001cdc:	463b      	mov	r3, r7
 8001cde:	2200      	movs	r2, #0
 8001ce0:	601a      	str	r2, [r3, #0]
 8001ce2:	605a      	str	r2, [r3, #4]
 8001ce4:	609a      	str	r2, [r3, #8]
 8001ce6:	60da      	str	r2, [r3, #12]
 8001ce8:	611a      	str	r2, [r3, #16]
 8001cea:	615a      	str	r2, [r3, #20]
 8001cec:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001cee:	4b2e      	ldr	r3, [pc, #184]	; (8001da8 <MX_TIM2_Init+0xec>)
 8001cf0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001cf4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2-1;
 8001cf6:	4b2c      	ldr	r3, [pc, #176]	; (8001da8 <MX_TIM2_Init+0xec>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cfc:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <MX_TIM2_Init+0xec>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 843-1;
 8001d02:	4b29      	ldr	r3, [pc, #164]	; (8001da8 <MX_TIM2_Init+0xec>)
 8001d04:	f240 324a 	movw	r2, #842	; 0x34a
 8001d08:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0a:	4b27      	ldr	r3, [pc, #156]	; (8001da8 <MX_TIM2_Init+0xec>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d10:	4b25      	ldr	r3, [pc, #148]	; (8001da8 <MX_TIM2_Init+0xec>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001d16:	4824      	ldr	r0, [pc, #144]	; (8001da8 <MX_TIM2_Init+0xec>)
 8001d18:	f003 ff7c 	bl	8005c14 <HAL_TIM_Base_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8001d22:	f000 fa83 	bl	800222c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001d26:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d2a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001d2c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001d30:	4619      	mov	r1, r3
 8001d32:	481d      	ldr	r0, [pc, #116]	; (8001da8 <MX_TIM2_Init+0xec>)
 8001d34:	f004 fad2 	bl	80062dc <HAL_TIM_ConfigClockSource>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d001      	beq.n	8001d42 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8001d3e:	f000 fa75 	bl	800222c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001d42:	4819      	ldr	r0, [pc, #100]	; (8001da8 <MX_TIM2_Init+0xec>)
 8001d44:	f004 f836 	bl	8005db4 <HAL_TIM_PWM_Init>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d001      	beq.n	8001d52 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8001d4e:	f000 fa6d 	bl	800222c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001d52:	2300      	movs	r3, #0
 8001d54:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001d56:	2300      	movs	r3, #0
 8001d58:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001d5a:	f107 031c 	add.w	r3, r7, #28
 8001d5e:	4619      	mov	r1, r3
 8001d60:	4811      	ldr	r0, [pc, #68]	; (8001da8 <MX_TIM2_Init+0xec>)
 8001d62:	f004 ff45 	bl	8006bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001d66:	4603      	mov	r3, r0
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d001      	beq.n	8001d70 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8001d6c:	f000 fa5e 	bl	800222c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001d70:	2360      	movs	r3, #96	; 0x60
 8001d72:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 5000-1;
 8001d74:	f241 3387 	movw	r3, #4999	; 0x1387
 8001d78:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001d7e:	2300      	movs	r3, #0
 8001d80:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001d82:	463b      	mov	r3, r7
 8001d84:	2200      	movs	r2, #0
 8001d86:	4619      	mov	r1, r3
 8001d88:	4807      	ldr	r0, [pc, #28]	; (8001da8 <MX_TIM2_Init+0xec>)
 8001d8a:	f004 f993 	bl	80060b4 <HAL_TIM_PWM_ConfigChannel>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 8001d94:	f000 fa4a 	bl	800222c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001d98:	4803      	ldr	r0, [pc, #12]	; (8001da8 <MX_TIM2_Init+0xec>)
 8001d9a:	f001 f9ed 	bl	8003178 <HAL_TIM_MspPostInit>

}
 8001d9e:	bf00      	nop
 8001da0:	3738      	adds	r7, #56	; 0x38
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bd80      	pop	{r7, pc}
 8001da6:	bf00      	nop
 8001da8:	20000104 	.word	0x20000104

08001dac <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b088      	sub	sp, #32
 8001db0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001db2:	f107 0310 	add.w	r3, r7, #16
 8001db6:	2200      	movs	r2, #0
 8001db8:	601a      	str	r2, [r3, #0]
 8001dba:	605a      	str	r2, [r3, #4]
 8001dbc:	609a      	str	r2, [r3, #8]
 8001dbe:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001dc0:	1d3b      	adds	r3, r7, #4
 8001dc2:	2200      	movs	r2, #0
 8001dc4:	601a      	str	r2, [r3, #0]
 8001dc6:	605a      	str	r2, [r3, #4]
 8001dc8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001dca:	4b1d      	ldr	r3, [pc, #116]	; (8001e40 <MX_TIM5_Init+0x94>)
 8001dcc:	4a1d      	ldr	r2, [pc, #116]	; (8001e44 <MX_TIM5_Init+0x98>)
 8001dce:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 108-1;
 8001dd0:	4b1b      	ldr	r3, [pc, #108]	; (8001e40 <MX_TIM5_Init+0x94>)
 8001dd2:	226b      	movs	r2, #107	; 0x6b
 8001dd4:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001dd6:	4b1a      	ldr	r3, [pc, #104]	; (8001e40 <MX_TIM5_Init+0x94>)
 8001dd8:	2200      	movs	r2, #0
 8001dda:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 500-1;
 8001ddc:	4b18      	ldr	r3, [pc, #96]	; (8001e40 <MX_TIM5_Init+0x94>)
 8001dde:	f240 12f3 	movw	r2, #499	; 0x1f3
 8001de2:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001de4:	4b16      	ldr	r3, [pc, #88]	; (8001e40 <MX_TIM5_Init+0x94>)
 8001de6:	2200      	movs	r2, #0
 8001de8:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dea:	4b15      	ldr	r3, [pc, #84]	; (8001e40 <MX_TIM5_Init+0x94>)
 8001dec:	2200      	movs	r2, #0
 8001dee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001df0:	4813      	ldr	r0, [pc, #76]	; (8001e40 <MX_TIM5_Init+0x94>)
 8001df2:	f003 ff0f 	bl	8005c14 <HAL_TIM_Base_Init>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d001      	beq.n	8001e00 <MX_TIM5_Init+0x54>
  {
    Error_Handler();
 8001dfc:	f000 fa16 	bl	800222c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e04:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001e06:	f107 0310 	add.w	r3, r7, #16
 8001e0a:	4619      	mov	r1, r3
 8001e0c:	480c      	ldr	r0, [pc, #48]	; (8001e40 <MX_TIM5_Init+0x94>)
 8001e0e:	f004 fa65 	bl	80062dc <HAL_TIM_ConfigClockSource>
 8001e12:	4603      	mov	r3, r0
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d001      	beq.n	8001e1c <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001e18:	f000 fa08 	bl	800222c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001e24:	1d3b      	adds	r3, r7, #4
 8001e26:	4619      	mov	r1, r3
 8001e28:	4805      	ldr	r0, [pc, #20]	; (8001e40 <MX_TIM5_Init+0x94>)
 8001e2a:	f004 fee1 	bl	8006bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e2e:	4603      	mov	r3, r0
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <MX_TIM5_Init+0x8c>
  {
    Error_Handler();
 8001e34:	f000 f9fa 	bl	800222c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001e38:	bf00      	nop
 8001e3a:	3720      	adds	r7, #32
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	20000150 	.word	0x20000150
 8001e44:	40000c00 	.word	0x40000c00

08001e48 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b084      	sub	sp, #16
 8001e4c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e4e:	1d3b      	adds	r3, r7, #4
 8001e50:	2200      	movs	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
 8001e54:	605a      	str	r2, [r3, #4]
 8001e56:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001e58:	4b14      	ldr	r3, [pc, #80]	; (8001eac <MX_TIM6_Init+0x64>)
 8001e5a:	4a15      	ldr	r2, [pc, #84]	; (8001eb0 <MX_TIM6_Init+0x68>)
 8001e5c:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 108-1;
 8001e5e:	4b13      	ldr	r3, [pc, #76]	; (8001eac <MX_TIM6_Init+0x64>)
 8001e60:	226b      	movs	r2, #107	; 0x6b
 8001e62:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e64:	4b11      	ldr	r3, [pc, #68]	; (8001eac <MX_TIM6_Init+0x64>)
 8001e66:	2200      	movs	r2, #0
 8001e68:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8001e6a:	4b10      	ldr	r3, [pc, #64]	; (8001eac <MX_TIM6_Init+0x64>)
 8001e6c:	f242 720f 	movw	r2, #9999	; 0x270f
 8001e70:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e72:	4b0e      	ldr	r3, [pc, #56]	; (8001eac <MX_TIM6_Init+0x64>)
 8001e74:	2200      	movs	r2, #0
 8001e76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001e78:	480c      	ldr	r0, [pc, #48]	; (8001eac <MX_TIM6_Init+0x64>)
 8001e7a:	f003 fecb 	bl	8005c14 <HAL_TIM_Base_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 8001e84:	f000 f9d2 	bl	800222c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e88:	2300      	movs	r3, #0
 8001e8a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001e90:	1d3b      	adds	r3, r7, #4
 8001e92:	4619      	mov	r1, r3
 8001e94:	4805      	ldr	r0, [pc, #20]	; (8001eac <MX_TIM6_Init+0x64>)
 8001e96:	f004 feab 	bl	8006bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001e9a:	4603      	mov	r3, r0
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d001      	beq.n	8001ea4 <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001ea0:	f000 f9c4 	bl	800222c <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001ea4:	bf00      	nop
 8001ea6:	3710      	adds	r7, #16
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bd80      	pop	{r7, pc}
 8001eac:	2000019c 	.word	0x2000019c
 8001eb0:	40001000 	.word	0x40001000

08001eb4 <MX_TIM7_Init>:
  * @brief TIM7 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM7_Init(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b084      	sub	sp, #16
 8001eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM7_Init 0 */

  /* USER CODE END TIM7_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001eba:	1d3b      	adds	r3, r7, #4
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	601a      	str	r2, [r3, #0]
 8001ec0:	605a      	str	r2, [r3, #4]
 8001ec2:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM7_Init 1 */

  /* USER CODE END TIM7_Init 1 */
  htim7.Instance = TIM7;
 8001ec4:	4b14      	ldr	r3, [pc, #80]	; (8001f18 <MX_TIM7_Init+0x64>)
 8001ec6:	4a15      	ldr	r2, [pc, #84]	; (8001f1c <MX_TIM7_Init+0x68>)
 8001ec8:	601a      	str	r2, [r3, #0]
  htim7.Init.Prescaler = 108-1;
 8001eca:	4b13      	ldr	r3, [pc, #76]	; (8001f18 <MX_TIM7_Init+0x64>)
 8001ecc:	226b      	movs	r2, #107	; 0x6b
 8001ece:	605a      	str	r2, [r3, #4]
  htim7.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed0:	4b11      	ldr	r3, [pc, #68]	; (8001f18 <MX_TIM7_Init+0x64>)
 8001ed2:	2200      	movs	r2, #0
 8001ed4:	609a      	str	r2, [r3, #8]
  htim7.Init.Period = 1000-1;
 8001ed6:	4b10      	ldr	r3, [pc, #64]	; (8001f18 <MX_TIM7_Init+0x64>)
 8001ed8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001edc:	60da      	str	r2, [r3, #12]
  htim7.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ede:	4b0e      	ldr	r3, [pc, #56]	; (8001f18 <MX_TIM7_Init+0x64>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim7) != HAL_OK)
 8001ee4:	480c      	ldr	r0, [pc, #48]	; (8001f18 <MX_TIM7_Init+0x64>)
 8001ee6:	f003 fe95 	bl	8005c14 <HAL_TIM_Base_Init>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d001      	beq.n	8001ef4 <MX_TIM7_Init+0x40>
  {
    Error_Handler();
 8001ef0:	f000 f99c 	bl	800222c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001ef4:	2300      	movs	r3, #0
 8001ef6:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001ef8:	2300      	movs	r3, #0
 8001efa:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim7, &sMasterConfig) != HAL_OK)
 8001efc:	1d3b      	adds	r3, r7, #4
 8001efe:	4619      	mov	r1, r3
 8001f00:	4805      	ldr	r0, [pc, #20]	; (8001f18 <MX_TIM7_Init+0x64>)
 8001f02:	f004 fe75 	bl	8006bf0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f06:	4603      	mov	r3, r0
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d001      	beq.n	8001f10 <MX_TIM7_Init+0x5c>
  {
    Error_Handler();
 8001f0c:	f000 f98e 	bl	800222c <Error_Handler>
  }
  /* USER CODE BEGIN TIM7_Init 2 */

  /* USER CODE END TIM7_Init 2 */

}
 8001f10:	bf00      	nop
 8001f12:	3710      	adds	r7, #16
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bd80      	pop	{r7, pc}
 8001f18:	200001e8 	.word	0x200001e8
 8001f1c:	40001400 	.word	0x40001400

08001f20 <MX_UART8_Init>:
  * @brief UART8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART8_Init(void)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8001f24:	4b14      	ldr	r3, [pc, #80]	; (8001f78 <MX_UART8_Init+0x58>)
 8001f26:	4a15      	ldr	r2, [pc, #84]	; (8001f7c <MX_UART8_Init+0x5c>)
 8001f28:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 8001f2a:	4b13      	ldr	r3, [pc, #76]	; (8001f78 <MX_UART8_Init+0x58>)
 8001f2c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f30:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8001f32:	4b11      	ldr	r3, [pc, #68]	; (8001f78 <MX_UART8_Init+0x58>)
 8001f34:	2200      	movs	r2, #0
 8001f36:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 8001f38:	4b0f      	ldr	r3, [pc, #60]	; (8001f78 <MX_UART8_Init+0x58>)
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8001f3e:	4b0e      	ldr	r3, [pc, #56]	; (8001f78 <MX_UART8_Init+0x58>)
 8001f40:	2200      	movs	r2, #0
 8001f42:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8001f44:	4b0c      	ldr	r3, [pc, #48]	; (8001f78 <MX_UART8_Init+0x58>)
 8001f46:	220c      	movs	r2, #12
 8001f48:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f4a:	4b0b      	ldr	r3, [pc, #44]	; (8001f78 <MX_UART8_Init+0x58>)
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f50:	4b09      	ldr	r3, [pc, #36]	; (8001f78 <MX_UART8_Init+0x58>)
 8001f52:	2200      	movs	r2, #0
 8001f54:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f56:	4b08      	ldr	r3, [pc, #32]	; (8001f78 <MX_UART8_Init+0x58>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f5c:	4b06      	ldr	r3, [pc, #24]	; (8001f78 <MX_UART8_Init+0x58>)
 8001f5e:	2200      	movs	r2, #0
 8001f60:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8001f62:	4805      	ldr	r0, [pc, #20]	; (8001f78 <MX_UART8_Init+0x58>)
 8001f64:	f004 fef0 	bl	8006d48 <HAL_UART_Init>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <MX_UART8_Init+0x52>
  {
    Error_Handler();
 8001f6e:	f000 f95d 	bl	800222c <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20000234 	.word	0x20000234
 8001f7c:	40007c00 	.word	0x40007c00

08001f80 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001f84:	4b14      	ldr	r3, [pc, #80]	; (8001fd8 <MX_USART1_UART_Init+0x58>)
 8001f86:	4a15      	ldr	r2, [pc, #84]	; (8001fdc <MX_USART1_UART_Init+0x5c>)
 8001f88:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001f8a:	4b13      	ldr	r3, [pc, #76]	; (8001fd8 <MX_USART1_UART_Init+0x58>)
 8001f8c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f90:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001f92:	4b11      	ldr	r3, [pc, #68]	; (8001fd8 <MX_USART1_UART_Init+0x58>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001f98:	4b0f      	ldr	r3, [pc, #60]	; (8001fd8 <MX_USART1_UART_Init+0x58>)
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001f9e:	4b0e      	ldr	r3, [pc, #56]	; (8001fd8 <MX_USART1_UART_Init+0x58>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001fa4:	4b0c      	ldr	r3, [pc, #48]	; (8001fd8 <MX_USART1_UART_Init+0x58>)
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001faa:	4b0b      	ldr	r3, [pc, #44]	; (8001fd8 <MX_USART1_UART_Init+0x58>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fb0:	4b09      	ldr	r3, [pc, #36]	; (8001fd8 <MX_USART1_UART_Init+0x58>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fb6:	4b08      	ldr	r3, [pc, #32]	; (8001fd8 <MX_USART1_UART_Init+0x58>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <MX_USART1_UART_Init+0x58>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001fc2:	4805      	ldr	r0, [pc, #20]	; (8001fd8 <MX_USART1_UART_Init+0x58>)
 8001fc4:	f004 fec0 	bl	8006d48 <HAL_UART_Init>
 8001fc8:	4603      	mov	r3, r0
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d001      	beq.n	8001fd2 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8001fce:	f000 f92d 	bl	800222c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001fd2:	bf00      	nop
 8001fd4:	bd80      	pop	{r7, pc}
 8001fd6:	bf00      	nop
 8001fd8:	200002b8 	.word	0x200002b8
 8001fdc:	40011000 	.word	0x40011000

08001fe0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b08c      	sub	sp, #48	; 0x30
 8001fe4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe6:	f107 031c 	add.w	r3, r7, #28
 8001fea:	2200      	movs	r2, #0
 8001fec:	601a      	str	r2, [r3, #0]
 8001fee:	605a      	str	r2, [r3, #4]
 8001ff0:	609a      	str	r2, [r3, #8]
 8001ff2:	60da      	str	r2, [r3, #12]
 8001ff4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001ff6:	4b86      	ldr	r3, [pc, #536]	; (8002210 <MX_GPIO_Init+0x230>)
 8001ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ffa:	4a85      	ldr	r2, [pc, #532]	; (8002210 <MX_GPIO_Init+0x230>)
 8001ffc:	f043 0320 	orr.w	r3, r3, #32
 8002000:	6313      	str	r3, [r2, #48]	; 0x30
 8002002:	4b83      	ldr	r3, [pc, #524]	; (8002210 <MX_GPIO_Init+0x230>)
 8002004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002006:	f003 0320 	and.w	r3, r3, #32
 800200a:	61bb      	str	r3, [r7, #24]
 800200c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800200e:	4b80      	ldr	r3, [pc, #512]	; (8002210 <MX_GPIO_Init+0x230>)
 8002010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002012:	4a7f      	ldr	r2, [pc, #508]	; (8002210 <MX_GPIO_Init+0x230>)
 8002014:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002018:	6313      	str	r3, [r2, #48]	; 0x30
 800201a:	4b7d      	ldr	r3, [pc, #500]	; (8002210 <MX_GPIO_Init+0x230>)
 800201c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800201e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002022:	617b      	str	r3, [r7, #20]
 8002024:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002026:	4b7a      	ldr	r3, [pc, #488]	; (8002210 <MX_GPIO_Init+0x230>)
 8002028:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202a:	4a79      	ldr	r2, [pc, #484]	; (8002210 <MX_GPIO_Init+0x230>)
 800202c:	f043 0301 	orr.w	r3, r3, #1
 8002030:	6313      	str	r3, [r2, #48]	; 0x30
 8002032:	4b77      	ldr	r3, [pc, #476]	; (8002210 <MX_GPIO_Init+0x230>)
 8002034:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002036:	f003 0301 	and.w	r3, r3, #1
 800203a:	613b      	str	r3, [r7, #16]
 800203c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800203e:	4b74      	ldr	r3, [pc, #464]	; (8002210 <MX_GPIO_Init+0x230>)
 8002040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002042:	4a73      	ldr	r2, [pc, #460]	; (8002210 <MX_GPIO_Init+0x230>)
 8002044:	f043 0310 	orr.w	r3, r3, #16
 8002048:	6313      	str	r3, [r2, #48]	; 0x30
 800204a:	4b71      	ldr	r3, [pc, #452]	; (8002210 <MX_GPIO_Init+0x230>)
 800204c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800204e:	f003 0310 	and.w	r3, r3, #16
 8002052:	60fb      	str	r3, [r7, #12]
 8002054:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002056:	4b6e      	ldr	r3, [pc, #440]	; (8002210 <MX_GPIO_Init+0x230>)
 8002058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205a:	4a6d      	ldr	r2, [pc, #436]	; (8002210 <MX_GPIO_Init+0x230>)
 800205c:	f043 0302 	orr.w	r3, r3, #2
 8002060:	6313      	str	r3, [r2, #48]	; 0x30
 8002062:	4b6b      	ldr	r3, [pc, #428]	; (8002210 <MX_GPIO_Init+0x230>)
 8002064:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002066:	f003 0302 	and.w	r3, r3, #2
 800206a:	60bb      	str	r3, [r7, #8]
 800206c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800206e:	4b68      	ldr	r3, [pc, #416]	; (8002210 <MX_GPIO_Init+0x230>)
 8002070:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002072:	4a67      	ldr	r2, [pc, #412]	; (8002210 <MX_GPIO_Init+0x230>)
 8002074:	f043 0308 	orr.w	r3, r3, #8
 8002078:	6313      	str	r3, [r2, #48]	; 0x30
 800207a:	4b65      	ldr	r3, [pc, #404]	; (8002210 <MX_GPIO_Init+0x230>)
 800207c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800207e:	f003 0308 	and.w	r3, r3, #8
 8002082:	607b      	str	r3, [r7, #4]
 8002084:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002086:	4b62      	ldr	r3, [pc, #392]	; (8002210 <MX_GPIO_Init+0x230>)
 8002088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800208a:	4a61      	ldr	r2, [pc, #388]	; (8002210 <MX_GPIO_Init+0x230>)
 800208c:	f043 0304 	orr.w	r3, r3, #4
 8002090:	6313      	str	r3, [r2, #48]	; 0x30
 8002092:	4b5f      	ldr	r3, [pc, #380]	; (8002210 <MX_GPIO_Init+0x230>)
 8002094:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002096:	f003 0304 	and.w	r3, r3, #4
 800209a:	603b      	str	r3, [r7, #0]
 800209c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_7, GPIO_PIN_RESET);
 800209e:	2200      	movs	r2, #0
 80020a0:	2180      	movs	r1, #128	; 0x80
 80020a2:	485c      	ldr	r0, [pc, #368]	; (8002214 <MX_GPIO_Init+0x234>)
 80020a4:	f002 fc60 	bl	8004968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, REDtest_Pin|BLUEtest_Pin, GPIO_PIN_RESET);
 80020a8:	2200      	movs	r2, #0
 80020aa:	f44f 4182 	mov.w	r1, #16640	; 0x4100
 80020ae:	485a      	ldr	r0, [pc, #360]	; (8002218 <MX_GPIO_Init+0x238>)
 80020b0:	f002 fc5a 	bl	8004968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_8|USS_Trigger1_Pin, GPIO_PIN_RESET);
 80020b4:	2200      	movs	r2, #0
 80020b6:	f44f 7190 	mov.w	r1, #288	; 0x120
 80020ba:	4858      	ldr	r0, [pc, #352]	; (800221c <MX_GPIO_Init+0x23c>)
 80020bc:	f002 fc54 	bl	8004968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_12, GPIO_PIN_RESET);
 80020c0:	2200      	movs	r2, #0
 80020c2:	f44f 51a2 	mov.w	r1, #5184	; 0x1440
 80020c6:	4856      	ldr	r0, [pc, #344]	; (8002220 <MX_GPIO_Init+0x240>)
 80020c8:	f002 fc4e 	bl	8004968 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80020cc:	2380      	movs	r3, #128	; 0x80
 80020ce:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80020d0:	2301      	movs	r3, #1
 80020d2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d4:	2300      	movs	r3, #0
 80020d6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d8:	2300      	movs	r3, #0
 80020da:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80020dc:	f107 031c 	add.w	r3, r7, #28
 80020e0:	4619      	mov	r1, r3
 80020e2:	484c      	ldr	r0, [pc, #304]	; (8002214 <MX_GPIO_Init+0x234>)
 80020e4:	f002 fa94 	bl	8004610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA2 PA3 PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3|GPIO_PIN_4;
 80020e8:	231e      	movs	r3, #30
 80020ea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020ec:	2303      	movs	r3, #3
 80020ee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020f0:	2300      	movs	r3, #0
 80020f2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020f4:	f107 031c 	add.w	r3, r7, #28
 80020f8:	4619      	mov	r1, r3
 80020fa:	484a      	ldr	r0, [pc, #296]	; (8002224 <MX_GPIO_Init+0x244>)
 80020fc:	f002 fa88 	bl	8004610 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8002100:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002104:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002106:	2300      	movs	r3, #0
 8002108:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800210a:	2300      	movs	r3, #0
 800210c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800210e:	f107 031c 	add.w	r3, r7, #28
 8002112:	4619      	mov	r1, r3
 8002114:	4844      	ldr	r0, [pc, #272]	; (8002228 <MX_GPIO_Init+0x248>)
 8002116:	f002 fa7b 	bl	8004610 <HAL_GPIO_Init>

  /*Configure GPIO pins : REDtest_Pin BLUEtest_Pin */
  GPIO_InitStruct.Pin = REDtest_Pin|BLUEtest_Pin;
 800211a:	f44f 4382 	mov.w	r3, #16640	; 0x4100
 800211e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002120:	2301      	movs	r3, #1
 8002122:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002124:	2300      	movs	r3, #0
 8002126:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002128:	2300      	movs	r3, #0
 800212a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800212c:	f107 031c 	add.w	r3, r7, #28
 8002130:	4619      	mov	r1, r3
 8002132:	4839      	ldr	r0, [pc, #228]	; (8002218 <MX_GPIO_Init+0x238>)
 8002134:	f002 fa6c 	bl	8004610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 USS_Trigger1_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_8|USS_Trigger1_Pin;
 8002138:	f44f 7390 	mov.w	r3, #288	; 0x120
 800213c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800213e:	2301      	movs	r3, #1
 8002140:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002142:	2300      	movs	r3, #0
 8002144:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002146:	2300      	movs	r3, #0
 8002148:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800214a:	f107 031c 	add.w	r3, r7, #28
 800214e:	4619      	mov	r1, r3
 8002150:	4832      	ldr	r0, [pc, #200]	; (800221c <MX_GPIO_Init+0x23c>)
 8002152:	f002 fa5d 	bl	8004610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD9 PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_2;
 8002156:	f44f 7301 	mov.w	r3, #516	; 0x204
 800215a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800215c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002166:	f107 031c 	add.w	r3, r7, #28
 800216a:	4619      	mov	r1, r3
 800216c:	482b      	ldr	r0, [pc, #172]	; (800221c <MX_GPIO_Init+0x23c>)
 800216e:	f002 fa4f 	bl	8004610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14;
 8002172:	f44f 43e0 	mov.w	r3, #28672	; 0x7000
 8002176:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002178:	2302      	movs	r3, #2
 800217a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800217c:	2300      	movs	r3, #0
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002180:	2300      	movs	r3, #0
 8002182:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002184:	2302      	movs	r3, #2
 8002186:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002188:	f107 031c 	add.w	r3, r7, #28
 800218c:	4619      	mov	r1, r3
 800218e:	4823      	ldr	r0, [pc, #140]	; (800221c <MX_GPIO_Init+0x23c>)
 8002190:	f002 fa3e 	bl	8004610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC10 PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_10|GPIO_PIN_12;
 8002194:	f44f 53a2 	mov.w	r3, #5184	; 0x1440
 8002198:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800219a:	2301      	movs	r3, #1
 800219c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800219e:	2300      	movs	r3, #0
 80021a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a2:	2300      	movs	r3, #0
 80021a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021a6:	f107 031c 	add.w	r3, r7, #28
 80021aa:	4619      	mov	r1, r3
 80021ac:	481c      	ldr	r0, [pc, #112]	; (8002220 <MX_GPIO_Init+0x240>)
 80021ae:	f002 fa2f 	bl	8004610 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC11 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_11;
 80021b2:	f44f 6308 	mov.w	r3, #2176	; 0x880
 80021b6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021b8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021bc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80021c2:	f107 031c 	add.w	r3, r7, #28
 80021c6:	4619      	mov	r1, r3
 80021c8:	4815      	ldr	r0, [pc, #84]	; (8002220 <MX_GPIO_Init+0x240>)
 80021ca:	f002 fa21 	bl	8004610 <HAL_GPIO_Init>

  /*Configure GPIO pin : USS_Data1_Pin */
  GPIO_InitStruct.Pin = USS_Data1_Pin;
 80021ce:	2340      	movs	r3, #64	; 0x40
 80021d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80021d2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80021d6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021d8:	2301      	movs	r3, #1
 80021da:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USS_Data1_GPIO_Port, &GPIO_InitStruct);
 80021dc:	f107 031c 	add.w	r3, r7, #28
 80021e0:	4619      	mov	r1, r3
 80021e2:	480e      	ldr	r0, [pc, #56]	; (800221c <MX_GPIO_Init+0x23c>)
 80021e4:	f002 fa14 	bl	8004610 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80021e8:	2200      	movs	r2, #0
 80021ea:	2100      	movs	r1, #0
 80021ec:	2017      	movs	r0, #23
 80021ee:	f002 f946 	bl	800447e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80021f2:	2017      	movs	r0, #23
 80021f4:	f002 f95f 	bl	80044b6 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80021f8:	2200      	movs	r2, #0
 80021fa:	2100      	movs	r1, #0
 80021fc:	2028      	movs	r0, #40	; 0x28
 80021fe:	f002 f93e 	bl	800447e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002202:	2028      	movs	r0, #40	; 0x28
 8002204:	f002 f957 	bl	80044b6 <HAL_NVIC_EnableIRQ>

}
 8002208:	bf00      	nop
 800220a:	3730      	adds	r7, #48	; 0x30
 800220c:	46bd      	mov	sp, r7
 800220e:	bd80      	pop	{r7, pc}
 8002210:	40023800 	.word	0x40023800
 8002214:	40021400 	.word	0x40021400
 8002218:	40020400 	.word	0x40020400
 800221c:	40020c00 	.word	0x40020c00
 8002220:	40020800 	.word	0x40020800
 8002224:	40020000 	.word	0x40020000
 8002228:	40021000 	.word	0x40021000

0800222c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800222c:	b480      	push	{r7}
 800222e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002230:	b672      	cpsid	i
}
 8002232:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8002234:	e7fe      	b.n	8002234 <Error_Handler+0x8>

08002236 <velocityMode>:

#include "motor_driver_114.h"
#include "define.h"

void velocityMode()
{
 8002236:	b580      	push	{r7, lr}
 8002238:	b084      	sub	sp, #16
 800223a:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 800223c:	2300      	movs	r3, #0
 800223e:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2f;
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	1c5a      	adds	r2, r3, #1
 8002244:	60fa      	str	r2, [r7, #12]
 8002246:	3310      	adds	r3, #16
 8002248:	443b      	add	r3, r7
 800224a:	222f      	movs	r2, #47	; 0x2f
 800224c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	1c5a      	adds	r2, r3, #1
 8002254:	60fa      	str	r2, [r7, #12]
 8002256:	3310      	adds	r3, #16
 8002258:	443b      	add	r3, r7
 800225a:	2260      	movs	r2, #96	; 0x60
 800225c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1c5a      	adds	r2, r3, #1
 8002264:	60fa      	str	r2, [r7, #12]
 8002266:	3310      	adds	r3, #16
 8002268:	443b      	add	r3, r7
 800226a:	2260      	movs	r2, #96	; 0x60
 800226c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	1c5a      	adds	r2, r3, #1
 8002274:	60fa      	str	r2, [r7, #12]
 8002276:	3310      	adds	r3, #16
 8002278:	443b      	add	r3, r7
 800227a:	2200      	movs	r2, #0
 800227c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	1c5a      	adds	r2, r3, #1
 8002284:	60fa      	str	r2, [r7, #12]
 8002286:	3310      	adds	r3, #16
 8002288:	443b      	add	r3, r7
 800228a:	2203      	movs	r2, #3
 800228c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	1c5a      	adds	r2, r3, #1
 8002294:	60fa      	str	r2, [r7, #12]
 8002296:	3310      	adds	r3, #16
 8002298:	443b      	add	r3, r7
 800229a:	2200      	movs	r2, #0
 800229c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	1c5a      	adds	r2, r3, #1
 80022a4:	60fa      	str	r2, [r7, #12]
 80022a6:	3310      	adds	r3, #16
 80022a8:	443b      	add	r3, r7
 80022aa:	2200      	movs	r2, #0
 80022ac:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 80022b0:	1d3a      	adds	r2, r7, #4
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	4413      	add	r3, r2
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80022ba:	1d39      	adds	r1, r7, #4
 80022bc:	2300      	movs	r3, #0
 80022be:	2208      	movs	r2, #8
 80022c0:	f240 6001 	movw	r0, #1537	; 0x601
 80022c4:	f7ff fbd6 	bl	8001a74 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 80022c8:	2064      	movs	r0, #100	; 0x64
 80022ca:	f001 f941 	bl	8003550 <HAL_Delay>
}
 80022ce:	bf00      	nop
 80022d0:	3710      	adds	r7, #16
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bd80      	pop	{r7, pc}

080022d6 <synchronousMode>:

void synchronousMode()
{
 80022d6:	b580      	push	{r7, lr}
 80022d8:	b084      	sub	sp, #16
 80022da:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 80022dc:	2300      	movs	r3, #0
 80022de:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	1c5a      	adds	r2, r3, #1
 80022e4:	60fa      	str	r2, [r7, #12]
 80022e6:	3310      	adds	r3, #16
 80022e8:	443b      	add	r3, r7
 80022ea:	222b      	movs	r2, #43	; 0x2b
 80022ec:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x0f;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	1c5a      	adds	r2, r3, #1
 80022f4:	60fa      	str	r2, [r7, #12]
 80022f6:	3310      	adds	r3, #16
 80022f8:	443b      	add	r3, r7
 80022fa:	220f      	movs	r2, #15
 80022fc:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	1c5a      	adds	r2, r3, #1
 8002304:	60fa      	str	r2, [r7, #12]
 8002306:	3310      	adds	r3, #16
 8002308:	443b      	add	r3, r7
 800230a:	2220      	movs	r2, #32
 800230c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002310:	68fb      	ldr	r3, [r7, #12]
 8002312:	1c5a      	adds	r2, r3, #1
 8002314:	60fa      	str	r2, [r7, #12]
 8002316:	3310      	adds	r3, #16
 8002318:	443b      	add	r3, r7
 800231a:	2200      	movs	r2, #0
 800231c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x01;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	1c5a      	adds	r2, r3, #1
 8002324:	60fa      	str	r2, [r7, #12]
 8002326:	3310      	adds	r3, #16
 8002328:	443b      	add	r3, r7
 800232a:	2201      	movs	r2, #1
 800232c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	1c5a      	adds	r2, r3, #1
 8002334:	60fa      	str	r2, [r7, #12]
 8002336:	3310      	adds	r3, #16
 8002338:	443b      	add	r3, r7
 800233a:	2200      	movs	r2, #0
 800233c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	1c5a      	adds	r2, r3, #1
 8002344:	60fa      	str	r2, [r7, #12]
 8002346:	3310      	adds	r3, #16
 8002348:	443b      	add	r3, r7
 800234a:	2200      	movs	r2, #0
 800234c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8002350:	1d3a      	adds	r2, r7, #4
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	4413      	add	r3, r2
 8002356:	2200      	movs	r2, #0
 8002358:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 800235a:	1d39      	adds	r1, r7, #4
 800235c:	2300      	movs	r3, #0
 800235e:	2208      	movs	r2, #8
 8002360:	f240 6001 	movw	r0, #1537	; 0x601
 8002364:	f7ff fb86 	bl	8001a74 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8002368:	2064      	movs	r0, #100	; 0x64
 800236a:	f001 f8f1 	bl	8003550 <HAL_Delay>
}
 800236e:	bf00      	nop
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <settingEnc>:

void settingEnc(int16_t enc)
{
 8002376:	b580      	push	{r7, lr}
 8002378:	b086      	sub	sp, #24
 800237a:	af00      	add	r7, sp, #0
 800237c:	4603      	mov	r3, r0
 800237e:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8002380:	2300      	movs	r3, #0
 8002382:	617b      	str	r3, [r7, #20]
 8002384:	e055      	b.n	8002432 <settingEnc+0xbc>
    {
        int index = 0;
 8002386:	2300      	movs	r3, #0
 8002388:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 800238a:	693b      	ldr	r3, [r7, #16]
 800238c:	1c5a      	adds	r2, r3, #1
 800238e:	613a      	str	r2, [r7, #16]
 8002390:	3318      	adds	r3, #24
 8002392:	443b      	add	r3, r7
 8002394:	222b      	movs	r2, #43	; 0x2b
 8002396:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x0e;
 800239a:	693b      	ldr	r3, [r7, #16]
 800239c:	1c5a      	adds	r2, r3, #1
 800239e:	613a      	str	r2, [r7, #16]
 80023a0:	3318      	adds	r3, #24
 80023a2:	443b      	add	r3, r7
 80023a4:	220e      	movs	r2, #14
 80023a6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	1c5a      	adds	r2, r3, #1
 80023ae:	613a      	str	r2, [r7, #16]
 80023b0:	3318      	adds	r3, #24
 80023b2:	443b      	add	r3, r7
 80023b4:	2220      	movs	r2, #32
 80023b6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 80023ba:	697b      	ldr	r3, [r7, #20]
 80023bc:	b2da      	uxtb	r2, r3
 80023be:	693b      	ldr	r3, [r7, #16]
 80023c0:	1c59      	adds	r1, r3, #1
 80023c2:	6139      	str	r1, [r7, #16]
 80023c4:	3201      	adds	r2, #1
 80023c6:	b2d2      	uxtb	r2, r2
 80023c8:	3318      	adds	r3, #24
 80023ca:	443b      	add	r3, r7
 80023cc:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (enc & 0xff);
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	1c5a      	adds	r2, r3, #1
 80023d4:	613a      	str	r2, [r7, #16]
 80023d6:	88fa      	ldrh	r2, [r7, #6]
 80023d8:	b2d2      	uxtb	r2, r2
 80023da:	3318      	adds	r3, #24
 80023dc:	443b      	add	r3, r7
 80023de:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (enc>>8) & 0xff;
 80023e2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80023e6:	121b      	asrs	r3, r3, #8
 80023e8:	b219      	sxth	r1, r3
 80023ea:	693b      	ldr	r3, [r7, #16]
 80023ec:	1c5a      	adds	r2, r3, #1
 80023ee:	613a      	str	r2, [r7, #16]
 80023f0:	b2ca      	uxtb	r2, r1
 80023f2:	3318      	adds	r3, #24
 80023f4:	443b      	add	r3, r7
 80023f6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80023fa:	693b      	ldr	r3, [r7, #16]
 80023fc:	1c5a      	adds	r2, r3, #1
 80023fe:	613a      	str	r2, [r7, #16]
 8002400:	3318      	adds	r3, #24
 8002402:	443b      	add	r3, r7
 8002404:	2200      	movs	r2, #0
 8002406:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 800240a:	f107 0208 	add.w	r2, r7, #8
 800240e:	693b      	ldr	r3, [r7, #16]
 8002410:	4413      	add	r3, r2
 8002412:	2200      	movs	r2, #0
 8002414:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8002416:	f107 0108 	add.w	r1, r7, #8
 800241a:	2300      	movs	r3, #0
 800241c:	2208      	movs	r2, #8
 800241e:	f240 6001 	movw	r0, #1537	; 0x601
 8002422:	f7ff fb27 	bl	8001a74 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8002426:	2064      	movs	r0, #100	; 0x64
 8002428:	f001 f892 	bl	8003550 <HAL_Delay>
    for(int i=0;i<2;i++)
 800242c:	697b      	ldr	r3, [r7, #20]
 800242e:	3301      	adds	r3, #1
 8002430:	617b      	str	r3, [r7, #20]
 8002432:	697b      	ldr	r3, [r7, #20]
 8002434:	2b01      	cmp	r3, #1
 8002436:	dda6      	ble.n	8002386 <settingEnc+0x10>
    }
}
 8002438:	bf00      	nop
 800243a:	bf00      	nop
 800243c:	3718      	adds	r7, #24
 800243e:	46bd      	mov	sp, r7
 8002440:	bd80      	pop	{r7, pc}

08002442 <settingPole>:

void settingPole(int16_t pole)
{
 8002442:	b580      	push	{r7, lr}
 8002444:	b086      	sub	sp, #24
 8002446:	af00      	add	r7, sp, #0
 8002448:	4603      	mov	r3, r0
 800244a:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 800244c:	2300      	movs	r3, #0
 800244e:	617b      	str	r3, [r7, #20]
 8002450:	e055      	b.n	80024fe <settingPole+0xbc>
    {
        int index = 0;
 8002452:	2300      	movs	r3, #0
 8002454:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1c5a      	adds	r2, r3, #1
 800245a:	613a      	str	r2, [r7, #16]
 800245c:	3318      	adds	r3, #24
 800245e:	443b      	add	r3, r7
 8002460:	222b      	movs	r2, #43	; 0x2b
 8002462:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x0c;
 8002466:	693b      	ldr	r3, [r7, #16]
 8002468:	1c5a      	adds	r2, r3, #1
 800246a:	613a      	str	r2, [r7, #16]
 800246c:	3318      	adds	r3, #24
 800246e:	443b      	add	r3, r7
 8002470:	220c      	movs	r2, #12
 8002472:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	613a      	str	r2, [r7, #16]
 800247c:	3318      	adds	r3, #24
 800247e:	443b      	add	r3, r7
 8002480:	2220      	movs	r2, #32
 8002482:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	b2da      	uxtb	r2, r3
 800248a:	693b      	ldr	r3, [r7, #16]
 800248c:	1c59      	adds	r1, r3, #1
 800248e:	6139      	str	r1, [r7, #16]
 8002490:	3201      	adds	r2, #1
 8002492:	b2d2      	uxtb	r2, r2
 8002494:	3318      	adds	r3, #24
 8002496:	443b      	add	r3, r7
 8002498:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (pole & 0xff);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	1c5a      	adds	r2, r3, #1
 80024a0:	613a      	str	r2, [r7, #16]
 80024a2:	88fa      	ldrh	r2, [r7, #6]
 80024a4:	b2d2      	uxtb	r2, r2
 80024a6:	3318      	adds	r3, #24
 80024a8:	443b      	add	r3, r7
 80024aa:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (pole>>8) & 0xff;
 80024ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80024b2:	121b      	asrs	r3, r3, #8
 80024b4:	b219      	sxth	r1, r3
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	1c5a      	adds	r2, r3, #1
 80024ba:	613a      	str	r2, [r7, #16]
 80024bc:	b2ca      	uxtb	r2, r1
 80024be:	3318      	adds	r3, #24
 80024c0:	443b      	add	r3, r7
 80024c2:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80024c6:	693b      	ldr	r3, [r7, #16]
 80024c8:	1c5a      	adds	r2, r3, #1
 80024ca:	613a      	str	r2, [r7, #16]
 80024cc:	3318      	adds	r3, #24
 80024ce:	443b      	add	r3, r7
 80024d0:	2200      	movs	r2, #0
 80024d2:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 80024d6:	f107 0208 	add.w	r2, r7, #8
 80024da:	693b      	ldr	r3, [r7, #16]
 80024dc:	4413      	add	r3, r2
 80024de:	2200      	movs	r2, #0
 80024e0:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80024e2:	f107 0108 	add.w	r1, r7, #8
 80024e6:	2300      	movs	r3, #0
 80024e8:	2208      	movs	r2, #8
 80024ea:	f240 6001 	movw	r0, #1537	; 0x601
 80024ee:	f7ff fac1 	bl	8001a74 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 80024f2:	2064      	movs	r0, #100	; 0x64
 80024f4:	f001 f82c 	bl	8003550 <HAL_Delay>
    for(int i=0;i<2;i++)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	3301      	adds	r3, #1
 80024fc:	617b      	str	r3, [r7, #20]
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b01      	cmp	r3, #1
 8002502:	dda6      	ble.n	8002452 <settingPole+0x10>
    }
}
 8002504:	bf00      	nop
 8002506:	bf00      	nop
 8002508:	3718      	adds	r7, #24
 800250a:	46bd      	mov	sp, r7
 800250c:	bd80      	pop	{r7, pc}

0800250e <settingBreak>:

void settingBreak(uint8_t enable)
{
 800250e:	b580      	push	{r7, lr}
 8002510:	b086      	sub	sp, #24
 8002512:	af00      	add	r7, sp, #0
 8002514:	4603      	mov	r3, r0
 8002516:	71fb      	strb	r3, [r7, #7]
    char buf[8];
    int index = 0;
 8002518:	2300      	movs	r3, #0
 800251a:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x2b;
 800251c:	697b      	ldr	r3, [r7, #20]
 800251e:	1c5a      	adds	r2, r3, #1
 8002520:	617a      	str	r2, [r7, #20]
 8002522:	3318      	adds	r3, #24
 8002524:	443b      	add	r3, r7
 8002526:	222b      	movs	r2, #43	; 0x2b
 8002528:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x07;
 800252c:	697b      	ldr	r3, [r7, #20]
 800252e:	1c5a      	adds	r2, r3, #1
 8002530:	617a      	str	r2, [r7, #20]
 8002532:	3318      	adds	r3, #24
 8002534:	443b      	add	r3, r7
 8002536:	2207      	movs	r2, #7
 8002538:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	1c5a      	adds	r2, r3, #1
 8002540:	617a      	str	r2, [r7, #20]
 8002542:	3318      	adds	r3, #24
 8002544:	443b      	add	r3, r7
 8002546:	2220      	movs	r2, #32
 8002548:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800254c:	697b      	ldr	r3, [r7, #20]
 800254e:	1c5a      	adds	r2, r3, #1
 8002550:	617a      	str	r2, [r7, #20]
 8002552:	3318      	adds	r3, #24
 8002554:	443b      	add	r3, r7
 8002556:	2200      	movs	r2, #0
 8002558:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (char)enable;
 800255c:	697b      	ldr	r3, [r7, #20]
 800255e:	1c5a      	adds	r2, r3, #1
 8002560:	617a      	str	r2, [r7, #20]
 8002562:	3318      	adds	r3, #24
 8002564:	443b      	add	r3, r7
 8002566:	79fa      	ldrb	r2, [r7, #7]
 8002568:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	1c5a      	adds	r2, r3, #1
 8002570:	617a      	str	r2, [r7, #20]
 8002572:	3318      	adds	r3, #24
 8002574:	443b      	add	r3, r7
 8002576:	2200      	movs	r2, #0
 8002578:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800257c:	697b      	ldr	r3, [r7, #20]
 800257e:	1c5a      	adds	r2, r3, #1
 8002580:	617a      	str	r2, [r7, #20]
 8002582:	3318      	adds	r3, #24
 8002584:	443b      	add	r3, r7
 8002586:	2200      	movs	r2, #0
 8002588:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 800258c:	f107 020c 	add.w	r2, r7, #12
 8002590:	697b      	ldr	r3, [r7, #20]
 8002592:	4413      	add	r3, r2
 8002594:	2200      	movs	r2, #0
 8002596:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8002598:	f107 010c 	add.w	r1, r7, #12
 800259c:	2300      	movs	r3, #0
 800259e:	2208      	movs	r2, #8
 80025a0:	f240 6001 	movw	r0, #1537	; 0x601
 80025a4:	f7ff fa66 	bl	8001a74 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 80025a8:	2064      	movs	r0, #100	; 0x64
 80025aa:	f000 ffd1 	bl	8003550 <HAL_Delay>
}
 80025ae:	bf00      	nop
 80025b0:	3718      	adds	r7, #24
 80025b2:	46bd      	mov	sp, r7
 80025b4:	bd80      	pop	{r7, pc}

080025b6 <settingMaxRPM>:

void settingMaxRPM(int16_t rpm)
{
 80025b6:	b580      	push	{r7, lr}
 80025b8:	b086      	sub	sp, #24
 80025ba:	af00      	add	r7, sp, #0
 80025bc:	4603      	mov	r3, r0
 80025be:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    int index = 0;
 80025c0:	2300      	movs	r3, #0
 80025c2:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x2b;
 80025c4:	697b      	ldr	r3, [r7, #20]
 80025c6:	1c5a      	adds	r2, r3, #1
 80025c8:	617a      	str	r2, [r7, #20]
 80025ca:	3318      	adds	r3, #24
 80025cc:	443b      	add	r3, r7
 80025ce:	222b      	movs	r2, #43	; 0x2b
 80025d0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x08;
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	1c5a      	adds	r2, r3, #1
 80025d8:	617a      	str	r2, [r7, #20]
 80025da:	3318      	adds	r3, #24
 80025dc:	443b      	add	r3, r7
 80025de:	2208      	movs	r2, #8
 80025e0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	1c5a      	adds	r2, r3, #1
 80025e8:	617a      	str	r2, [r7, #20]
 80025ea:	3318      	adds	r3, #24
 80025ec:	443b      	add	r3, r7
 80025ee:	2220      	movs	r2, #32
 80025f0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 80025f4:	697b      	ldr	r3, [r7, #20]
 80025f6:	1c5a      	adds	r2, r3, #1
 80025f8:	617a      	str	r2, [r7, #20]
 80025fa:	3318      	adds	r3, #24
 80025fc:	443b      	add	r3, r7
 80025fe:	2200      	movs	r2, #0
 8002600:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (rpm & 0xff);
 8002604:	697b      	ldr	r3, [r7, #20]
 8002606:	1c5a      	adds	r2, r3, #1
 8002608:	617a      	str	r2, [r7, #20]
 800260a:	88fa      	ldrh	r2, [r7, #6]
 800260c:	b2d2      	uxtb	r2, r2
 800260e:	3318      	adds	r3, #24
 8002610:	443b      	add	r3, r7
 8002612:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (rpm>>8) & 0xff;
 8002616:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800261a:	121b      	asrs	r3, r3, #8
 800261c:	b219      	sxth	r1, r3
 800261e:	697b      	ldr	r3, [r7, #20]
 8002620:	1c5a      	adds	r2, r3, #1
 8002622:	617a      	str	r2, [r7, #20]
 8002624:	b2ca      	uxtb	r2, r1
 8002626:	3318      	adds	r3, #24
 8002628:	443b      	add	r3, r7
 800262a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 800262e:	697b      	ldr	r3, [r7, #20]
 8002630:	1c5a      	adds	r2, r3, #1
 8002632:	617a      	str	r2, [r7, #20]
 8002634:	3318      	adds	r3, #24
 8002636:	443b      	add	r3, r7
 8002638:	2200      	movs	r2, #0
 800263a:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 800263e:	f107 020c 	add.w	r2, r7, #12
 8002642:	697b      	ldr	r3, [r7, #20]
 8002644:	4413      	add	r3, r2
 8002646:	2200      	movs	r2, #0
 8002648:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 800264a:	f107 010c 	add.w	r1, r7, #12
 800264e:	2300      	movs	r3, #0
 8002650:	2208      	movs	r2, #8
 8002652:	f240 6001 	movw	r0, #1537	; 0x601
 8002656:	f7ff fa0d 	bl	8001a74 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 800265a:	2064      	movs	r0, #100	; 0x64
 800265c:	f000 ff78 	bl	8003550 <HAL_Delay>
}
 8002660:	bf00      	nop
 8002662:	3718      	adds	r7, #24
 8002664:	46bd      	mov	sp, r7
 8002666:	bd80      	pop	{r7, pc}

08002668 <settingRatedCurrent>:

void settingRatedCurrent(double curr)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	b086      	sub	sp, #24
 800266c:	af00      	add	r7, sp, #0
 800266e:	ed87 0b00 	vstr	d0, [r7]
    char buf[8];
    for(int i=0;i<2;i++)
 8002672:	2300      	movs	r3, #0
 8002674:	617b      	str	r3, [r7, #20]
 8002676:	e05e      	b.n	8002736 <settingRatedCurrent+0xce>
    {
        int index = 0;
 8002678:	2300      	movs	r3, #0
 800267a:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 800267c:	693b      	ldr	r3, [r7, #16]
 800267e:	1c5a      	adds	r2, r3, #1
 8002680:	613a      	str	r2, [r7, #16]
 8002682:	3318      	adds	r3, #24
 8002684:	443b      	add	r3, r7
 8002686:	222b      	movs	r2, #43	; 0x2b
 8002688:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x14;
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	1c5a      	adds	r2, r3, #1
 8002690:	613a      	str	r2, [r7, #16]
 8002692:	3318      	adds	r3, #24
 8002694:	443b      	add	r3, r7
 8002696:	2214      	movs	r2, #20
 8002698:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 800269c:	693b      	ldr	r3, [r7, #16]
 800269e:	1c5a      	adds	r2, r3, #1
 80026a0:	613a      	str	r2, [r7, #16]
 80026a2:	3318      	adds	r3, #24
 80026a4:	443b      	add	r3, r7
 80026a6:	2220      	movs	r2, #32
 80026a8:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 80026ac:	697b      	ldr	r3, [r7, #20]
 80026ae:	b2da      	uxtb	r2, r3
 80026b0:	693b      	ldr	r3, [r7, #16]
 80026b2:	1c59      	adds	r1, r3, #1
 80026b4:	6139      	str	r1, [r7, #16]
 80026b6:	3201      	adds	r2, #1
 80026b8:	b2d2      	uxtb	r2, r2
 80026ba:	3318      	adds	r3, #24
 80026bc:	443b      	add	r3, r7
 80026be:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (int)(curr*10);
 80026c2:	f04f 0200 	mov.w	r2, #0
 80026c6:	4b20      	ldr	r3, [pc, #128]	; (8002748 <settingRatedCurrent+0xe0>)
 80026c8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80026cc:	f7fd ff58 	bl	8000580 <__aeabi_dmul>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4610      	mov	r0, r2
 80026d6:	4619      	mov	r1, r3
 80026d8:	f7fe f964 	bl	80009a4 <__aeabi_d2iz>
 80026dc:	4601      	mov	r1, r0
 80026de:	693b      	ldr	r3, [r7, #16]
 80026e0:	1c5a      	adds	r2, r3, #1
 80026e2:	613a      	str	r2, [r7, #16]
 80026e4:	b2ca      	uxtb	r2, r1
 80026e6:	3318      	adds	r3, #24
 80026e8:	443b      	add	r3, r7
 80026ea:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80026ee:	693b      	ldr	r3, [r7, #16]
 80026f0:	1c5a      	adds	r2, r3, #1
 80026f2:	613a      	str	r2, [r7, #16]
 80026f4:	3318      	adds	r3, #24
 80026f6:	443b      	add	r3, r7
 80026f8:	2200      	movs	r2, #0
 80026fa:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	1c5a      	adds	r2, r3, #1
 8002702:	613a      	str	r2, [r7, #16]
 8002704:	3318      	adds	r3, #24
 8002706:	443b      	add	r3, r7
 8002708:	2200      	movs	r2, #0
 800270a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 800270e:	f107 0208 	add.w	r2, r7, #8
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	4413      	add	r3, r2
 8002716:	2200      	movs	r2, #0
 8002718:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 800271a:	f107 0108 	add.w	r1, r7, #8
 800271e:	2300      	movs	r3, #0
 8002720:	2208      	movs	r2, #8
 8002722:	f240 6001 	movw	r0, #1537	; 0x601
 8002726:	f7ff f9a5 	bl	8001a74 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 800272a:	2064      	movs	r0, #100	; 0x64
 800272c:	f000 ff10 	bl	8003550 <HAL_Delay>
    for(int i=0;i<2;i++)
 8002730:	697b      	ldr	r3, [r7, #20]
 8002732:	3301      	adds	r3, #1
 8002734:	617b      	str	r3, [r7, #20]
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	2b01      	cmp	r3, #1
 800273a:	dd9d      	ble.n	8002678 <settingRatedCurrent+0x10>
    }
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	3718      	adds	r7, #24
 8002742:	46bd      	mov	sp, r7
 8002744:	bd80      	pop	{r7, pc}
 8002746:	bf00      	nop
 8002748:	40240000 	.word	0x40240000

0800274c <settingMaxCurrent>:

void settingMaxCurrent(double curr)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b086      	sub	sp, #24
 8002750:	af00      	add	r7, sp, #0
 8002752:	ed87 0b00 	vstr	d0, [r7]
    char buf[8];
    for(int i=0;i<2;i++)
 8002756:	2300      	movs	r3, #0
 8002758:	617b      	str	r3, [r7, #20]
 800275a:	e05e      	b.n	800281a <settingMaxCurrent+0xce>
    {
        int index = 0;
 800275c:	2300      	movs	r3, #0
 800275e:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8002760:	693b      	ldr	r3, [r7, #16]
 8002762:	1c5a      	adds	r2, r3, #1
 8002764:	613a      	str	r2, [r7, #16]
 8002766:	3318      	adds	r3, #24
 8002768:	443b      	add	r3, r7
 800276a:	222b      	movs	r2, #43	; 0x2b
 800276c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x15;
 8002770:	693b      	ldr	r3, [r7, #16]
 8002772:	1c5a      	adds	r2, r3, #1
 8002774:	613a      	str	r2, [r7, #16]
 8002776:	3318      	adds	r3, #24
 8002778:	443b      	add	r3, r7
 800277a:	2215      	movs	r2, #21
 800277c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	1c5a      	adds	r2, r3, #1
 8002784:	613a      	str	r2, [r7, #16]
 8002786:	3318      	adds	r3, #24
 8002788:	443b      	add	r3, r7
 800278a:	2220      	movs	r2, #32
 800278c:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	b2da      	uxtb	r2, r3
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	1c59      	adds	r1, r3, #1
 8002798:	6139      	str	r1, [r7, #16]
 800279a:	3201      	adds	r2, #1
 800279c:	b2d2      	uxtb	r2, r2
 800279e:	3318      	adds	r3, #24
 80027a0:	443b      	add	r3, r7
 80027a2:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (int)(curr*10);
 80027a6:	f04f 0200 	mov.w	r2, #0
 80027aa:	4b20      	ldr	r3, [pc, #128]	; (800282c <settingMaxCurrent+0xe0>)
 80027ac:	e9d7 0100 	ldrd	r0, r1, [r7]
 80027b0:	f7fd fee6 	bl	8000580 <__aeabi_dmul>
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	4610      	mov	r0, r2
 80027ba:	4619      	mov	r1, r3
 80027bc:	f7fe f8f2 	bl	80009a4 <__aeabi_d2iz>
 80027c0:	4601      	mov	r1, r0
 80027c2:	693b      	ldr	r3, [r7, #16]
 80027c4:	1c5a      	adds	r2, r3, #1
 80027c6:	613a      	str	r2, [r7, #16]
 80027c8:	b2ca      	uxtb	r2, r1
 80027ca:	3318      	adds	r3, #24
 80027cc:	443b      	add	r3, r7
 80027ce:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80027d2:	693b      	ldr	r3, [r7, #16]
 80027d4:	1c5a      	adds	r2, r3, #1
 80027d6:	613a      	str	r2, [r7, #16]
 80027d8:	3318      	adds	r3, #24
 80027da:	443b      	add	r3, r7
 80027dc:	2200      	movs	r2, #0
 80027de:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80027e2:	693b      	ldr	r3, [r7, #16]
 80027e4:	1c5a      	adds	r2, r3, #1
 80027e6:	613a      	str	r2, [r7, #16]
 80027e8:	3318      	adds	r3, #24
 80027ea:	443b      	add	r3, r7
 80027ec:	2200      	movs	r2, #0
 80027ee:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 80027f2:	f107 0208 	add.w	r2, r7, #8
 80027f6:	693b      	ldr	r3, [r7, #16]
 80027f8:	4413      	add	r3, r2
 80027fa:	2200      	movs	r2, #0
 80027fc:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80027fe:	f107 0108 	add.w	r1, r7, #8
 8002802:	2300      	movs	r3, #0
 8002804:	2208      	movs	r2, #8
 8002806:	f240 6001 	movw	r0, #1537	; 0x601
 800280a:	f7ff f933 	bl	8001a74 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 800280e:	2064      	movs	r0, #100	; 0x64
 8002810:	f000 fe9e 	bl	8003550 <HAL_Delay>
    for(int i=0;i<2;i++)
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	3301      	adds	r3, #1
 8002818:	617b      	str	r3, [r7, #20]
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	2b01      	cmp	r3, #1
 800281e:	dd9d      	ble.n	800275c <settingMaxCurrent+0x10>
    }
}
 8002820:	bf00      	nop
 8002822:	bf00      	nop
 8002824:	3718      	adds	r7, #24
 8002826:	46bd      	mov	sp, r7
 8002828:	bd80      	pop	{r7, pc}
 800282a:	bf00      	nop
 800282c:	40240000 	.word	0x40240000

08002830 <settingHallOffset>:

void settingHallOffset(int16_t degree)
{
 8002830:	b580      	push	{r7, lr}
 8002832:	b086      	sub	sp, #24
 8002834:	af00      	add	r7, sp, #0
 8002836:	4603      	mov	r3, r0
 8002838:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 800283a:	2300      	movs	r3, #0
 800283c:	617b      	str	r3, [r7, #20]
 800283e:	e055      	b.n	80028ec <settingHallOffset+0xbc>
    {
        int index = 0;
 8002840:	2300      	movs	r3, #0
 8002842:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 8002844:	693b      	ldr	r3, [r7, #16]
 8002846:	1c5a      	adds	r2, r3, #1
 8002848:	613a      	str	r2, [r7, #16]
 800284a:	3318      	adds	r3, #24
 800284c:	443b      	add	r3, r7
 800284e:	222b      	movs	r2, #43	; 0x2b
 8002850:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x11;
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	1c5a      	adds	r2, r3, #1
 8002858:	613a      	str	r2, [r7, #16]
 800285a:	3318      	adds	r3, #24
 800285c:	443b      	add	r3, r7
 800285e:	2211      	movs	r2, #17
 8002860:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8002864:	693b      	ldr	r3, [r7, #16]
 8002866:	1c5a      	adds	r2, r3, #1
 8002868:	613a      	str	r2, [r7, #16]
 800286a:	3318      	adds	r3, #24
 800286c:	443b      	add	r3, r7
 800286e:	2220      	movs	r2, #32
 8002870:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8002874:	697b      	ldr	r3, [r7, #20]
 8002876:	b2da      	uxtb	r2, r3
 8002878:	693b      	ldr	r3, [r7, #16]
 800287a:	1c59      	adds	r1, r3, #1
 800287c:	6139      	str	r1, [r7, #16]
 800287e:	3201      	adds	r2, #1
 8002880:	b2d2      	uxtb	r2, r2
 8002882:	3318      	adds	r3, #24
 8002884:	443b      	add	r3, r7
 8002886:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (degree & 0xff);
 800288a:	693b      	ldr	r3, [r7, #16]
 800288c:	1c5a      	adds	r2, r3, #1
 800288e:	613a      	str	r2, [r7, #16]
 8002890:	88fa      	ldrh	r2, [r7, #6]
 8002892:	b2d2      	uxtb	r2, r2
 8002894:	3318      	adds	r3, #24
 8002896:	443b      	add	r3, r7
 8002898:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (degree>>8) & 0xff;
 800289c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80028a0:	121b      	asrs	r3, r3, #8
 80028a2:	b219      	sxth	r1, r3
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	1c5a      	adds	r2, r3, #1
 80028a8:	613a      	str	r2, [r7, #16]
 80028aa:	b2ca      	uxtb	r2, r1
 80028ac:	3318      	adds	r3, #24
 80028ae:	443b      	add	r3, r7
 80028b0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80028b4:	693b      	ldr	r3, [r7, #16]
 80028b6:	1c5a      	adds	r2, r3, #1
 80028b8:	613a      	str	r2, [r7, #16]
 80028ba:	3318      	adds	r3, #24
 80028bc:	443b      	add	r3, r7
 80028be:	2200      	movs	r2, #0
 80028c0:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 80028c4:	f107 0208 	add.w	r2, r7, #8
 80028c8:	693b      	ldr	r3, [r7, #16]
 80028ca:	4413      	add	r3, r2
 80028cc:	2200      	movs	r2, #0
 80028ce:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 80028d0:	f107 0108 	add.w	r1, r7, #8
 80028d4:	2300      	movs	r3, #0
 80028d6:	2208      	movs	r2, #8
 80028d8:	f240 6001 	movw	r0, #1537	; 0x601
 80028dc:	f7ff f8ca 	bl	8001a74 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 80028e0:	2064      	movs	r0, #100	; 0x64
 80028e2:	f000 fe35 	bl	8003550 <HAL_Delay>
    for(int i=0;i<2;i++)
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	3301      	adds	r3, #1
 80028ea:	617b      	str	r3, [r7, #20]
 80028ec:	697b      	ldr	r3, [r7, #20]
 80028ee:	2b01      	cmp	r3, #1
 80028f0:	dda6      	ble.n	8002840 <settingHallOffset+0x10>
    }
}
 80028f2:	bf00      	nop
 80028f4:	bf00      	nop
 80028f6:	3718      	adds	r7, #24
 80028f8:	46bd      	mov	sp, r7
 80028fa:	bd80      	pop	{r7, pc}

080028fc <save>:

void save()
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b084      	sub	sp, #16
 8002900:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8002902:	2300      	movs	r3, #0
 8002904:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	1c5a      	adds	r2, r3, #1
 800290a:	60fa      	str	r2, [r7, #12]
 800290c:	3310      	adds	r3, #16
 800290e:	443b      	add	r3, r7
 8002910:	222b      	movs	r2, #43	; 0x2b
 8002912:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x10;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	1c5a      	adds	r2, r3, #1
 800291a:	60fa      	str	r2, [r7, #12]
 800291c:	3310      	adds	r3, #16
 800291e:	443b      	add	r3, r7
 8002920:	2210      	movs	r2, #16
 8002922:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x20;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	1c5a      	adds	r2, r3, #1
 800292a:	60fa      	str	r2, [r7, #12]
 800292c:	3310      	adds	r3, #16
 800292e:	443b      	add	r3, r7
 8002930:	2220      	movs	r2, #32
 8002932:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	1c5a      	adds	r2, r3, #1
 800293a:	60fa      	str	r2, [r7, #12]
 800293c:	3310      	adds	r3, #16
 800293e:	443b      	add	r3, r7
 8002940:	2200      	movs	r2, #0
 8002942:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x01;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1c5a      	adds	r2, r3, #1
 800294a:	60fa      	str	r2, [r7, #12]
 800294c:	3310      	adds	r3, #16
 800294e:	443b      	add	r3, r7
 8002950:	2201      	movs	r2, #1
 8002952:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] =  0x00;
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	1c5a      	adds	r2, r3, #1
 800295a:	60fa      	str	r2, [r7, #12]
 800295c:	3310      	adds	r3, #16
 800295e:	443b      	add	r3, r7
 8002960:	2200      	movs	r2, #0
 8002962:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	1c5a      	adds	r2, r3, #1
 800296a:	60fa      	str	r2, [r7, #12]
 800296c:	3310      	adds	r3, #16
 800296e:	443b      	add	r3, r7
 8002970:	2200      	movs	r2, #0
 8002972:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8002976:	1d3a      	adds	r2, r7, #4
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	4413      	add	r3, r2
 800297c:	2200      	movs	r2, #0
 800297e:	701a      	strb	r2, [r3, #0]
    index = 0;
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8002984:	1d39      	adds	r1, r7, #4
 8002986:	2300      	movs	r3, #0
 8002988:	2208      	movs	r2, #8
 800298a:	f240 6001 	movw	r0, #1537	; 0x601
 800298e:	f7ff f871 	bl	8001a74 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8002992:	2064      	movs	r0, #100	; 0x64
 8002994:	f000 fddc 	bl	8003550 <HAL_Delay>
}
 8002998:	bf00      	nop
 800299a:	3710      	adds	r7, #16
 800299c:	46bd      	mov	sp, r7
 800299e:	bd80      	pop	{r7, pc}

080029a0 <startMotor>:



void startMotor()
{
 80029a0:	b580      	push	{r7, lr}
 80029a2:	af00      	add	r7, sp, #0
    enable();
 80029a4:	f000 f806 	bl	80029b4 <enable>
    velocityMode();
 80029a8:	f7ff fc45 	bl	8002236 <velocityMode>
    synchronousMode();
 80029ac:	f7ff fc93 	bl	80022d6 <synchronousMode>
}
 80029b0:	bf00      	nop
 80029b2:	bd80      	pop	{r7, pc}

080029b4 <enable>:

void enable()
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b086      	sub	sp, #24
 80029b8:	af00      	add	r7, sp, #0
    char buf[8];
    char seq[4] = {0x00,0x06,0x07,0x0f};
 80029ba:	4b2f      	ldr	r3, [pc, #188]	; (8002a78 <enable+0xc4>)
 80029bc:	607b      	str	r3, [r7, #4]
    for(int i =0;i<4;i++)
 80029be:	2300      	movs	r3, #0
 80029c0:	617b      	str	r3, [r7, #20]
 80029c2:	e050      	b.n	8002a66 <enable+0xb2>
    {
        int index = 0;
 80029c4:	2300      	movs	r3, #0
 80029c6:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x2b;
 80029c8:	693b      	ldr	r3, [r7, #16]
 80029ca:	1c5a      	adds	r2, r3, #1
 80029cc:	613a      	str	r2, [r7, #16]
 80029ce:	3318      	adds	r3, #24
 80029d0:	443b      	add	r3, r7
 80029d2:	222b      	movs	r2, #43	; 0x2b
 80029d4:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x40;
 80029d8:	693b      	ldr	r3, [r7, #16]
 80029da:	1c5a      	adds	r2, r3, #1
 80029dc:	613a      	str	r2, [r7, #16]
 80029de:	3318      	adds	r3, #24
 80029e0:	443b      	add	r3, r7
 80029e2:	2240      	movs	r2, #64	; 0x40
 80029e4:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x60;
 80029e8:	693b      	ldr	r3, [r7, #16]
 80029ea:	1c5a      	adds	r2, r3, #1
 80029ec:	613a      	str	r2, [r7, #16]
 80029ee:	3318      	adds	r3, #24
 80029f0:	443b      	add	r3, r7
 80029f2:	2260      	movs	r2, #96	; 0x60
 80029f4:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 80029f8:	693b      	ldr	r3, [r7, #16]
 80029fa:	1c5a      	adds	r2, r3, #1
 80029fc:	613a      	str	r2, [r7, #16]
 80029fe:	3318      	adds	r3, #24
 8002a00:	443b      	add	r3, r7
 8002a02:	2200      	movs	r2, #0
 8002a04:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = seq[i];
 8002a08:	693b      	ldr	r3, [r7, #16]
 8002a0a:	1c5a      	adds	r2, r3, #1
 8002a0c:	613a      	str	r2, [r7, #16]
 8002a0e:	1d39      	adds	r1, r7, #4
 8002a10:	697a      	ldr	r2, [r7, #20]
 8002a12:	440a      	add	r2, r1
 8002a14:	7812      	ldrb	r2, [r2, #0]
 8002a16:	3318      	adds	r3, #24
 8002a18:	443b      	add	r3, r7
 8002a1a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8002a1e:	693b      	ldr	r3, [r7, #16]
 8002a20:	1c5a      	adds	r2, r3, #1
 8002a22:	613a      	str	r2, [r7, #16]
 8002a24:	3318      	adds	r3, #24
 8002a26:	443b      	add	r3, r7
 8002a28:	2200      	movs	r2, #0
 8002a2a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	1c5a      	adds	r2, r3, #1
 8002a32:	613a      	str	r2, [r7, #16]
 8002a34:	3318      	adds	r3, #24
 8002a36:	443b      	add	r3, r7
 8002a38:	2200      	movs	r2, #0
 8002a3a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8002a3e:	f107 0208 	add.w	r2, r7, #8
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	4413      	add	r3, r2
 8002a46:	2200      	movs	r2, #0
 8002a48:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8002a4a:	f107 0108 	add.w	r1, r7, #8
 8002a4e:	2300      	movs	r3, #0
 8002a50:	2208      	movs	r2, #8
 8002a52:	f240 6001 	movw	r0, #1537	; 0x601
 8002a56:	f7ff f80d 	bl	8001a74 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8002a5a:	2064      	movs	r0, #100	; 0x64
 8002a5c:	f000 fd78 	bl	8003550 <HAL_Delay>
    for(int i =0;i<4;i++)
 8002a60:	697b      	ldr	r3, [r7, #20]
 8002a62:	3301      	adds	r3, #1
 8002a64:	617b      	str	r3, [r7, #20]
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	ddab      	ble.n	80029c4 <enable+0x10>
    }
}
 8002a6c:	bf00      	nop
 8002a6e:	bf00      	nop
 8002a70:	3718      	adds	r7, #24
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bd80      	pop	{r7, pc}
 8002a76:	bf00      	nop
 8002a78:	0f070600 	.word	0x0f070600

08002a7c <disable>:

void disable()
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b084      	sub	sp, #16
 8002a80:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8002a82:	2300      	movs	r3, #0
 8002a84:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	1c5a      	adds	r2, r3, #1
 8002a8a:	60fa      	str	r2, [r7, #12]
 8002a8c:	3310      	adds	r3, #16
 8002a8e:	443b      	add	r3, r7
 8002a90:	222b      	movs	r2, #43	; 0x2b
 8002a92:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x40;
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	1c5a      	adds	r2, r3, #1
 8002a9a:	60fa      	str	r2, [r7, #12]
 8002a9c:	3310      	adds	r3, #16
 8002a9e:	443b      	add	r3, r7
 8002aa0:	2240      	movs	r2, #64	; 0x40
 8002aa2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	1c5a      	adds	r2, r3, #1
 8002aaa:	60fa      	str	r2, [r7, #12]
 8002aac:	3310      	adds	r3, #16
 8002aae:	443b      	add	r3, r7
 8002ab0:	2260      	movs	r2, #96	; 0x60
 8002ab2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	1c5a      	adds	r2, r3, #1
 8002aba:	60fa      	str	r2, [r7, #12]
 8002abc:	3310      	adds	r3, #16
 8002abe:	443b      	add	r3, r7
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	1c5a      	adds	r2, r3, #1
 8002aca:	60fa      	str	r2, [r7, #12]
 8002acc:	3310      	adds	r3, #16
 8002ace:	443b      	add	r3, r7
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] =  0x00;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	1c5a      	adds	r2, r3, #1
 8002ada:	60fa      	str	r2, [r7, #12]
 8002adc:	3310      	adds	r3, #16
 8002ade:	443b      	add	r3, r7
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	1c5a      	adds	r2, r3, #1
 8002aea:	60fa      	str	r2, [r7, #12]
 8002aec:	3310      	adds	r3, #16
 8002aee:	443b      	add	r3, r7
 8002af0:	2200      	movs	r2, #0
 8002af2:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8002af6:	1d3a      	adds	r2, r7, #4
 8002af8:	68fb      	ldr	r3, [r7, #12]
 8002afa:	4413      	add	r3, r2
 8002afc:	2200      	movs	r2, #0
 8002afe:	701a      	strb	r2, [r3, #0]
    index = 0;
 8002b00:	2300      	movs	r3, #0
 8002b02:	60fb      	str	r3, [r7, #12]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8002b04:	1d39      	adds	r1, r7, #4
 8002b06:	2300      	movs	r3, #0
 8002b08:	2208      	movs	r2, #8
 8002b0a:	f240 6001 	movw	r0, #1537	; 0x601
 8002b0e:	f7fe ffb1 	bl	8001a74 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8002b12:	2064      	movs	r0, #100	; 0x64
 8002b14:	f000 fd1c 	bl	8003550 <HAL_Delay>
}
 8002b18:	bf00      	nop
 8002b1a:	3710      	adds	r7, #16
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	bd80      	pop	{r7, pc}

08002b20 <reset>:

void reset()
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b084      	sub	sp, #16
 8002b24:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8002b26:	2300      	movs	r3, #0
 8002b28:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x2b;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1c5a      	adds	r2, r3, #1
 8002b2e:	60fa      	str	r2, [r7, #12]
 8002b30:	3310      	adds	r3, #16
 8002b32:	443b      	add	r3, r7
 8002b34:	222b      	movs	r2, #43	; 0x2b
 8002b36:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x40;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	1c5a      	adds	r2, r3, #1
 8002b3e:	60fa      	str	r2, [r7, #12]
 8002b40:	3310      	adds	r3, #16
 8002b42:	443b      	add	r3, r7
 8002b44:	2240      	movs	r2, #64	; 0x40
 8002b46:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	1c5a      	adds	r2, r3, #1
 8002b4e:	60fa      	str	r2, [r7, #12]
 8002b50:	3310      	adds	r3, #16
 8002b52:	443b      	add	r3, r7
 8002b54:	2260      	movs	r2, #96	; 0x60
 8002b56:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	1c5a      	adds	r2, r3, #1
 8002b5e:	60fa      	str	r2, [r7, #12]
 8002b60:	3310      	adds	r3, #16
 8002b62:	443b      	add	r3, r7
 8002b64:	2200      	movs	r2, #0
 8002b66:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x80;
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	1c5a      	adds	r2, r3, #1
 8002b6e:	60fa      	str	r2, [r7, #12]
 8002b70:	3310      	adds	r3, #16
 8002b72:	443b      	add	r3, r7
 8002b74:	2280      	movs	r2, #128	; 0x80
 8002b76:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	1c5a      	adds	r2, r3, #1
 8002b7e:	60fa      	str	r2, [r7, #12]
 8002b80:	3310      	adds	r3, #16
 8002b82:	443b      	add	r3, r7
 8002b84:	2200      	movs	r2, #0
 8002b86:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	1c5a      	adds	r2, r3, #1
 8002b8e:	60fa      	str	r2, [r7, #12]
 8002b90:	3310      	adds	r3, #16
 8002b92:	443b      	add	r3, r7
 8002b94:	2200      	movs	r2, #0
 8002b96:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8002b9a:	1d3a      	adds	r2, r7, #4
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8002ba4:	1d39      	adds	r1, r7, #4
 8002ba6:	2300      	movs	r3, #0
 8002ba8:	2208      	movs	r2, #8
 8002baa:	f240 6001 	movw	r0, #1537	; 0x601
 8002bae:	f7fe ff61 	bl	8001a74 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
//    ThisThread::sleep_for(100);
    HAL_Delay(100);
 8002bb2:	2064      	movs	r0, #100	; 0x64
 8002bb4:	f000 fccc 	bl	8003550 <HAL_Delay>
}
 8002bb8:	bf00      	nop
 8002bba:	3710      	adds	r7, #16
 8002bbc:	46bd      	mov	sp, r7
 8002bbe:	bd80      	pop	{r7, pc}

08002bc0 <reqEnc>:

void reqEnc()
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	b084      	sub	sp, #16
 8002bc4:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8002bc6:	2300      	movs	r3, #0
 8002bc8:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x40;
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	1c5a      	adds	r2, r3, #1
 8002bce:	60fa      	str	r2, [r7, #12]
 8002bd0:	3310      	adds	r3, #16
 8002bd2:	443b      	add	r3, r7
 8002bd4:	2240      	movs	r2, #64	; 0x40
 8002bd6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x6c;
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	1c5a      	adds	r2, r3, #1
 8002bde:	60fa      	str	r2, [r7, #12]
 8002be0:	3310      	adds	r3, #16
 8002be2:	443b      	add	r3, r7
 8002be4:	226c      	movs	r2, #108	; 0x6c
 8002be6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	1c5a      	adds	r2, r3, #1
 8002bee:	60fa      	str	r2, [r7, #12]
 8002bf0:	3310      	adds	r3, #16
 8002bf2:	443b      	add	r3, r7
 8002bf4:	2260      	movs	r2, #96	; 0x60
 8002bf6:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 8002bfa:	68fb      	ldr	r3, [r7, #12]
 8002bfc:	1c5a      	adds	r2, r3, #1
 8002bfe:	60fa      	str	r2, [r7, #12]
 8002c00:	3310      	adds	r3, #16
 8002c02:	443b      	add	r3, r7
 8002c04:	2203      	movs	r2, #3
 8002c06:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	1c5a      	adds	r2, r3, #1
 8002c0e:	60fa      	str	r2, [r7, #12]
 8002c10:	3310      	adds	r3, #16
 8002c12:	443b      	add	r3, r7
 8002c14:	2200      	movs	r2, #0
 8002c16:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002c1a:	68fb      	ldr	r3, [r7, #12]
 8002c1c:	1c5a      	adds	r2, r3, #1
 8002c1e:	60fa      	str	r2, [r7, #12]
 8002c20:	3310      	adds	r3, #16
 8002c22:	443b      	add	r3, r7
 8002c24:	2200      	movs	r2, #0
 8002c26:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	1c5a      	adds	r2, r3, #1
 8002c2e:	60fa      	str	r2, [r7, #12]
 8002c30:	3310      	adds	r3, #16
 8002c32:	443b      	add	r3, r7
 8002c34:	2200      	movs	r2, #0
 8002c36:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8002c3a:	1d3a      	adds	r2, r7, #4
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	4413      	add	r3, r2
 8002c40:	2200      	movs	r2, #0
 8002c42:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8002c44:	1d39      	adds	r1, r7, #4
 8002c46:	2300      	movs	r3, #0
 8002c48:	2208      	movs	r2, #8
 8002c4a:	f240 6001 	movw	r0, #1537	; 0x601
 8002c4e:	f7fe ff11 	bl	8001a74 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 8002c52:	bf00      	nop
 8002c54:	3710      	adds	r7, #16
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bd80      	pop	{r7, pc}

08002c5a <reqState>:

void reqState()
{
 8002c5a:	b580      	push	{r7, lr}
 8002c5c:	b084      	sub	sp, #16
 8002c5e:	af00      	add	r7, sp, #0
    char buf[8];
    int index = 0;
 8002c60:	2300      	movs	r3, #0
 8002c62:	60fb      	str	r3, [r7, #12]
    buf[index++] = 0x40;
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	1c5a      	adds	r2, r3, #1
 8002c68:	60fa      	str	r2, [r7, #12]
 8002c6a:	3310      	adds	r3, #16
 8002c6c:	443b      	add	r3, r7
 8002c6e:	2240      	movs	r2, #64	; 0x40
 8002c70:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x3f;
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	1c5a      	adds	r2, r3, #1
 8002c78:	60fa      	str	r2, [r7, #12]
 8002c7a:	3310      	adds	r3, #16
 8002c7c:	443b      	add	r3, r7
 8002c7e:	223f      	movs	r2, #63	; 0x3f
 8002c80:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	1c5a      	adds	r2, r3, #1
 8002c88:	60fa      	str	r2, [r7, #12]
 8002c8a:	3310      	adds	r3, #16
 8002c8c:	443b      	add	r3, r7
 8002c8e:	2260      	movs	r2, #96	; 0x60
 8002c90:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	1c5a      	adds	r2, r3, #1
 8002c98:	60fa      	str	r2, [r7, #12]
 8002c9a:	3310      	adds	r3, #16
 8002c9c:	443b      	add	r3, r7
 8002c9e:	2200      	movs	r2, #0
 8002ca0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	1c5a      	adds	r2, r3, #1
 8002ca8:	60fa      	str	r2, [r7, #12]
 8002caa:	3310      	adds	r3, #16
 8002cac:	443b      	add	r3, r7
 8002cae:	2200      	movs	r2, #0
 8002cb0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	1c5a      	adds	r2, r3, #1
 8002cb8:	60fa      	str	r2, [r7, #12]
 8002cba:	3310      	adds	r3, #16
 8002cbc:	443b      	add	r3, r7
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x00;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	1c5a      	adds	r2, r3, #1
 8002cc8:	60fa      	str	r2, [r7, #12]
 8002cca:	3310      	adds	r3, #16
 8002ccc:	443b      	add	r3, r7
 8002cce:	2200      	movs	r2, #0
 8002cd0:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = 0x00;
 8002cd4:	1d3a      	adds	r2, r7, #4
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	4413      	add	r3, r2
 8002cda:	2200      	movs	r2, #0
 8002cdc:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8002cde:	1d39      	adds	r1, r7, #4
 8002ce0:	2300      	movs	r3, #0
 8002ce2:	2208      	movs	r2, #8
 8002ce4:	f240 6001 	movw	r0, #1537	; 0x601
 8002ce8:	f7fe fec4 	bl	8001a74 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 8002cec:	bf00      	nop
 8002cee:	3710      	adds	r7, #16
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bd80      	pop	{r7, pc}

08002cf4 <control>:

void control(int16_t lrpm,int16_t rrpm)
{
 8002cf4:	b580      	push	{r7, lr}
 8002cf6:	b086      	sub	sp, #24
 8002cf8:	af00      	add	r7, sp, #0
 8002cfa:	4603      	mov	r3, r0
 8002cfc:	460a      	mov	r2, r1
 8002cfe:	80fb      	strh	r3, [r7, #6]
 8002d00:	4613      	mov	r3, r2
 8002d02:	80bb      	strh	r3, [r7, #4]
    lrpm = -1*lrpm;
 8002d04:	88fb      	ldrh	r3, [r7, #6]
 8002d06:	425b      	negs	r3, r3
 8002d08:	b29b      	uxth	r3, r3
 8002d0a:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    int index = 0;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]
    buf[index++] = 0x23;
 8002d10:	697b      	ldr	r3, [r7, #20]
 8002d12:	1c5a      	adds	r2, r3, #1
 8002d14:	617a      	str	r2, [r7, #20]
 8002d16:	3318      	adds	r3, #24
 8002d18:	443b      	add	r3, r7
 8002d1a:	2223      	movs	r2, #35	; 0x23
 8002d1c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0xff;
 8002d20:	697b      	ldr	r3, [r7, #20]
 8002d22:	1c5a      	adds	r2, r3, #1
 8002d24:	617a      	str	r2, [r7, #20]
 8002d26:	3318      	adds	r3, #24
 8002d28:	443b      	add	r3, r7
 8002d2a:	22ff      	movs	r2, #255	; 0xff
 8002d2c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x60;
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	1c5a      	adds	r2, r3, #1
 8002d34:	617a      	str	r2, [r7, #20]
 8002d36:	3318      	adds	r3, #24
 8002d38:	443b      	add	r3, r7
 8002d3a:	2260      	movs	r2, #96	; 0x60
 8002d3c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = 0x03;
 8002d40:	697b      	ldr	r3, [r7, #20]
 8002d42:	1c5a      	adds	r2, r3, #1
 8002d44:	617a      	str	r2, [r7, #20]
 8002d46:	3318      	adds	r3, #24
 8002d48:	443b      	add	r3, r7
 8002d4a:	2203      	movs	r2, #3
 8002d4c:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (lrpm & 0xff);
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	617a      	str	r2, [r7, #20]
 8002d56:	88fa      	ldrh	r2, [r7, #6]
 8002d58:	b2d2      	uxtb	r2, r2
 8002d5a:	3318      	adds	r3, #24
 8002d5c:	443b      	add	r3, r7
 8002d5e:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = (lrpm>>8) & 0xff;
 8002d62:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002d66:	121b      	asrs	r3, r3, #8
 8002d68:	b219      	sxth	r1, r3
 8002d6a:	697b      	ldr	r3, [r7, #20]
 8002d6c:	1c5a      	adds	r2, r3, #1
 8002d6e:	617a      	str	r2, [r7, #20]
 8002d70:	b2ca      	uxtb	r2, r1
 8002d72:	3318      	adds	r3, #24
 8002d74:	443b      	add	r3, r7
 8002d76:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index++] = rrpm & 0xff;
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	1c5a      	adds	r2, r3, #1
 8002d7e:	617a      	str	r2, [r7, #20]
 8002d80:	88ba      	ldrh	r2, [r7, #4]
 8002d82:	b2d2      	uxtb	r2, r2
 8002d84:	3318      	adds	r3, #24
 8002d86:	443b      	add	r3, r7
 8002d88:	f803 2c0c 	strb.w	r2, [r3, #-12]
    buf[index] = (rrpm>>8) & 0xff;
 8002d8c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8002d90:	121b      	asrs	r3, r3, #8
 8002d92:	b21b      	sxth	r3, r3
 8002d94:	b2d9      	uxtb	r1, r3
 8002d96:	f107 020c 	add.w	r2, r7, #12
 8002d9a:	697b      	ldr	r3, [r7, #20]
 8002d9c:	4413      	add	r3, r2
 8002d9e:	460a      	mov	r2, r1
 8002da0:	701a      	strb	r2, [r3, #0]
    sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8002da2:	f107 010c 	add.w	r1, r7, #12
 8002da6:	2300      	movs	r3, #0
 8002da8:	2208      	movs	r2, #8
 8002daa:	f240 6001 	movw	r0, #1537	; 0x601
 8002dae:	f7fe fe61 	bl	8001a74 <sendCan>
//    can->sendMsg(MOTOR114_REQ_ID,buf,false);
}
 8002db2:	bf00      	nop
 8002db4:	3718      	adds	r7, #24
 8002db6:	46bd      	mov	sp, r7
 8002db8:	bd80      	pop	{r7, pc}

08002dba <settingKP>:

void settingKP(int16_t kp)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b086      	sub	sp, #24
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	4603      	mov	r3, r0
 8002dc2:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	617b      	str	r3, [r7, #20]
 8002dc8:	e055      	b.n	8002e76 <settingKP+0xbc>
    {
        int index = 0;
 8002dca:	2300      	movs	r3, #0
 8002dcc:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x1d;
 8002dce:	693b      	ldr	r3, [r7, #16]
 8002dd0:	1c5a      	adds	r2, r3, #1
 8002dd2:	613a      	str	r2, [r7, #16]
 8002dd4:	3318      	adds	r3, #24
 8002dd6:	443b      	add	r3, r7
 8002dd8:	221d      	movs	r2, #29
 8002dda:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	613a      	str	r2, [r7, #16]
 8002de4:	3318      	adds	r3, #24
 8002de6:	443b      	add	r3, r7
 8002de8:	2220      	movs	r2, #32
 8002dea:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	1c5a      	adds	r2, r3, #1
 8002df2:	613a      	str	r2, [r7, #16]
 8002df4:	3318      	adds	r3, #24
 8002df6:	443b      	add	r3, r7
 8002df8:	2220      	movs	r2, #32
 8002dfa:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	b2da      	uxtb	r2, r3
 8002e02:	693b      	ldr	r3, [r7, #16]
 8002e04:	1c59      	adds	r1, r3, #1
 8002e06:	6139      	str	r1, [r7, #16]
 8002e08:	3201      	adds	r2, #1
 8002e0a:	b2d2      	uxtb	r2, r2
 8002e0c:	3318      	adds	r3, #24
 8002e0e:	443b      	add	r3, r7
 8002e10:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (kp & 0xff);
 8002e14:	693b      	ldr	r3, [r7, #16]
 8002e16:	1c5a      	adds	r2, r3, #1
 8002e18:	613a      	str	r2, [r7, #16]
 8002e1a:	88fa      	ldrh	r2, [r7, #6]
 8002e1c:	b2d2      	uxtb	r2, r2
 8002e1e:	3318      	adds	r3, #24
 8002e20:	443b      	add	r3, r7
 8002e22:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (kp>>8) & 0xff;
 8002e26:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002e2a:	121b      	asrs	r3, r3, #8
 8002e2c:	b219      	sxth	r1, r3
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1c5a      	adds	r2, r3, #1
 8002e32:	613a      	str	r2, [r7, #16]
 8002e34:	b2ca      	uxtb	r2, r1
 8002e36:	3318      	adds	r3, #24
 8002e38:	443b      	add	r3, r7
 8002e3a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	1c5a      	adds	r2, r3, #1
 8002e42:	613a      	str	r2, [r7, #16]
 8002e44:	3318      	adds	r3, #24
 8002e46:	443b      	add	r3, r7
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8002e4e:	f107 0208 	add.w	r2, r7, #8
 8002e52:	693b      	ldr	r3, [r7, #16]
 8002e54:	4413      	add	r3, r2
 8002e56:	2200      	movs	r2, #0
 8002e58:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8002e5a:	f107 0108 	add.w	r1, r7, #8
 8002e5e:	2300      	movs	r3, #0
 8002e60:	2208      	movs	r2, #8
 8002e62:	f240 6001 	movw	r0, #1537	; 0x601
 8002e66:	f7fe fe05 	bl	8001a74 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(1c0);
        HAL_Delay(100);
 8002e6a:	2064      	movs	r0, #100	; 0x64
 8002e6c:	f000 fb70 	bl	8003550 <HAL_Delay>
    for(int i=0;i<2;i++)
 8002e70:	697b      	ldr	r3, [r7, #20]
 8002e72:	3301      	adds	r3, #1
 8002e74:	617b      	str	r3, [r7, #20]
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	2b01      	cmp	r3, #1
 8002e7a:	dda6      	ble.n	8002dca <settingKP+0x10>
    }
}
 8002e7c:	bf00      	nop
 8002e7e:	bf00      	nop
 8002e80:	3718      	adds	r7, #24
 8002e82:	46bd      	mov	sp, r7
 8002e84:	bd80      	pop	{r7, pc}

08002e86 <settingKI>:

void settingKI(int16_t ki)
{
 8002e86:	b580      	push	{r7, lr}
 8002e88:	b086      	sub	sp, #24
 8002e8a:	af00      	add	r7, sp, #0
 8002e8c:	4603      	mov	r3, r0
 8002e8e:	80fb      	strh	r3, [r7, #6]
    char buf[8];
    for(int i=0;i<2;i++)
 8002e90:	2300      	movs	r3, #0
 8002e92:	617b      	str	r3, [r7, #20]
 8002e94:	e055      	b.n	8002f42 <settingKI+0xbc>
    {
        int index = 0;
 8002e96:	2300      	movs	r3, #0
 8002e98:	613b      	str	r3, [r7, #16]
        buf[index++] = 0x1e;
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	1c5a      	adds	r2, r3, #1
 8002e9e:	613a      	str	r2, [r7, #16]
 8002ea0:	3318      	adds	r3, #24
 8002ea2:	443b      	add	r3, r7
 8002ea4:	221e      	movs	r2, #30
 8002ea6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	1c5a      	adds	r2, r3, #1
 8002eae:	613a      	str	r2, [r7, #16]
 8002eb0:	3318      	adds	r3, #24
 8002eb2:	443b      	add	r3, r7
 8002eb4:	2220      	movs	r2, #32
 8002eb6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x20;
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1c5a      	adds	r2, r3, #1
 8002ebe:	613a      	str	r2, [r7, #16]
 8002ec0:	3318      	adds	r3, #24
 8002ec2:	443b      	add	r3, r7
 8002ec4:	2220      	movs	r2, #32
 8002ec6:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = i+1;
 8002eca:	697b      	ldr	r3, [r7, #20]
 8002ecc:	b2da      	uxtb	r2, r3
 8002ece:	693b      	ldr	r3, [r7, #16]
 8002ed0:	1c59      	adds	r1, r3, #1
 8002ed2:	6139      	str	r1, [r7, #16]
 8002ed4:	3201      	adds	r2, #1
 8002ed6:	b2d2      	uxtb	r2, r2
 8002ed8:	3318      	adds	r3, #24
 8002eda:	443b      	add	r3, r7
 8002edc:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (ki & 0xff);
 8002ee0:	693b      	ldr	r3, [r7, #16]
 8002ee2:	1c5a      	adds	r2, r3, #1
 8002ee4:	613a      	str	r2, [r7, #16]
 8002ee6:	88fa      	ldrh	r2, [r7, #6]
 8002ee8:	b2d2      	uxtb	r2, r2
 8002eea:	3318      	adds	r3, #24
 8002eec:	443b      	add	r3, r7
 8002eee:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = (ki>>8) & 0xff;
 8002ef2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ef6:	121b      	asrs	r3, r3, #8
 8002ef8:	b219      	sxth	r1, r3
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	1c5a      	adds	r2, r3, #1
 8002efe:	613a      	str	r2, [r7, #16]
 8002f00:	b2ca      	uxtb	r2, r1
 8002f02:	3318      	adds	r3, #24
 8002f04:	443b      	add	r3, r7
 8002f06:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index++] = 0x00;
 8002f0a:	693b      	ldr	r3, [r7, #16]
 8002f0c:	1c5a      	adds	r2, r3, #1
 8002f0e:	613a      	str	r2, [r7, #16]
 8002f10:	3318      	adds	r3, #24
 8002f12:	443b      	add	r3, r7
 8002f14:	2200      	movs	r2, #0
 8002f16:	f803 2c10 	strb.w	r2, [r3, #-16]
        buf[index] = 0x00;
 8002f1a:	f107 0208 	add.w	r2, r7, #8
 8002f1e:	693b      	ldr	r3, [r7, #16]
 8002f20:	4413      	add	r3, r2
 8002f22:	2200      	movs	r2, #0
 8002f24:	701a      	strb	r2, [r3, #0]
        sendCan(MOTOR114_REQ_ID, buf, 8, 0);
 8002f26:	f107 0108 	add.w	r1, r7, #8
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	2208      	movs	r2, #8
 8002f2e:	f240 6001 	movw	r0, #1537	; 0x601
 8002f32:	f7fe fd9f 	bl	8001a74 <sendCan>
//        can->sendMsg(MOTOR114_REQ_ID,buf,false);
//        ThisThread::sleep_for(100);
        HAL_Delay(100);
 8002f36:	2064      	movs	r0, #100	; 0x64
 8002f38:	f000 fb0a 	bl	8003550 <HAL_Delay>
    for(int i=0;i<2;i++)
 8002f3c:	697b      	ldr	r3, [r7, #20]
 8002f3e:	3301      	adds	r3, #1
 8002f40:	617b      	str	r3, [r7, #20]
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	dda6      	ble.n	8002e96 <settingKI+0x10>
    }
}
 8002f48:	bf00      	nop
 8002f4a:	bf00      	nop
 8002f4c:	3718      	adds	r7, #24
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	0000      	movs	r0, r0
 8002f54:	0000      	movs	r0, r0
	...

08002f58 <settingMotor>:
void settingMotor()
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
    settingEnc(ENC_RESOLUTION);
 8002f5c:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8002f60:	f7ff fa09 	bl	8002376 <settingEnc>
    settingPole(POLE_PAIR);
 8002f64:	200a      	movs	r0, #10
 8002f66:	f7ff fa6c 	bl	8002442 <settingPole>
    settingBreak(BREAK_OPTION);
 8002f6a:	2001      	movs	r0, #1
 8002f6c:	f7ff facf 	bl	800250e <settingBreak>
    settingMaxRPM(MAX_RPM);
 8002f70:	20c8      	movs	r0, #200	; 0xc8
 8002f72:	f7ff fb20 	bl	80025b6 <settingMaxRPM>
    settingRatedCurrent(RATED_CURRENT);
 8002f76:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8002fa8 <settingMotor+0x50>
 8002f7a:	f7ff fb75 	bl	8002668 <settingRatedCurrent>
    settingMaxCurrent(MAX_CURRENT);
 8002f7e:	ed9f 0b0c 	vldr	d0, [pc, #48]	; 8002fb0 <settingMotor+0x58>
 8002f82:	f7ff fbe3 	bl	800274c <settingMaxCurrent>
    settingHallOffset(HALL_OFFSET);
 8002f86:	20f0      	movs	r0, #240	; 0xf0
 8002f88:	f7ff fc52 	bl	8002830 <settingHallOffset>
    settingKP(KP_GAIN);
 8002f8c:	f240 2026 	movw	r0, #550	; 0x226
 8002f90:	f7ff ff13 	bl	8002dba <settingKP>
    settingKI(KI_GAIN);
 8002f94:	206e      	movs	r0, #110	; 0x6e
 8002f96:	f7ff ff76 	bl	8002e86 <settingKI>
    save();
 8002f9a:	f7ff fcaf 	bl	80028fc <save>
}
 8002f9e:	bf00      	nop
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	f3af 8000 	nop.w
 8002fa8:	00000000 	.word	0x00000000
 8002fac:	40200000 	.word	0x40200000
 8002fb0:	00000000 	.word	0x00000000
 8002fb4:	40300000 	.word	0x40300000

08002fb8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002fb8:	b480      	push	{r7}
 8002fba:	b083      	sub	sp, #12
 8002fbc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8002fbe:	4b0f      	ldr	r3, [pc, #60]	; (8002ffc <HAL_MspInit+0x44>)
 8002fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc2:	4a0e      	ldr	r2, [pc, #56]	; (8002ffc <HAL_MspInit+0x44>)
 8002fc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fca:	4b0c      	ldr	r3, [pc, #48]	; (8002ffc <HAL_MspInit+0x44>)
 8002fcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fd2:	607b      	str	r3, [r7, #4]
 8002fd4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fd6:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <HAL_MspInit+0x44>)
 8002fd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fda:	4a08      	ldr	r2, [pc, #32]	; (8002ffc <HAL_MspInit+0x44>)
 8002fdc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002fe0:	6453      	str	r3, [r2, #68]	; 0x44
 8002fe2:	4b06      	ldr	r3, [pc, #24]	; (8002ffc <HAL_MspInit+0x44>)
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fe6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fea:	603b      	str	r3, [r7, #0]
 8002fec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fee:	bf00      	nop
 8002ff0:	370c      	adds	r7, #12
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ff8:	4770      	bx	lr
 8002ffa:	bf00      	nop
 8002ffc:	40023800 	.word	0x40023800

08003000 <HAL_CAN_MspInit>:
* This function configures the hardware resources used in this example
* @param hcan: CAN handle pointer
* @retval None
*/
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b08a      	sub	sp, #40	; 0x28
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003008:	f107 0314 	add.w	r3, r7, #20
 800300c:	2200      	movs	r2, #0
 800300e:	601a      	str	r2, [r3, #0]
 8003010:	605a      	str	r2, [r3, #4]
 8003012:	609a      	str	r2, [r3, #8]
 8003014:	60da      	str	r2, [r3, #12]
 8003016:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	4a1b      	ldr	r2, [pc, #108]	; (800308c <HAL_CAN_MspInit+0x8c>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d12f      	bne.n	8003082 <HAL_CAN_MspInit+0x82>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CAN1_CLK_ENABLE();
 8003022:	4b1b      	ldr	r3, [pc, #108]	; (8003090 <HAL_CAN_MspInit+0x90>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	4a1a      	ldr	r2, [pc, #104]	; (8003090 <HAL_CAN_MspInit+0x90>)
 8003028:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800302c:	6413      	str	r3, [r2, #64]	; 0x40
 800302e:	4b18      	ldr	r3, [pc, #96]	; (8003090 <HAL_CAN_MspInit+0x90>)
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003036:	613b      	str	r3, [r7, #16]
 8003038:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 800303a:	4b15      	ldr	r3, [pc, #84]	; (8003090 <HAL_CAN_MspInit+0x90>)
 800303c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303e:	4a14      	ldr	r2, [pc, #80]	; (8003090 <HAL_CAN_MspInit+0x90>)
 8003040:	f043 0308 	orr.w	r3, r3, #8
 8003044:	6313      	str	r3, [r2, #48]	; 0x30
 8003046:	4b12      	ldr	r3, [pc, #72]	; (8003090 <HAL_CAN_MspInit+0x90>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	f003 0308 	and.w	r3, r3, #8
 800304e:	60fb      	str	r3, [r7, #12]
 8003050:	68fb      	ldr	r3, [r7, #12]
    /**CAN1 GPIO Configuration
    PD0     ------> CAN1_RX
    PD1     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003052:	2303      	movs	r3, #3
 8003054:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003056:	2302      	movs	r3, #2
 8003058:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800305a:	2300      	movs	r3, #0
 800305c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800305e:	2303      	movs	r3, #3
 8003060:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8003062:	2309      	movs	r3, #9
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003066:	f107 0314 	add.w	r3, r7, #20
 800306a:	4619      	mov	r1, r3
 800306c:	4809      	ldr	r0, [pc, #36]	; (8003094 <HAL_CAN_MspInit+0x94>)
 800306e:	f001 facf 	bl	8004610 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 0, 0);
 8003072:	2200      	movs	r2, #0
 8003074:	2100      	movs	r1, #0
 8003076:	2014      	movs	r0, #20
 8003078:	f001 fa01 	bl	800447e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 800307c:	2014      	movs	r0, #20
 800307e:	f001 fa1a 	bl	80044b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN CAN1_MspInit 1 */

  /* USER CODE END CAN1_MspInit 1 */
  }

}
 8003082:	bf00      	nop
 8003084:	3728      	adds	r7, #40	; 0x28
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40006400 	.word	0x40006400
 8003090:	40023800 	.word	0x40023800
 8003094:	40020c00 	.word	0x40020c00

08003098 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003098:	b580      	push	{r7, lr}
 800309a:	b086      	sub	sp, #24
 800309c:	af00      	add	r7, sp, #0
 800309e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030a8:	d10c      	bne.n	80030c4 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80030aa:	4b2f      	ldr	r3, [pc, #188]	; (8003168 <HAL_TIM_Base_MspInit+0xd0>)
 80030ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ae:	4a2e      	ldr	r2, [pc, #184]	; (8003168 <HAL_TIM_Base_MspInit+0xd0>)
 80030b0:	f043 0301 	orr.w	r3, r3, #1
 80030b4:	6413      	str	r3, [r2, #64]	; 0x40
 80030b6:	4b2c      	ldr	r3, [pc, #176]	; (8003168 <HAL_TIM_Base_MspInit+0xd0>)
 80030b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030ba:	f003 0301 	and.w	r3, r3, #1
 80030be:	617b      	str	r3, [r7, #20]
 80030c0:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM7_MspInit 1 */

  /* USER CODE END TIM7_MspInit 1 */
  }

}
 80030c2:	e04c      	b.n	800315e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM5)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4a28      	ldr	r2, [pc, #160]	; (800316c <HAL_TIM_Base_MspInit+0xd4>)
 80030ca:	4293      	cmp	r3, r2
 80030cc:	d114      	bne.n	80030f8 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80030ce:	4b26      	ldr	r3, [pc, #152]	; (8003168 <HAL_TIM_Base_MspInit+0xd0>)
 80030d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030d2:	4a25      	ldr	r2, [pc, #148]	; (8003168 <HAL_TIM_Base_MspInit+0xd0>)
 80030d4:	f043 0308 	orr.w	r3, r3, #8
 80030d8:	6413      	str	r3, [r2, #64]	; 0x40
 80030da:	4b23      	ldr	r3, [pc, #140]	; (8003168 <HAL_TIM_Base_MspInit+0xd0>)
 80030dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030de:	f003 0308 	and.w	r3, r3, #8
 80030e2:	613b      	str	r3, [r7, #16]
 80030e4:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80030e6:	2200      	movs	r2, #0
 80030e8:	2100      	movs	r1, #0
 80030ea:	2032      	movs	r0, #50	; 0x32
 80030ec:	f001 f9c7 	bl	800447e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80030f0:	2032      	movs	r0, #50	; 0x32
 80030f2:	f001 f9e0 	bl	80044b6 <HAL_NVIC_EnableIRQ>
}
 80030f6:	e032      	b.n	800315e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM6)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	4a1c      	ldr	r2, [pc, #112]	; (8003170 <HAL_TIM_Base_MspInit+0xd8>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d114      	bne.n	800312c <HAL_TIM_Base_MspInit+0x94>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8003102:	4b19      	ldr	r3, [pc, #100]	; (8003168 <HAL_TIM_Base_MspInit+0xd0>)
 8003104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003106:	4a18      	ldr	r2, [pc, #96]	; (8003168 <HAL_TIM_Base_MspInit+0xd0>)
 8003108:	f043 0310 	orr.w	r3, r3, #16
 800310c:	6413      	str	r3, [r2, #64]	; 0x40
 800310e:	4b16      	ldr	r3, [pc, #88]	; (8003168 <HAL_TIM_Base_MspInit+0xd0>)
 8003110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003112:	f003 0310 	and.w	r3, r3, #16
 8003116:	60fb      	str	r3, [r7, #12]
 8003118:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800311a:	2200      	movs	r2, #0
 800311c:	2100      	movs	r1, #0
 800311e:	2036      	movs	r0, #54	; 0x36
 8003120:	f001 f9ad 	bl	800447e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003124:	2036      	movs	r0, #54	; 0x36
 8003126:	f001 f9c6 	bl	80044b6 <HAL_NVIC_EnableIRQ>
}
 800312a:	e018      	b.n	800315e <HAL_TIM_Base_MspInit+0xc6>
  else if(htim_base->Instance==TIM7)
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	4a10      	ldr	r2, [pc, #64]	; (8003174 <HAL_TIM_Base_MspInit+0xdc>)
 8003132:	4293      	cmp	r3, r2
 8003134:	d113      	bne.n	800315e <HAL_TIM_Base_MspInit+0xc6>
    __HAL_RCC_TIM7_CLK_ENABLE();
 8003136:	4b0c      	ldr	r3, [pc, #48]	; (8003168 <HAL_TIM_Base_MspInit+0xd0>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	4a0b      	ldr	r2, [pc, #44]	; (8003168 <HAL_TIM_Base_MspInit+0xd0>)
 800313c:	f043 0320 	orr.w	r3, r3, #32
 8003140:	6413      	str	r3, [r2, #64]	; 0x40
 8003142:	4b09      	ldr	r3, [pc, #36]	; (8003168 <HAL_TIM_Base_MspInit+0xd0>)
 8003144:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003146:	f003 0320 	and.w	r3, r3, #32
 800314a:	60bb      	str	r3, [r7, #8]
 800314c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM7_IRQn, 0, 0);
 800314e:	2200      	movs	r2, #0
 8003150:	2100      	movs	r1, #0
 8003152:	2037      	movs	r0, #55	; 0x37
 8003154:	f001 f993 	bl	800447e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM7_IRQn);
 8003158:	2037      	movs	r0, #55	; 0x37
 800315a:	f001 f9ac 	bl	80044b6 <HAL_NVIC_EnableIRQ>
}
 800315e:	bf00      	nop
 8003160:	3718      	adds	r7, #24
 8003162:	46bd      	mov	sp, r7
 8003164:	bd80      	pop	{r7, pc}
 8003166:	bf00      	nop
 8003168:	40023800 	.word	0x40023800
 800316c:	40000c00 	.word	0x40000c00
 8003170:	40001000 	.word	0x40001000
 8003174:	40001400 	.word	0x40001400

08003178 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003180:	f107 030c 	add.w	r3, r7, #12
 8003184:	2200      	movs	r2, #0
 8003186:	601a      	str	r2, [r3, #0]
 8003188:	605a      	str	r2, [r3, #4]
 800318a:	609a      	str	r2, [r3, #8]
 800318c:	60da      	str	r2, [r3, #12]
 800318e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003198:	d11b      	bne.n	80031d2 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800319a:	4b10      	ldr	r3, [pc, #64]	; (80031dc <HAL_TIM_MspPostInit+0x64>)
 800319c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319e:	4a0f      	ldr	r2, [pc, #60]	; (80031dc <HAL_TIM_MspPostInit+0x64>)
 80031a0:	f043 0301 	orr.w	r3, r3, #1
 80031a4:	6313      	str	r3, [r2, #48]	; 0x30
 80031a6:	4b0d      	ldr	r3, [pc, #52]	; (80031dc <HAL_TIM_MspPostInit+0x64>)
 80031a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80031aa:	f003 0301 	and.w	r3, r3, #1
 80031ae:	60bb      	str	r3, [r7, #8]
 80031b0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80031b2:	2320      	movs	r3, #32
 80031b4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031b6:	2302      	movs	r3, #2
 80031b8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031ba:	2300      	movs	r3, #0
 80031bc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80031be:	2300      	movs	r3, #0
 80031c0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80031c2:	2301      	movs	r3, #1
 80031c4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031c6:	f107 030c 	add.w	r3, r7, #12
 80031ca:	4619      	mov	r1, r3
 80031cc:	4804      	ldr	r0, [pc, #16]	; (80031e0 <HAL_TIM_MspPostInit+0x68>)
 80031ce:	f001 fa1f 	bl	8004610 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80031d2:	bf00      	nop
 80031d4:	3720      	adds	r7, #32
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40023800 	.word	0x40023800
 80031e0:	40020000 	.word	0x40020000

080031e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80031e4:	b580      	push	{r7, lr}
 80031e6:	b0ac      	sub	sp, #176	; 0xb0
 80031e8:	af00      	add	r7, sp, #0
 80031ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80031ec:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80031f0:	2200      	movs	r2, #0
 80031f2:	601a      	str	r2, [r3, #0]
 80031f4:	605a      	str	r2, [r3, #4]
 80031f6:	609a      	str	r2, [r3, #8]
 80031f8:	60da      	str	r2, [r3, #12]
 80031fa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80031fc:	f107 0318 	add.w	r3, r7, #24
 8003200:	2284      	movs	r2, #132	; 0x84
 8003202:	2100      	movs	r1, #0
 8003204:	4618      	mov	r0, r3
 8003206:	f004 fd9b 	bl	8007d40 <memset>
  if(huart->Instance==UART8)
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	4a46      	ldr	r2, [pc, #280]	; (8003328 <HAL_UART_MspInit+0x144>)
 8003210:	4293      	cmp	r3, r2
 8003212:	d144      	bne.n	800329e <HAL_UART_MspInit+0xba>

  /* USER CODE END UART8_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8003214:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003218:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 800321a:	2300      	movs	r3, #0
 800321c:	67bb      	str	r3, [r7, #120]	; 0x78
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800321e:	f107 0318 	add.w	r3, r7, #24
 8003222:	4618      	mov	r0, r3
 8003224:	f002 f906 	bl	8005434 <HAL_RCCEx_PeriphCLKConfig>
 8003228:	4603      	mov	r3, r0
 800322a:	2b00      	cmp	r3, #0
 800322c:	d001      	beq.n	8003232 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800322e:	f7fe fffd 	bl	800222c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_UART8_CLK_ENABLE();
 8003232:	4b3e      	ldr	r3, [pc, #248]	; (800332c <HAL_UART_MspInit+0x148>)
 8003234:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003236:	4a3d      	ldr	r2, [pc, #244]	; (800332c <HAL_UART_MspInit+0x148>)
 8003238:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800323c:	6413      	str	r3, [r2, #64]	; 0x40
 800323e:	4b3b      	ldr	r3, [pc, #236]	; (800332c <HAL_UART_MspInit+0x148>)
 8003240:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003242:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003246:	617b      	str	r3, [r7, #20]
 8003248:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800324a:	4b38      	ldr	r3, [pc, #224]	; (800332c <HAL_UART_MspInit+0x148>)
 800324c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800324e:	4a37      	ldr	r2, [pc, #220]	; (800332c <HAL_UART_MspInit+0x148>)
 8003250:	f043 0310 	orr.w	r3, r3, #16
 8003254:	6313      	str	r3, [r2, #48]	; 0x30
 8003256:	4b35      	ldr	r3, [pc, #212]	; (800332c <HAL_UART_MspInit+0x148>)
 8003258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800325a:	f003 0310 	and.w	r3, r3, #16
 800325e:	613b      	str	r3, [r7, #16]
 8003260:	693b      	ldr	r3, [r7, #16]
    /**UART8 GPIO Configuration
    PE0     ------> UART8_RX
    PE1     ------> UART8_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8003262:	2303      	movs	r3, #3
 8003264:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003268:	2302      	movs	r3, #2
 800326a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800326e:	2300      	movs	r3, #0
 8003270:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003274:	2303      	movs	r3, #3
 8003276:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 800327a:	2308      	movs	r3, #8
 800327c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003280:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003284:	4619      	mov	r1, r3
 8003286:	482a      	ldr	r0, [pc, #168]	; (8003330 <HAL_UART_MspInit+0x14c>)
 8003288:	f001 f9c2 	bl	8004610 <HAL_GPIO_Init>

    /* UART8 interrupt Init */
    HAL_NVIC_SetPriority(UART8_IRQn, 0, 0);
 800328c:	2200      	movs	r2, #0
 800328e:	2100      	movs	r1, #0
 8003290:	2053      	movs	r0, #83	; 0x53
 8003292:	f001 f8f4 	bl	800447e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8003296:	2053      	movs	r0, #83	; 0x53
 8003298:	f001 f90d 	bl	80044b6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800329c:	e03f      	b.n	800331e <HAL_UART_MspInit+0x13a>
  else if(huart->Instance==USART1)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a24      	ldr	r2, [pc, #144]	; (8003334 <HAL_UART_MspInit+0x150>)
 80032a4:	4293      	cmp	r3, r2
 80032a6:	d13a      	bne.n	800331e <HAL_UART_MspInit+0x13a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 80032a8:	2340      	movs	r3, #64	; 0x40
 80032aa:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 80032ac:	2300      	movs	r3, #0
 80032ae:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80032b0:	f107 0318 	add.w	r3, r7, #24
 80032b4:	4618      	mov	r0, r3
 80032b6:	f002 f8bd 	bl	8005434 <HAL_RCCEx_PeriphCLKConfig>
 80032ba:	4603      	mov	r3, r0
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d001      	beq.n	80032c4 <HAL_UART_MspInit+0xe0>
      Error_Handler();
 80032c0:	f7fe ffb4 	bl	800222c <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 80032c4:	4b19      	ldr	r3, [pc, #100]	; (800332c <HAL_UART_MspInit+0x148>)
 80032c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032c8:	4a18      	ldr	r2, [pc, #96]	; (800332c <HAL_UART_MspInit+0x148>)
 80032ca:	f043 0310 	orr.w	r3, r3, #16
 80032ce:	6453      	str	r3, [r2, #68]	; 0x44
 80032d0:	4b16      	ldr	r3, [pc, #88]	; (800332c <HAL_UART_MspInit+0x148>)
 80032d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80032d4:	f003 0310 	and.w	r3, r3, #16
 80032d8:	60fb      	str	r3, [r7, #12]
 80032da:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80032dc:	4b13      	ldr	r3, [pc, #76]	; (800332c <HAL_UART_MspInit+0x148>)
 80032de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032e0:	4a12      	ldr	r2, [pc, #72]	; (800332c <HAL_UART_MspInit+0x148>)
 80032e2:	f043 0302 	orr.w	r3, r3, #2
 80032e6:	6313      	str	r3, [r2, #48]	; 0x30
 80032e8:	4b10      	ldr	r3, [pc, #64]	; (800332c <HAL_UART_MspInit+0x148>)
 80032ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ec:	f003 0302 	and.w	r3, r3, #2
 80032f0:	60bb      	str	r3, [r7, #8]
 80032f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80032f4:	23c0      	movs	r3, #192	; 0xc0
 80032f6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032fa:	2302      	movs	r3, #2
 80032fc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003300:	2300      	movs	r3, #0
 8003302:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003306:	2303      	movs	r3, #3
 8003308:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800330c:	2307      	movs	r3, #7
 800330e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003312:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003316:	4619      	mov	r1, r3
 8003318:	4807      	ldr	r0, [pc, #28]	; (8003338 <HAL_UART_MspInit+0x154>)
 800331a:	f001 f979 	bl	8004610 <HAL_GPIO_Init>
}
 800331e:	bf00      	nop
 8003320:	37b0      	adds	r7, #176	; 0xb0
 8003322:	46bd      	mov	sp, r7
 8003324:	bd80      	pop	{r7, pc}
 8003326:	bf00      	nop
 8003328:	40007c00 	.word	0x40007c00
 800332c:	40023800 	.word	0x40023800
 8003330:	40021000 	.word	0x40021000
 8003334:	40011000 	.word	0x40011000
 8003338:	40020400 	.word	0x40020400

0800333c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800333c:	b480      	push	{r7}
 800333e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003340:	e7fe      	b.n	8003340 <NMI_Handler+0x4>

08003342 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003342:	b480      	push	{r7}
 8003344:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003346:	e7fe      	b.n	8003346 <HardFault_Handler+0x4>

08003348 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003348:	b480      	push	{r7}
 800334a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800334c:	e7fe      	b.n	800334c <MemManage_Handler+0x4>

0800334e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800334e:	b480      	push	{r7}
 8003350:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003352:	e7fe      	b.n	8003352 <BusFault_Handler+0x4>

08003354 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003354:	b480      	push	{r7}
 8003356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003358:	e7fe      	b.n	8003358 <UsageFault_Handler+0x4>

0800335a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800335a:	b480      	push	{r7}
 800335c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800335e:	bf00      	nop
 8003360:	46bd      	mov	sp, r7
 8003362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003366:	4770      	bx	lr

08003368 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003368:	b480      	push	{r7}
 800336a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800336c:	bf00      	nop
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr

08003376 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003376:	b480      	push	{r7}
 8003378:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800337a:	bf00      	nop
 800337c:	46bd      	mov	sp, r7
 800337e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003382:	4770      	bx	lr

08003384 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003388:	f000 f8c2 	bl	8003510 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800338c:	bf00      	nop
 800338e:	bd80      	pop	{r7, pc}

08003390 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8003390:	b580      	push	{r7, lr}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8003394:	4802      	ldr	r0, [pc, #8]	; (80033a0 <CAN1_RX0_IRQHandler+0x10>)
 8003396:	f000 fd67 	bl	8003e68 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800339a:	bf00      	nop
 800339c:	bd80      	pop	{r7, pc}
 800339e:	bf00      	nop
 80033a0:	200000dc 	.word	0x200000dc

080033a4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80033a4:	b580      	push	{r7, lr}
 80033a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USS_Data1_Pin);
 80033a8:	2040      	movs	r0, #64	; 0x40
 80033aa:	f001 fb11 	bl	80049d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80033ae:	2080      	movs	r0, #128	; 0x80
 80033b0:	f001 fb0e 	bl	80049d0 <HAL_GPIO_EXTI_IRQHandler>
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_9);
 80033b4:	f44f 7000 	mov.w	r0, #512	; 0x200
 80033b8:	f001 fb0a 	bl	80049d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80033bc:	bf00      	nop
 80033be:	bd80      	pop	{r7, pc}

080033c0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80033c0:	b580      	push	{r7, lr}
 80033c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_11);
 80033c4:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80033c8:	f001 fb02 	bl	80049d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80033cc:	bf00      	nop
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80033d4:	4802      	ldr	r0, [pc, #8]	; (80033e0 <TIM5_IRQHandler+0x10>)
 80033d6:	f002 fd4e 	bl	8005e76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80033da:	bf00      	nop
 80033dc:	bd80      	pop	{r7, pc}
 80033de:	bf00      	nop
 80033e0:	20000150 	.word	0x20000150

080033e4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80033e8:	4802      	ldr	r0, [pc, #8]	; (80033f4 <TIM6_DAC_IRQHandler+0x10>)
 80033ea:	f002 fd44 	bl	8005e76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80033ee:	bf00      	nop
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	2000019c 	.word	0x2000019c

080033f8 <TIM7_IRQHandler>:

/**
  * @brief This function handles TIM7 global interrupt.
  */
void TIM7_IRQHandler(void)
{
 80033f8:	b580      	push	{r7, lr}
 80033fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM7_IRQn 0 */

  /* USER CODE END TIM7_IRQn 0 */
  HAL_TIM_IRQHandler(&htim7);
 80033fc:	4802      	ldr	r0, [pc, #8]	; (8003408 <TIM7_IRQHandler+0x10>)
 80033fe:	f002 fd3a 	bl	8005e76 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM7_IRQn 1 */

  /* USER CODE END TIM7_IRQn 1 */
}
 8003402:	bf00      	nop
 8003404:	bd80      	pop	{r7, pc}
 8003406:	bf00      	nop
 8003408:	200001e8 	.word	0x200001e8

0800340c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800340c:	b580      	push	{r7, lr}
 800340e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8003410:	4802      	ldr	r0, [pc, #8]	; (800341c <UART8_IRQHandler+0x10>)
 8003412:	f003 fce7 	bl	8006de4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8003416:	bf00      	nop
 8003418:	bd80      	pop	{r7, pc}
 800341a:	bf00      	nop
 800341c:	20000234 	.word	0x20000234

08003420 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003420:	b480      	push	{r7}
 8003422:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003424:	4b06      	ldr	r3, [pc, #24]	; (8003440 <SystemInit+0x20>)
 8003426:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800342a:	4a05      	ldr	r2, [pc, #20]	; (8003440 <SystemInit+0x20>)
 800342c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003430:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003434:	bf00      	nop
 8003436:	46bd      	mov	sp, r7
 8003438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800343c:	4770      	bx	lr
 800343e:	bf00      	nop
 8003440:	e000ed00 	.word	0xe000ed00

08003444 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8003444:	f8df d034 	ldr.w	sp, [pc, #52]	; 800347c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003448:	480d      	ldr	r0, [pc, #52]	; (8003480 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800344a:	490e      	ldr	r1, [pc, #56]	; (8003484 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800344c:	4a0e      	ldr	r2, [pc, #56]	; (8003488 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800344e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003450:	e002      	b.n	8003458 <LoopCopyDataInit>

08003452 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003452:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003454:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003456:	3304      	adds	r3, #4

08003458 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003458:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800345a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800345c:	d3f9      	bcc.n	8003452 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800345e:	4a0b      	ldr	r2, [pc, #44]	; (800348c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003460:	4c0b      	ldr	r4, [pc, #44]	; (8003490 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003462:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003464:	e001      	b.n	800346a <LoopFillZerobss>

08003466 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003466:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003468:	3204      	adds	r2, #4

0800346a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800346a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800346c:	d3fb      	bcc.n	8003466 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800346e:	f7ff ffd7 	bl	8003420 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003472:	f004 fc41 	bl	8007cf8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003476:	f7fe fb57 	bl	8001b28 <main>
  bx  lr    
 800347a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800347c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8003480:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003484:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8003488:	08007d98 	.word	0x08007d98
  ldr r2, =_sbss
 800348c:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8003490:	20000340 	.word	0x20000340

08003494 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003494:	e7fe      	b.n	8003494 <ADC_IRQHandler>

08003496 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003496:	b580      	push	{r7, lr}
 8003498:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800349a:	2003      	movs	r0, #3
 800349c:	f000 ffe4 	bl	8004468 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80034a0:	200f      	movs	r0, #15
 80034a2:	f000 f805 	bl	80034b0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80034a6:	f7ff fd87 	bl	8002fb8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80034aa:	2300      	movs	r3, #0
}
 80034ac:	4618      	mov	r0, r3
 80034ae:	bd80      	pop	{r7, pc}

080034b0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80034b0:	b580      	push	{r7, lr}
 80034b2:	b082      	sub	sp, #8
 80034b4:	af00      	add	r7, sp, #0
 80034b6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80034b8:	4b12      	ldr	r3, [pc, #72]	; (8003504 <HAL_InitTick+0x54>)
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	4b12      	ldr	r3, [pc, #72]	; (8003508 <HAL_InitTick+0x58>)
 80034be:	781b      	ldrb	r3, [r3, #0]
 80034c0:	4619      	mov	r1, r3
 80034c2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80034c6:	fbb3 f3f1 	udiv	r3, r3, r1
 80034ca:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 ffff 	bl	80044d2 <HAL_SYSTICK_Config>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e00e      	b.n	80034fc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2b0f      	cmp	r3, #15
 80034e2:	d80a      	bhi.n	80034fa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80034e4:	2200      	movs	r2, #0
 80034e6:	6879      	ldr	r1, [r7, #4]
 80034e8:	f04f 30ff 	mov.w	r0, #4294967295
 80034ec:	f000 ffc7 	bl	800447e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80034f0:	4a06      	ldr	r2, [pc, #24]	; (800350c <HAL_InitTick+0x5c>)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
 80034f8:	e000      	b.n	80034fc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
}
 80034fc:	4618      	mov	r0, r3
 80034fe:	3708      	adds	r7, #8
 8003500:	46bd      	mov	sp, r7
 8003502:	bd80      	pop	{r7, pc}
 8003504:	20000004 	.word	0x20000004
 8003508:	2000000c 	.word	0x2000000c
 800350c:	20000008 	.word	0x20000008

08003510 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003514:	4b06      	ldr	r3, [pc, #24]	; (8003530 <HAL_IncTick+0x20>)
 8003516:	781b      	ldrb	r3, [r3, #0]
 8003518:	461a      	mov	r2, r3
 800351a:	4b06      	ldr	r3, [pc, #24]	; (8003534 <HAL_IncTick+0x24>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4413      	add	r3, r2
 8003520:	4a04      	ldr	r2, [pc, #16]	; (8003534 <HAL_IncTick+0x24>)
 8003522:	6013      	str	r3, [r2, #0]
}
 8003524:	bf00      	nop
 8003526:	46bd      	mov	sp, r7
 8003528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352c:	4770      	bx	lr
 800352e:	bf00      	nop
 8003530:	2000000c 	.word	0x2000000c
 8003534:	2000033c 	.word	0x2000033c

08003538 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003538:	b480      	push	{r7}
 800353a:	af00      	add	r7, sp, #0
  return uwTick;
 800353c:	4b03      	ldr	r3, [pc, #12]	; (800354c <HAL_GetTick+0x14>)
 800353e:	681b      	ldr	r3, [r3, #0]
}
 8003540:	4618      	mov	r0, r3
 8003542:	46bd      	mov	sp, r7
 8003544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003548:	4770      	bx	lr
 800354a:	bf00      	nop
 800354c:	2000033c 	.word	0x2000033c

08003550 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b084      	sub	sp, #16
 8003554:	af00      	add	r7, sp, #0
 8003556:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003558:	f7ff ffee 	bl	8003538 <HAL_GetTick>
 800355c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003568:	d005      	beq.n	8003576 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800356a:	4b0a      	ldr	r3, [pc, #40]	; (8003594 <HAL_Delay+0x44>)
 800356c:	781b      	ldrb	r3, [r3, #0]
 800356e:	461a      	mov	r2, r3
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	4413      	add	r3, r2
 8003574:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8003576:	bf00      	nop
 8003578:	f7ff ffde 	bl	8003538 <HAL_GetTick>
 800357c:	4602      	mov	r2, r0
 800357e:	68bb      	ldr	r3, [r7, #8]
 8003580:	1ad3      	subs	r3, r2, r3
 8003582:	68fa      	ldr	r2, [r7, #12]
 8003584:	429a      	cmp	r2, r3
 8003586:	d8f7      	bhi.n	8003578 <HAL_Delay+0x28>
  {
  }
}
 8003588:	bf00      	nop
 800358a:	bf00      	nop
 800358c:	3710      	adds	r7, #16
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	2000000c 	.word	0x2000000c

08003598 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b084      	sub	sp, #16
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2b00      	cmp	r3, #0
 80035a4:	d101      	bne.n	80035aa <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
 80035a8:	e0ed      	b.n	8003786 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035b0:	b2db      	uxtb	r3, r3
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d102      	bne.n	80035bc <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 80035b6:	6878      	ldr	r0, [r7, #4]
 80035b8:	f7ff fd22 	bl	8003000 <HAL_CAN_MspInit>
  }
#endif /* (USE_HAL_CAN_REGISTER_CALLBACKS) */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	681a      	ldr	r2, [r3, #0]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f042 0201 	orr.w	r2, r2, #1
 80035ca:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80035cc:	f7ff ffb4 	bl	8003538 <HAL_GetTick>
 80035d0:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035d2:	e012      	b.n	80035fa <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80035d4:	f7ff ffb0 	bl	8003538 <HAL_GetTick>
 80035d8:	4602      	mov	r2, r0
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	2b0a      	cmp	r3, #10
 80035e0:	d90b      	bls.n	80035fa <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035e6:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	2205      	movs	r2, #5
 80035f2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80035f6:	2301      	movs	r3, #1
 80035f8:	e0c5      	b.n	8003786 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f003 0301 	and.w	r3, r3, #1
 8003604:	2b00      	cmp	r3, #0
 8003606:	d0e5      	beq.n	80035d4 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	681a      	ldr	r2, [r3, #0]
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f022 0202 	bic.w	r2, r2, #2
 8003616:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003618:	f7ff ff8e 	bl	8003538 <HAL_GetTick>
 800361c:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 800361e:	e012      	b.n	8003646 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003620:	f7ff ff8a 	bl	8003538 <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	2b0a      	cmp	r3, #10
 800362c:	d90b      	bls.n	8003646 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	2205      	movs	r2, #5
 800363e:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003642:	2301      	movs	r3, #1
 8003644:	e09f      	b.n	8003786 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f003 0302 	and.w	r3, r3, #2
 8003650:	2b00      	cmp	r3, #0
 8003652:	d1e5      	bne.n	8003620 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	7e1b      	ldrb	r3, [r3, #24]
 8003658:	2b01      	cmp	r3, #1
 800365a:	d108      	bne.n	800366e <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800366a:	601a      	str	r2, [r3, #0]
 800366c:	e007      	b.n	800367e <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800367c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	7e5b      	ldrb	r3, [r3, #25]
 8003682:	2b01      	cmp	r3, #1
 8003684:	d108      	bne.n	8003698 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	681a      	ldr	r2, [r3, #0]
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	e007      	b.n	80036a8 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80036a6:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	7e9b      	ldrb	r3, [r3, #26]
 80036ac:	2b01      	cmp	r3, #1
 80036ae:	d108      	bne.n	80036c2 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f042 0220 	orr.w	r2, r2, #32
 80036be:	601a      	str	r2, [r3, #0]
 80036c0:	e007      	b.n	80036d2 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	681a      	ldr	r2, [r3, #0]
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f022 0220 	bic.w	r2, r2, #32
 80036d0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	7edb      	ldrb	r3, [r3, #27]
 80036d6:	2b01      	cmp	r3, #1
 80036d8:	d108      	bne.n	80036ec <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	681a      	ldr	r2, [r3, #0]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f022 0210 	bic.w	r2, r2, #16
 80036e8:	601a      	str	r2, [r3, #0]
 80036ea:	e007      	b.n	80036fc <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	681a      	ldr	r2, [r3, #0]
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f042 0210 	orr.w	r2, r2, #16
 80036fa:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	7f1b      	ldrb	r3, [r3, #28]
 8003700:	2b01      	cmp	r3, #1
 8003702:	d108      	bne.n	8003716 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	681a      	ldr	r2, [r3, #0]
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f042 0208 	orr.w	r2, r2, #8
 8003712:	601a      	str	r2, [r3, #0]
 8003714:	e007      	b.n	8003726 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	681a      	ldr	r2, [r3, #0]
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	f022 0208 	bic.w	r2, r2, #8
 8003724:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	7f5b      	ldrb	r3, [r3, #29]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d108      	bne.n	8003740 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	681a      	ldr	r2, [r3, #0]
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f042 0204 	orr.w	r2, r2, #4
 800373c:	601a      	str	r2, [r3, #0]
 800373e:	e007      	b.n	8003750 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	681a      	ldr	r2, [r3, #0]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f022 0204 	bic.w	r2, r2, #4
 800374e:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	689a      	ldr	r2, [r3, #8]
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	68db      	ldr	r3, [r3, #12]
 8003758:	431a      	orrs	r2, r3
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	691b      	ldr	r3, [r3, #16]
 800375e:	431a      	orrs	r2, r3
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	695b      	ldr	r3, [r3, #20]
 8003764:	ea42 0103 	orr.w	r1, r2, r3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	685b      	ldr	r3, [r3, #4]
 800376c:	1e5a      	subs	r2, r3, #1
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	430a      	orrs	r2, r1
 8003774:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	2201      	movs	r2, #1
 8003780:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003784:	2300      	movs	r3, #0
}
 8003786:	4618      	mov	r0, r3
 8003788:	3710      	adds	r7, #16
 800378a:	46bd      	mov	sp, r7
 800378c:	bd80      	pop	{r7, pc}
	...

08003790 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, CAN_FilterTypeDef *sFilterConfig)
{
 8003790:	b480      	push	{r7}
 8003792:	b087      	sub	sp, #28
 8003794:	af00      	add	r7, sp, #0
 8003796:	6078      	str	r0, [r7, #4]
 8003798:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip = hcan->Instance;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	617b      	str	r3, [r7, #20]
  HAL_CAN_StateTypeDef state = hcan->State;
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	f893 3020 	ldrb.w	r3, [r3, #32]
 80037a6:	74fb      	strb	r3, [r7, #19]

  if ((state == HAL_CAN_STATE_READY) ||
 80037a8:	7cfb      	ldrb	r3, [r7, #19]
 80037aa:	2b01      	cmp	r3, #1
 80037ac:	d003      	beq.n	80037b6 <HAL_CAN_ConfigFilter+0x26>
 80037ae:	7cfb      	ldrb	r3, [r7, #19]
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	f040 80be 	bne.w	8003932 <HAL_CAN_ConfigFilter+0x1a2>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 80037b6:	4b65      	ldr	r3, [pc, #404]	; (800394c <HAL_CAN_ConfigFilter+0x1bc>)
 80037b8:	617b      	str	r3, [r7, #20]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80037c0:	f043 0201 	orr.w	r2, r3, #1
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80037d0:	f423 527c 	bic.w	r2, r3, #16128	; 0x3f00
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 80037da:	697b      	ldr	r3, [r7, #20]
 80037dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80037e0:	683b      	ldr	r3, [r7, #0]
 80037e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037e4:	021b      	lsls	r3, r3, #8
 80037e6:	431a      	orrs	r2, r3
 80037e8:	697b      	ldr	r3, [r7, #20]
 80037ea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

#endif
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	695b      	ldr	r3, [r3, #20]
 80037f2:	f003 031f 	and.w	r3, r3, #31
 80037f6:	2201      	movs	r2, #1
 80037f8:	fa02 f303 	lsl.w	r3, r2, r3
 80037fc:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 80037fe:	697b      	ldr	r3, [r7, #20]
 8003800:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	43db      	mvns	r3, r3
 8003808:	401a      	ands	r2, r3
 800380a:	697b      	ldr	r3, [r7, #20]
 800380c:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	69db      	ldr	r3, [r3, #28]
 8003814:	2b00      	cmp	r3, #0
 8003816:	d123      	bne.n	8003860 <HAL_CAN_ConfigFilter+0xd0>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	43db      	mvns	r3, r3
 8003822:	401a      	ands	r2, r3
 8003824:	697b      	ldr	r3, [r7, #20]
 8003826:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800382a:	683b      	ldr	r3, [r7, #0]
 800382c:	68db      	ldr	r3, [r3, #12]
 800382e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003836:	683a      	ldr	r2, [r7, #0]
 8003838:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 800383a:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800383c:	697b      	ldr	r3, [r7, #20]
 800383e:	3248      	adds	r2, #72	; 0x48
 8003840:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003844:	683b      	ldr	r3, [r7, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003854:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8003856:	6979      	ldr	r1, [r7, #20]
 8003858:	3348      	adds	r3, #72	; 0x48
 800385a:	00db      	lsls	r3, r3, #3
 800385c:	440b      	add	r3, r1
 800385e:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	69db      	ldr	r3, [r3, #28]
 8003864:	2b01      	cmp	r3, #1
 8003866:	d122      	bne.n	80038ae <HAL_CAN_ConfigFilter+0x11e>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f8d3 220c 	ldr.w	r2, [r3, #524]	; 0x20c
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	431a      	orrs	r2, r3
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f8c3 220c 	str.w	r2, [r3, #524]	; 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8003884:	683a      	ldr	r2, [r7, #0]
 8003886:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8003888:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 800388a:	697b      	ldr	r3, [r7, #20]
 800388c:	3248      	adds	r2, #72	; 0x48
 800388e:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	689b      	ldr	r3, [r3, #8]
 8003896:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80038a2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80038a4:	6979      	ldr	r1, [r7, #20]
 80038a6:	3348      	adds	r3, #72	; 0x48
 80038a8:	00db      	lsls	r3, r3, #3
 80038aa:	440b      	add	r3, r1
 80038ac:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	699b      	ldr	r3, [r3, #24]
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d109      	bne.n	80038ca <HAL_CAN_ConfigFilter+0x13a>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	43db      	mvns	r3, r3
 80038c0:	401a      	ands	r2, r3
 80038c2:	697b      	ldr	r3, [r7, #20]
 80038c4:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 80038c8:	e007      	b.n	80038da <HAL_CAN_ConfigFilter+0x14a>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	431a      	orrs	r2, r3
 80038d4:	697b      	ldr	r3, [r7, #20]
 80038d6:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 80038da:	683b      	ldr	r3, [r7, #0]
 80038dc:	691b      	ldr	r3, [r3, #16]
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d109      	bne.n	80038f6 <HAL_CAN_ConfigFilter+0x166>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 80038e2:	697b      	ldr	r3, [r7, #20]
 80038e4:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	43db      	mvns	r3, r3
 80038ec:	401a      	ands	r2, r3
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
 80038f4:	e007      	b.n	8003906 <HAL_CAN_ConfigFilter+0x176>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	f8d3 2214 	ldr.w	r2, [r3, #532]	; 0x214
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	431a      	orrs	r2, r3
 8003900:	697b      	ldr	r3, [r7, #20]
 8003902:	f8c3 2214 	str.w	r2, [r3, #532]	; 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	6a1b      	ldr	r3, [r3, #32]
 800390a:	2b01      	cmp	r3, #1
 800390c:	d107      	bne.n	800391e <HAL_CAN_ConfigFilter+0x18e>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f8d3 221c 	ldr.w	r2, [r3, #540]	; 0x21c
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	431a      	orrs	r2, r3
 8003918:	697b      	ldr	r3, [r7, #20]
 800391a:	f8c3 221c 	str.w	r2, [r3, #540]	; 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 800391e:	697b      	ldr	r3, [r7, #20]
 8003920:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8003924:	f023 0201 	bic.w	r2, r3, #1
 8003928:	697b      	ldr	r3, [r7, #20]
 800392a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

    /* Return function status */
    return HAL_OK;
 800392e:	2300      	movs	r3, #0
 8003930:	e006      	b.n	8003940 <HAL_CAN_ConfigFilter+0x1b0>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003936:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
  }
}
 8003940:	4618      	mov	r0, r3
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394a:	4770      	bx	lr
 800394c:	40006400 	.word	0x40006400

08003950 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8003950:	b580      	push	{r7, lr}
 8003952:	b084      	sub	sp, #16
 8003954:	af00      	add	r7, sp, #0
 8003956:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	f893 3020 	ldrb.w	r3, [r3, #32]
 800395e:	b2db      	uxtb	r3, r3
 8003960:	2b01      	cmp	r3, #1
 8003962:	d12e      	bne.n	80039c2 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2202      	movs	r2, #2
 8003968:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	681a      	ldr	r2, [r3, #0]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f022 0201 	bic.w	r2, r2, #1
 800397a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800397c:	f7ff fddc 	bl	8003538 <HAL_GetTick>
 8003980:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8003982:	e012      	b.n	80039aa <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003984:	f7ff fdd8 	bl	8003538 <HAL_GetTick>
 8003988:	4602      	mov	r2, r0
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	1ad3      	subs	r3, r2, r3
 800398e:	2b0a      	cmp	r3, #10
 8003990:	d90b      	bls.n	80039aa <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003996:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	2205      	movs	r2, #5
 80039a2:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 80039a6:	2301      	movs	r3, #1
 80039a8:	e012      	b.n	80039d0 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d1e5      	bne.n	8003984 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Return function status */
    return HAL_OK;
 80039be:	2300      	movs	r3, #0
 80039c0:	e006      	b.n	80039d0 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
  }
}
 80039d0:	4618      	mov	r0, r3
 80039d2:	3710      	adds	r7, #16
 80039d4:	46bd      	mov	sp, r7
 80039d6:	bd80      	pop	{r7, pc}

080039d8 <HAL_CAN_AddTxMessage>:
  *         the TxMailbox used to store the Tx message.
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, CAN_TxHeaderTypeDef *pHeader, uint8_t aData[], uint32_t *pTxMailbox)
{
 80039d8:	b480      	push	{r7}
 80039da:	b089      	sub	sp, #36	; 0x24
 80039dc:	af00      	add	r7, sp, #0
 80039de:	60f8      	str	r0, [r7, #12]
 80039e0:	60b9      	str	r1, [r7, #8]
 80039e2:	607a      	str	r2, [r7, #4]
 80039e4:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	f893 3020 	ldrb.w	r3, [r3, #32]
 80039ec:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	689b      	ldr	r3, [r3, #8]
 80039f4:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80039f6:	7ffb      	ldrb	r3, [r7, #31]
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	d003      	beq.n	8003a04 <HAL_CAN_AddTxMessage+0x2c>
 80039fc:	7ffb      	ldrb	r3, [r7, #31]
 80039fe:	2b02      	cmp	r3, #2
 8003a00:	f040 80b8 	bne.w	8003b74 <HAL_CAN_AddTxMessage+0x19c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10a      	bne.n	8003a24 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d105      	bne.n	8003a24 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 8003a18:	69bb      	ldr	r3, [r7, #24]
 8003a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	f000 80a0 	beq.w	8003b64 <HAL_CAN_AddTxMessage+0x18c>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	0e1b      	lsrs	r3, r3, #24
 8003a28:	f003 0303 	and.w	r3, r3, #3
 8003a2c:	617b      	str	r3, [r7, #20]

      /* Check transmit mailbox value */
      if (transmitmailbox > 2U)
 8003a2e:	697b      	ldr	r3, [r7, #20]
 8003a30:	2b02      	cmp	r3, #2
 8003a32:	d907      	bls.n	8003a44 <HAL_CAN_AddTxMessage+0x6c>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_INTERNAL;
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a38:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	e09e      	b.n	8003b82 <HAL_CAN_AddTxMessage+0x1aa>
      }

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 8003a44:	2201      	movs	r2, #1
 8003a46:	697b      	ldr	r3, [r7, #20]
 8003a48:	409a      	lsls	r2, r3
 8003a4a:	683b      	ldr	r3, [r7, #0]
 8003a4c:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8003a4e:	68bb      	ldr	r3, [r7, #8]
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d10d      	bne.n	8003a72 <HAL_CAN_AddTxMessage+0x9a>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8003a60:	68f9      	ldr	r1, [r7, #12]
 8003a62:	6809      	ldr	r1, [r1, #0]
 8003a64:	431a      	orrs	r2, r3
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	3318      	adds	r3, #24
 8003a6a:	011b      	lsls	r3, r3, #4
 8003a6c:	440b      	add	r3, r1
 8003a6e:	601a      	str	r2, [r3, #0]
 8003a70:	e00f      	b.n	8003a92 <HAL_CAN_AddTxMessage+0xba>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a72:	68bb      	ldr	r3, [r7, #8]
 8003a74:	685b      	ldr	r3, [r3, #4]
 8003a76:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 8003a78:	68bb      	ldr	r3, [r7, #8]
 8003a7a:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a7c:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a82:	68f9      	ldr	r1, [r7, #12]
 8003a84:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8003a86:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	3318      	adds	r3, #24
 8003a8c:	011b      	lsls	r3, r3, #4
 8003a8e:	440b      	add	r3, r1
 8003a90:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	6819      	ldr	r1, [r3, #0]
 8003a96:	68bb      	ldr	r3, [r7, #8]
 8003a98:	691a      	ldr	r2, [r3, #16]
 8003a9a:	697b      	ldr	r3, [r7, #20]
 8003a9c:	3318      	adds	r3, #24
 8003a9e:	011b      	lsls	r3, r3, #4
 8003aa0:	440b      	add	r3, r1
 8003aa2:	3304      	adds	r3, #4
 8003aa4:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8003aa6:	68bb      	ldr	r3, [r7, #8]
 8003aa8:	7d1b      	ldrb	r3, [r3, #20]
 8003aaa:	2b01      	cmp	r3, #1
 8003aac:	d111      	bne.n	8003ad2 <HAL_CAN_AddTxMessage+0xfa>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	3318      	adds	r3, #24
 8003ab6:	011b      	lsls	r3, r3, #4
 8003ab8:	4413      	add	r3, r2
 8003aba:	3304      	adds	r3, #4
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	68fa      	ldr	r2, [r7, #12]
 8003ac0:	6811      	ldr	r1, [r2, #0]
 8003ac2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003ac6:	697b      	ldr	r3, [r7, #20]
 8003ac8:	3318      	adds	r3, #24
 8003aca:	011b      	lsls	r3, r3, #4
 8003acc:	440b      	add	r3, r1
 8003ace:	3304      	adds	r3, #4
 8003ad0:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	3307      	adds	r3, #7
 8003ad6:	781b      	ldrb	r3, [r3, #0]
 8003ad8:	061a      	lsls	r2, r3, #24
 8003ada:	687b      	ldr	r3, [r7, #4]
 8003adc:	3306      	adds	r3, #6
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	041b      	lsls	r3, r3, #16
 8003ae2:	431a      	orrs	r2, r3
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	3305      	adds	r3, #5
 8003ae8:	781b      	ldrb	r3, [r3, #0]
 8003aea:	021b      	lsls	r3, r3, #8
 8003aec:	4313      	orrs	r3, r2
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	3204      	adds	r2, #4
 8003af2:	7812      	ldrb	r2, [r2, #0]
 8003af4:	4610      	mov	r0, r2
 8003af6:	68fa      	ldr	r2, [r7, #12]
 8003af8:	6811      	ldr	r1, [r2, #0]
 8003afa:	ea43 0200 	orr.w	r2, r3, r0
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	011b      	lsls	r3, r3, #4
 8003b02:	440b      	add	r3, r1
 8003b04:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 8003b08:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	3303      	adds	r3, #3
 8003b0e:	781b      	ldrb	r3, [r3, #0]
 8003b10:	061a      	lsls	r2, r3, #24
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	3302      	adds	r3, #2
 8003b16:	781b      	ldrb	r3, [r3, #0]
 8003b18:	041b      	lsls	r3, r3, #16
 8003b1a:	431a      	orrs	r2, r3
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	3301      	adds	r3, #1
 8003b20:	781b      	ldrb	r3, [r3, #0]
 8003b22:	021b      	lsls	r3, r3, #8
 8003b24:	4313      	orrs	r3, r2
 8003b26:	687a      	ldr	r2, [r7, #4]
 8003b28:	7812      	ldrb	r2, [r2, #0]
 8003b2a:	4610      	mov	r0, r2
 8003b2c:	68fa      	ldr	r2, [r7, #12]
 8003b2e:	6811      	ldr	r1, [r2, #0]
 8003b30:	ea43 0200 	orr.w	r2, r3, r0
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	011b      	lsls	r3, r3, #4
 8003b38:	440b      	add	r3, r1
 8003b3a:	f503 73c4 	add.w	r3, r3, #392	; 0x188
 8003b3e:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681a      	ldr	r2, [r3, #0]
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	3318      	adds	r3, #24
 8003b48:	011b      	lsls	r3, r3, #4
 8003b4a:	4413      	add	r3, r2
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	6811      	ldr	r1, [r2, #0]
 8003b52:	f043 0201 	orr.w	r2, r3, #1
 8003b56:	697b      	ldr	r3, [r7, #20]
 8003b58:	3318      	adds	r3, #24
 8003b5a:	011b      	lsls	r3, r3, #4
 8003b5c:	440b      	add	r3, r1
 8003b5e:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8003b60:	2300      	movs	r3, #0
 8003b62:	e00e      	b.n	8003b82 <HAL_CAN_AddTxMessage+0x1aa>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b68:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	625a      	str	r2, [r3, #36]	; 0x24

      return HAL_ERROR;
 8003b70:	2301      	movs	r3, #1
 8003b72:	e006      	b.n	8003b82 <HAL_CAN_AddTxMessage+0x1aa>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b78:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003b80:	2301      	movs	r3, #1
  }
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3724      	adds	r7, #36	; 0x24
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <HAL_CAN_GetTxMailboxesFreeLevel>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval Number of free Tx Mailboxes.
  */
uint32_t HAL_CAN_GetTxMailboxesFreeLevel(CAN_HandleTypeDef *hcan)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b085      	sub	sp, #20
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  uint32_t freelevel = 0U;
 8003b96:	2300      	movs	r3, #0
 8003b98:	60fb      	str	r3, [r7, #12]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003ba0:	72fb      	strb	r3, [r7, #11]

  if ((state == HAL_CAN_STATE_READY) ||
 8003ba2:	7afb      	ldrb	r3, [r7, #11]
 8003ba4:	2b01      	cmp	r3, #1
 8003ba6:	d002      	beq.n	8003bae <HAL_CAN_GetTxMailboxesFreeLevel+0x20>
 8003ba8:	7afb      	ldrb	r3, [r7, #11]
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d11d      	bne.n	8003bea <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check Tx Mailbox 0 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME0) != 0U)
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	689b      	ldr	r3, [r3, #8]
 8003bb4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d002      	beq.n	8003bc2 <HAL_CAN_GetTxMailboxesFreeLevel+0x34>
    {
      freelevel++;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	3301      	adds	r3, #1
 8003bc0:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 1 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME1) != 0U)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d002      	beq.n	8003bd6 <HAL_CAN_GetTxMailboxesFreeLevel+0x48>
    {
      freelevel++;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	3301      	adds	r3, #1
 8003bd4:	60fb      	str	r3, [r7, #12]
    }

    /* Check Tx Mailbox 2 status */
    if ((hcan->Instance->TSR & CAN_TSR_TME2) != 0U)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	689b      	ldr	r3, [r3, #8]
 8003bdc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d002      	beq.n	8003bea <HAL_CAN_GetTxMailboxesFreeLevel+0x5c>
    {
      freelevel++;
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	3301      	adds	r3, #1
 8003be8:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Return Tx Mailboxes free level */
  return freelevel;
 8003bea:	68fb      	ldr	r3, [r7, #12]
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3714      	adds	r7, #20
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf6:	4770      	bx	lr

08003bf8 <HAL_CAN_GetRxMessage>:
  *         of the Rx frame will be stored.
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo, CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8003bf8:	b480      	push	{r7}
 8003bfa:	b087      	sub	sp, #28
 8003bfc:	af00      	add	r7, sp, #0
 8003bfe:	60f8      	str	r0, [r7, #12]
 8003c00:	60b9      	str	r1, [r7, #8]
 8003c02:	607a      	str	r2, [r7, #4]
 8003c04:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003c0c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8003c0e:	7dfb      	ldrb	r3, [r7, #23]
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d003      	beq.n	8003c1c <HAL_CAN_GetRxMessage+0x24>
 8003c14:	7dfb      	ldrb	r3, [r7, #23]
 8003c16:	2b02      	cmp	r3, #2
 8003c18:	f040 80f3 	bne.w	8003e02 <HAL_CAN_GetRxMessage+0x20a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003c1c:	68bb      	ldr	r3, [r7, #8]
 8003c1e:	2b00      	cmp	r3, #0
 8003c20:	d10e      	bne.n	8003c40 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f003 0303 	and.w	r3, r3, #3
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d116      	bne.n	8003c5e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c34:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003c3c:	2301      	movs	r3, #1
 8003c3e:	e0e7      	b.n	8003e10 <HAL_CAN_GetRxMessage+0x218>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	691b      	ldr	r3, [r3, #16]
 8003c46:	f003 0303 	and.w	r3, r3, #3
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d107      	bne.n	8003c5e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c52:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	625a      	str	r2, [r3, #36]	; 0x24

        return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e0d8      	b.n	8003e10 <HAL_CAN_GetRxMessage+0x218>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681a      	ldr	r2, [r3, #0]
 8003c62:	68bb      	ldr	r3, [r7, #8]
 8003c64:	331b      	adds	r3, #27
 8003c66:	011b      	lsls	r3, r3, #4
 8003c68:	4413      	add	r3, r2
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f003 0204 	and.w	r2, r3, #4
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	2b00      	cmp	r3, #0
 8003c7a:	d10c      	bne.n	8003c96 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681a      	ldr	r2, [r3, #0]
 8003c80:	68bb      	ldr	r3, [r7, #8]
 8003c82:	331b      	adds	r3, #27
 8003c84:	011b      	lsls	r3, r3, #4
 8003c86:	4413      	add	r3, r2
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	0d5b      	lsrs	r3, r3, #21
 8003c8c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	601a      	str	r2, [r3, #0]
 8003c94:	e00b      	b.n	8003cae <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	331b      	adds	r3, #27
 8003c9e:	011b      	lsls	r3, r3, #4
 8003ca0:	4413      	add	r3, r2
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	08db      	lsrs	r3, r3, #3
 8003ca6:	f023 4260 	bic.w	r2, r3, #3758096384	; 0xe0000000
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	681a      	ldr	r2, [r3, #0]
 8003cb2:	68bb      	ldr	r3, [r7, #8]
 8003cb4:	331b      	adds	r3, #27
 8003cb6:	011b      	lsls	r3, r3, #4
 8003cb8:	4413      	add	r3, r2
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f003 0202 	and.w	r2, r3, #2
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	60da      	str	r2, [r3, #12]
    pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681a      	ldr	r2, [r3, #0]
 8003cc8:	68bb      	ldr	r3, [r7, #8]
 8003cca:	331b      	adds	r3, #27
 8003ccc:	011b      	lsls	r3, r3, #4
 8003cce:	4413      	add	r3, r2
 8003cd0:	3304      	adds	r3, #4
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f003 020f 	and.w	r2, r3, #15
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	611a      	str	r2, [r3, #16]
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681a      	ldr	r2, [r3, #0]
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	331b      	adds	r3, #27
 8003ce4:	011b      	lsls	r3, r3, #4
 8003ce6:	4413      	add	r3, r2
 8003ce8:	3304      	adds	r3, #4
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	0a1b      	lsrs	r3, r3, #8
 8003cee:	b2da      	uxtb	r2, r3
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681a      	ldr	r2, [r3, #0]
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	331b      	adds	r3, #27
 8003cfc:	011b      	lsls	r3, r3, #4
 8003cfe:	4413      	add	r3, r2
 8003d00:	3304      	adds	r3, #4
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	0c1b      	lsrs	r3, r3, #16
 8003d06:	b29a      	uxth	r2, r3
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	011b      	lsls	r3, r3, #4
 8003d14:	4413      	add	r3, r2
 8003d16:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	b2da      	uxtb	r2, r3
 8003d1e:	683b      	ldr	r3, [r7, #0]
 8003d20:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	681a      	ldr	r2, [r3, #0]
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	011b      	lsls	r3, r3, #4
 8003d2a:	4413      	add	r3, r2
 8003d2c:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	0a1a      	lsrs	r2, r3, #8
 8003d34:	683b      	ldr	r3, [r7, #0]
 8003d36:	3301      	adds	r3, #1
 8003d38:	b2d2      	uxtb	r2, r2
 8003d3a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	011b      	lsls	r3, r3, #4
 8003d44:	4413      	add	r3, r2
 8003d46:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	0c1a      	lsrs	r2, r3, #16
 8003d4e:	683b      	ldr	r3, [r7, #0]
 8003d50:	3302      	adds	r3, #2
 8003d52:	b2d2      	uxtb	r2, r2
 8003d54:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	011b      	lsls	r3, r3, #4
 8003d5e:	4413      	add	r3, r2
 8003d60:	f503 73dc 	add.w	r3, r3, #440	; 0x1b8
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	0e1a      	lsrs	r2, r3, #24
 8003d68:	683b      	ldr	r3, [r7, #0]
 8003d6a:	3303      	adds	r3, #3
 8003d6c:	b2d2      	uxtb	r2, r2
 8003d6e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681a      	ldr	r2, [r3, #0]
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	011b      	lsls	r3, r3, #4
 8003d78:	4413      	add	r3, r2
 8003d7a:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003d7e:	681a      	ldr	r2, [r3, #0]
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	3304      	adds	r3, #4
 8003d84:	b2d2      	uxtb	r2, r2
 8003d86:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	011b      	lsls	r3, r3, #4
 8003d90:	4413      	add	r3, r2
 8003d92:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	0a1a      	lsrs	r2, r3, #8
 8003d9a:	683b      	ldr	r3, [r7, #0]
 8003d9c:	3305      	adds	r3, #5
 8003d9e:	b2d2      	uxtb	r2, r2
 8003da0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681a      	ldr	r2, [r3, #0]
 8003da6:	68bb      	ldr	r3, [r7, #8]
 8003da8:	011b      	lsls	r3, r3, #4
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	0c1a      	lsrs	r2, r3, #16
 8003db4:	683b      	ldr	r3, [r7, #0]
 8003db6:	3306      	adds	r3, #6
 8003db8:	b2d2      	uxtb	r2, r2
 8003dba:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681a      	ldr	r2, [r3, #0]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	011b      	lsls	r3, r3, #4
 8003dc4:	4413      	add	r3, r2
 8003dc6:	f503 73de 	add.w	r3, r3, #444	; 0x1bc
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	0e1a      	lsrs	r2, r3, #24
 8003dce:	683b      	ldr	r3, [r7, #0]
 8003dd0:	3307      	adds	r3, #7
 8003dd2:	b2d2      	uxtb	r2, r2
 8003dd4:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8003dd6:	68bb      	ldr	r3, [r7, #8]
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d108      	bne.n	8003dee <HAL_CAN_GetRxMessage+0x1f6>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	68da      	ldr	r2, [r3, #12]
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f042 0220 	orr.w	r2, r2, #32
 8003dea:	60da      	str	r2, [r3, #12]
 8003dec:	e007      	b.n	8003dfe <HAL_CAN_GetRxMessage+0x206>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8003dee:	68fb      	ldr	r3, [r7, #12]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	691a      	ldr	r2, [r3, #16]
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f042 0220 	orr.w	r2, r2, #32
 8003dfc:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8003dfe:	2300      	movs	r3, #0
 8003e00:	e006      	b.n	8003e10 <HAL_CAN_GetRxMessage+0x218>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e06:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e0e:	2301      	movs	r3, #1
  }
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	371c      	adds	r7, #28
 8003e14:	46bd      	mov	sp, r7
 8003e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e1a:	4770      	bx	lr

08003e1c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8003e1c:	b480      	push	{r7}
 8003e1e:	b085      	sub	sp, #20
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
 8003e24:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003e2c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8003e2e:	7bfb      	ldrb	r3, [r7, #15]
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	d002      	beq.n	8003e3a <HAL_CAN_ActivateNotification+0x1e>
 8003e34:	7bfb      	ldrb	r3, [r7, #15]
 8003e36:	2b02      	cmp	r3, #2
 8003e38:	d109      	bne.n	8003e4e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	6959      	ldr	r1, [r3, #20]
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	683a      	ldr	r2, [r7, #0]
 8003e46:	430a      	orrs	r2, r1
 8003e48:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	e006      	b.n	8003e5c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	625a      	str	r2, [r3, #36]	; 0x24

    return HAL_ERROR;
 8003e5a:	2301      	movs	r3, #1
  }
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3714      	adds	r7, #20
 8003e60:	46bd      	mov	sp, r7
 8003e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e66:	4770      	bx	lr

08003e68 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b08a      	sub	sp, #40	; 0x28
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003e70:	2300      	movs	r3, #0
 8003e72:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	695b      	ldr	r3, [r3, #20]
 8003e7a:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	685b      	ldr	r3, [r3, #4]
 8003e82:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	689b      	ldr	r3, [r3, #8]
 8003e8a:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	68db      	ldr	r3, [r3, #12]
 8003e92:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	699b      	ldr	r3, [r3, #24]
 8003ea2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003ea4:	6a3b      	ldr	r3, [r7, #32]
 8003ea6:	f003 0301 	and.w	r3, r3, #1
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d07c      	beq.n	8003fa8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003eae:	69bb      	ldr	r3, [r7, #24]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d023      	beq.n	8003f00 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	2201      	movs	r2, #1
 8003ebe:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	f003 0302 	and.w	r3, r3, #2
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d003      	beq.n	8003ed2 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003eca:	6878      	ldr	r0, [r7, #4]
 8003ecc:	f000 f983 	bl	80041d6 <HAL_CAN_TxMailbox0CompleteCallback>
 8003ed0:	e016      	b.n	8003f00 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	f003 0304 	and.w	r3, r3, #4
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d004      	beq.n	8003ee6 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003edc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ede:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003ee2:	627b      	str	r3, [r7, #36]	; 0x24
 8003ee4:	e00c      	b.n	8003f00 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003ee6:	69bb      	ldr	r3, [r7, #24]
 8003ee8:	f003 0308 	and.w	r3, r3, #8
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d004      	beq.n	8003efa <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003ef6:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef8:	e002      	b.n	8003f00 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 f989 	bl	8004212 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003f00:	69bb      	ldr	r3, [r7, #24]
 8003f02:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f06:	2b00      	cmp	r3, #0
 8003f08:	d024      	beq.n	8003f54 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	681b      	ldr	r3, [r3, #0]
 8003f0e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003f12:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003f14:	69bb      	ldr	r3, [r7, #24]
 8003f16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d003      	beq.n	8003f26 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003f1e:	6878      	ldr	r0, [r7, #4]
 8003f20:	f000 f963 	bl	80041ea <HAL_CAN_TxMailbox1CompleteCallback>
 8003f24:	e016      	b.n	8003f54 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003f26:	69bb      	ldr	r3, [r7, #24]
 8003f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d004      	beq.n	8003f3a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003f30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f32:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003f36:	627b      	str	r3, [r7, #36]	; 0x24
 8003f38:	e00c      	b.n	8003f54 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003f3a:	69bb      	ldr	r3, [r7, #24]
 8003f3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f40:	2b00      	cmp	r3, #0
 8003f42:	d004      	beq.n	8003f4e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f46:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003f4a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f4c:	e002      	b.n	8003f54 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 f969 	bl	8004226 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003f54:	69bb      	ldr	r3, [r7, #24]
 8003f56:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d024      	beq.n	8003fa8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003f66:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003f68:	69bb      	ldr	r3, [r7, #24]
 8003f6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6e:	2b00      	cmp	r3, #0
 8003f70:	d003      	beq.n	8003f7a <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003f72:	6878      	ldr	r0, [r7, #4]
 8003f74:	f000 f943 	bl	80041fe <HAL_CAN_TxMailbox2CompleteCallback>
 8003f78:	e016      	b.n	8003fa8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003f7a:	69bb      	ldr	r3, [r7, #24]
 8003f7c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d004      	beq.n	8003f8e <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003f84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f86:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f8a:	627b      	str	r3, [r7, #36]	; 0x24
 8003f8c:	e00c      	b.n	8003fa8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003f8e:	69bb      	ldr	r3, [r7, #24]
 8003f90:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d004      	beq.n	8003fa2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003f98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f9e:	627b      	str	r3, [r7, #36]	; 0x24
 8003fa0:	e002      	b.n	8003fa8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 f949 	bl	800423a <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003fa8:	6a3b      	ldr	r3, [r7, #32]
 8003faa:	f003 0308 	and.w	r3, r3, #8
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d00c      	beq.n	8003fcc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003fb2:	697b      	ldr	r3, [r7, #20]
 8003fb4:	f003 0310 	and.w	r3, r3, #16
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d007      	beq.n	8003fcc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003fbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003fbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003fc2:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	2210      	movs	r2, #16
 8003fca:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	f003 0304 	and.w	r3, r3, #4
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d00b      	beq.n	8003fee <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d006      	beq.n	8003fee <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	2208      	movs	r2, #8
 8003fe6:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003fe8:	6878      	ldr	r0, [r7, #4]
 8003fea:	f000 f930 	bl	800424e <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003fee:	6a3b      	ldr	r3, [r7, #32]
 8003ff0:	f003 0302 	and.w	r3, r3, #2
 8003ff4:	2b00      	cmp	r3, #0
 8003ff6:	d009      	beq.n	800400c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	68db      	ldr	r3, [r3, #12]
 8003ffe:	f003 0303 	and.w	r3, r3, #3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d002      	beq.n	800400c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f7fd fd6e 	bl	8001ae8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 800400c:	6a3b      	ldr	r3, [r7, #32]
 800400e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004012:	2b00      	cmp	r3, #0
 8004014:	d00c      	beq.n	8004030 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f003 0310 	and.w	r3, r3, #16
 800401c:	2b00      	cmp	r3, #0
 800401e:	d007      	beq.n	8004030 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8004020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004022:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004026:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	2210      	movs	r2, #16
 800402e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8004030:	6a3b      	ldr	r3, [r7, #32]
 8004032:	f003 0320 	and.w	r3, r3, #32
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00b      	beq.n	8004052 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 800403a:	693b      	ldr	r3, [r7, #16]
 800403c:	f003 0308 	and.w	r3, r3, #8
 8004040:	2b00      	cmp	r3, #0
 8004042:	d006      	beq.n	8004052 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	2208      	movs	r2, #8
 800404a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 800404c:	6878      	ldr	r0, [r7, #4]
 800404e:	f000 f912 	bl	8004276 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8004052:	6a3b      	ldr	r3, [r7, #32]
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	2b00      	cmp	r3, #0
 800405a:	d009      	beq.n	8004070 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	691b      	ldr	r3, [r3, #16]
 8004062:	f003 0303 	and.w	r3, r3, #3
 8004066:	2b00      	cmp	r3, #0
 8004068:	d002      	beq.n	8004070 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 f8f9 	bl	8004262 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8004070:	6a3b      	ldr	r3, [r7, #32]
 8004072:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d00b      	beq.n	8004092 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	f003 0310 	and.w	r3, r3, #16
 8004080:	2b00      	cmp	r3, #0
 8004082:	d006      	beq.n	8004092 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	2210      	movs	r2, #16
 800408a:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	f000 f8fc 	bl	800428a <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8004092:	6a3b      	ldr	r3, [r7, #32]
 8004094:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004098:	2b00      	cmp	r3, #0
 800409a:	d00b      	beq.n	80040b4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 800409c:	69fb      	ldr	r3, [r7, #28]
 800409e:	f003 0308 	and.w	r3, r3, #8
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d006      	beq.n	80040b4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	2208      	movs	r2, #8
 80040ac:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 80040ae:	6878      	ldr	r0, [r7, #4]
 80040b0:	f000 f8f5 	bl	800429e <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 80040b4:	6a3b      	ldr	r3, [r7, #32]
 80040b6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d07b      	beq.n	80041b6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 80040be:	69fb      	ldr	r3, [r7, #28]
 80040c0:	f003 0304 	and.w	r3, r3, #4
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	d072      	beq.n	80041ae <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80040c8:	6a3b      	ldr	r3, [r7, #32]
 80040ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040ce:	2b00      	cmp	r3, #0
 80040d0:	d008      	beq.n	80040e4 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 80040d8:	2b00      	cmp	r3, #0
 80040da:	d003      	beq.n	80040e4 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 80040dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040de:	f043 0301 	orr.w	r3, r3, #1
 80040e2:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80040e4:	6a3b      	ldr	r3, [r7, #32]
 80040e6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d008      	beq.n	8004100 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d003      	beq.n	8004100 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 80040f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fa:	f043 0302 	orr.w	r3, r3, #2
 80040fe:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004100:	6a3b      	ldr	r3, [r7, #32]
 8004102:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004106:	2b00      	cmp	r3, #0
 8004108:	d008      	beq.n	800411c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8004110:	2b00      	cmp	r3, #0
 8004112:	d003      	beq.n	800411c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8004114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004116:	f043 0304 	orr.w	r3, r3, #4
 800411a:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800411c:	6a3b      	ldr	r3, [r7, #32]
 800411e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004122:	2b00      	cmp	r3, #0
 8004124:	d043      	beq.n	80041ae <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 800412c:	2b00      	cmp	r3, #0
 800412e:	d03e      	beq.n	80041ae <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8004136:	2b60      	cmp	r3, #96	; 0x60
 8004138:	d02b      	beq.n	8004192 <HAL_CAN_IRQHandler+0x32a>
 800413a:	2b60      	cmp	r3, #96	; 0x60
 800413c:	d82e      	bhi.n	800419c <HAL_CAN_IRQHandler+0x334>
 800413e:	2b50      	cmp	r3, #80	; 0x50
 8004140:	d022      	beq.n	8004188 <HAL_CAN_IRQHandler+0x320>
 8004142:	2b50      	cmp	r3, #80	; 0x50
 8004144:	d82a      	bhi.n	800419c <HAL_CAN_IRQHandler+0x334>
 8004146:	2b40      	cmp	r3, #64	; 0x40
 8004148:	d019      	beq.n	800417e <HAL_CAN_IRQHandler+0x316>
 800414a:	2b40      	cmp	r3, #64	; 0x40
 800414c:	d826      	bhi.n	800419c <HAL_CAN_IRQHandler+0x334>
 800414e:	2b30      	cmp	r3, #48	; 0x30
 8004150:	d010      	beq.n	8004174 <HAL_CAN_IRQHandler+0x30c>
 8004152:	2b30      	cmp	r3, #48	; 0x30
 8004154:	d822      	bhi.n	800419c <HAL_CAN_IRQHandler+0x334>
 8004156:	2b10      	cmp	r3, #16
 8004158:	d002      	beq.n	8004160 <HAL_CAN_IRQHandler+0x2f8>
 800415a:	2b20      	cmp	r3, #32
 800415c:	d005      	beq.n	800416a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 800415e:	e01d      	b.n	800419c <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8004160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004162:	f043 0308 	orr.w	r3, r3, #8
 8004166:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004168:	e019      	b.n	800419e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 800416a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800416c:	f043 0310 	orr.w	r3, r3, #16
 8004170:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004172:	e014      	b.n	800419e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8004174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004176:	f043 0320 	orr.w	r3, r3, #32
 800417a:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800417c:	e00f      	b.n	800419e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 800417e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004180:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8004184:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004186:	e00a      	b.n	800419e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8004188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800418e:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004190:	e005      	b.n	800419e <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8004192:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004194:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004198:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 800419a:	e000      	b.n	800419e <HAL_CAN_IRQHandler+0x336>
            break;
 800419c:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	699a      	ldr	r2, [r3, #24]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 80041ac:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	2204      	movs	r2, #4
 80041b4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 80041b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d008      	beq.n	80041ce <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80041c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041c2:	431a      	orrs	r2, r3
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 80041c8:	6878      	ldr	r0, [r7, #4]
 80041ca:	f000 f872 	bl	80042b2 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 80041ce:	bf00      	nop
 80041d0:	3728      	adds	r7, #40	; 0x28
 80041d2:	46bd      	mov	sp, r7
 80041d4:	bd80      	pop	{r7, pc}

080041d6 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80041d6:	b480      	push	{r7}
 80041d8:	b083      	sub	sp, #12
 80041da:	af00      	add	r7, sp, #0
 80041dc:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 80041de:	bf00      	nop
 80041e0:	370c      	adds	r7, #12
 80041e2:	46bd      	mov	sp, r7
 80041e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e8:	4770      	bx	lr

080041ea <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80041ea:	b480      	push	{r7}
 80041ec:	b083      	sub	sp, #12
 80041ee:	af00      	add	r7, sp, #0
 80041f0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 80041f2:	bf00      	nop
 80041f4:	370c      	adds	r7, #12
 80041f6:	46bd      	mov	sp, r7
 80041f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fc:	4770      	bx	lr

080041fe <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80041fe:	b480      	push	{r7}
 8004200:	b083      	sub	sp, #12
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004206:	bf00      	nop
 8004208:	370c      	adds	r7, #12
 800420a:	46bd      	mov	sp, r7
 800420c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004210:	4770      	bx	lr

08004212 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004212:	b480      	push	{r7}
 8004214:	b083      	sub	sp, #12
 8004216:	af00      	add	r7, sp, #0
 8004218:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 800421a:	bf00      	nop
 800421c:	370c      	adds	r7, #12
 800421e:	46bd      	mov	sp, r7
 8004220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004224:	4770      	bx	lr

08004226 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004226:	b480      	push	{r7}
 8004228:	b083      	sub	sp, #12
 800422a:	af00      	add	r7, sp, #0
 800422c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800422e:	bf00      	nop
 8004230:	370c      	adds	r7, #12
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr

0800423a <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 800423a:	b480      	push	{r7}
 800423c:	b083      	sub	sp, #12
 800423e:	af00      	add	r7, sp, #0
 8004240:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8004242:	bf00      	nop
 8004244:	370c      	adds	r7, #12
 8004246:	46bd      	mov	sp, r7
 8004248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800424c:	4770      	bx	lr

0800424e <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800424e:	b480      	push	{r7}
 8004250:	b083      	sub	sp, #12
 8004252:	af00      	add	r7, sp, #0
 8004254:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8004256:	bf00      	nop
 8004258:	370c      	adds	r7, #12
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8004262:	b480      	push	{r7}
 8004264:	b083      	sub	sp, #12
 8004266:	af00      	add	r7, sp, #0
 8004268:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 800426a:	bf00      	nop
 800426c:	370c      	adds	r7, #12
 800426e:	46bd      	mov	sp, r7
 8004270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004274:	4770      	bx	lr

08004276 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8004276:	b480      	push	{r7}
 8004278:	b083      	sub	sp, #12
 800427a:	af00      	add	r7, sp, #0
 800427c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 800427e:	bf00      	nop
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004292:	bf00      	nop
 8004294:	370c      	adds	r7, #12
 8004296:	46bd      	mov	sp, r7
 8004298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800429c:	4770      	bx	lr

0800429e <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800429e:	b480      	push	{r7}
 80042a0:	b083      	sub	sp, #12
 80042a2:	af00      	add	r7, sp, #0
 80042a4:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80042a6:	bf00      	nop
 80042a8:	370c      	adds	r7, #12
 80042aa:	46bd      	mov	sp, r7
 80042ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042b0:	4770      	bx	lr

080042b2 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80042b2:	b480      	push	{r7}
 80042b4:	b083      	sub	sp, #12
 80042b6:	af00      	add	r7, sp, #0
 80042b8:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 80042ba:	bf00      	nop
 80042bc:	370c      	adds	r7, #12
 80042be:	46bd      	mov	sp, r7
 80042c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c4:	4770      	bx	lr
	...

080042c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042c8:	b480      	push	{r7}
 80042ca:	b085      	sub	sp, #20
 80042cc:	af00      	add	r7, sp, #0
 80042ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	f003 0307 	and.w	r3, r3, #7
 80042d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80042d8:	4b0b      	ldr	r3, [pc, #44]	; (8004308 <__NVIC_SetPriorityGrouping+0x40>)
 80042da:	68db      	ldr	r3, [r3, #12]
 80042dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80042e4:	4013      	ands	r3, r2
 80042e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80042f0:	4b06      	ldr	r3, [pc, #24]	; (800430c <__NVIC_SetPriorityGrouping+0x44>)
 80042f2:	4313      	orrs	r3, r2
 80042f4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80042f6:	4a04      	ldr	r2, [pc, #16]	; (8004308 <__NVIC_SetPriorityGrouping+0x40>)
 80042f8:	68bb      	ldr	r3, [r7, #8]
 80042fa:	60d3      	str	r3, [r2, #12]
}
 80042fc:	bf00      	nop
 80042fe:	3714      	adds	r7, #20
 8004300:	46bd      	mov	sp, r7
 8004302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004306:	4770      	bx	lr
 8004308:	e000ed00 	.word	0xe000ed00
 800430c:	05fa0000 	.word	0x05fa0000

08004310 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004310:	b480      	push	{r7}
 8004312:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004314:	4b04      	ldr	r3, [pc, #16]	; (8004328 <__NVIC_GetPriorityGrouping+0x18>)
 8004316:	68db      	ldr	r3, [r3, #12]
 8004318:	0a1b      	lsrs	r3, r3, #8
 800431a:	f003 0307 	and.w	r3, r3, #7
}
 800431e:	4618      	mov	r0, r3
 8004320:	46bd      	mov	sp, r7
 8004322:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004326:	4770      	bx	lr
 8004328:	e000ed00 	.word	0xe000ed00

0800432c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800432c:	b480      	push	{r7}
 800432e:	b083      	sub	sp, #12
 8004330:	af00      	add	r7, sp, #0
 8004332:	4603      	mov	r3, r0
 8004334:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800433a:	2b00      	cmp	r3, #0
 800433c:	db0b      	blt.n	8004356 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800433e:	79fb      	ldrb	r3, [r7, #7]
 8004340:	f003 021f 	and.w	r2, r3, #31
 8004344:	4907      	ldr	r1, [pc, #28]	; (8004364 <__NVIC_EnableIRQ+0x38>)
 8004346:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434a:	095b      	lsrs	r3, r3, #5
 800434c:	2001      	movs	r0, #1
 800434e:	fa00 f202 	lsl.w	r2, r0, r2
 8004352:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004356:	bf00      	nop
 8004358:	370c      	adds	r7, #12
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	e000e100 	.word	0xe000e100

08004368 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	4603      	mov	r3, r0
 8004370:	6039      	str	r1, [r7, #0]
 8004372:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004374:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004378:	2b00      	cmp	r3, #0
 800437a:	db0a      	blt.n	8004392 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	b2da      	uxtb	r2, r3
 8004380:	490c      	ldr	r1, [pc, #48]	; (80043b4 <__NVIC_SetPriority+0x4c>)
 8004382:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004386:	0112      	lsls	r2, r2, #4
 8004388:	b2d2      	uxtb	r2, r2
 800438a:	440b      	add	r3, r1
 800438c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004390:	e00a      	b.n	80043a8 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	b2da      	uxtb	r2, r3
 8004396:	4908      	ldr	r1, [pc, #32]	; (80043b8 <__NVIC_SetPriority+0x50>)
 8004398:	79fb      	ldrb	r3, [r7, #7]
 800439a:	f003 030f 	and.w	r3, r3, #15
 800439e:	3b04      	subs	r3, #4
 80043a0:	0112      	lsls	r2, r2, #4
 80043a2:	b2d2      	uxtb	r2, r2
 80043a4:	440b      	add	r3, r1
 80043a6:	761a      	strb	r2, [r3, #24]
}
 80043a8:	bf00      	nop
 80043aa:	370c      	adds	r7, #12
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	e000e100 	.word	0xe000e100
 80043b8:	e000ed00 	.word	0xe000ed00

080043bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80043bc:	b480      	push	{r7}
 80043be:	b089      	sub	sp, #36	; 0x24
 80043c0:	af00      	add	r7, sp, #0
 80043c2:	60f8      	str	r0, [r7, #12]
 80043c4:	60b9      	str	r1, [r7, #8]
 80043c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f003 0307 	and.w	r3, r3, #7
 80043ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043d0:	69fb      	ldr	r3, [r7, #28]
 80043d2:	f1c3 0307 	rsb	r3, r3, #7
 80043d6:	2b04      	cmp	r3, #4
 80043d8:	bf28      	it	cs
 80043da:	2304      	movcs	r3, #4
 80043dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043de:	69fb      	ldr	r3, [r7, #28]
 80043e0:	3304      	adds	r3, #4
 80043e2:	2b06      	cmp	r3, #6
 80043e4:	d902      	bls.n	80043ec <NVIC_EncodePriority+0x30>
 80043e6:	69fb      	ldr	r3, [r7, #28]
 80043e8:	3b03      	subs	r3, #3
 80043ea:	e000      	b.n	80043ee <NVIC_EncodePriority+0x32>
 80043ec:	2300      	movs	r3, #0
 80043ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f0:	f04f 32ff 	mov.w	r2, #4294967295
 80043f4:	69bb      	ldr	r3, [r7, #24]
 80043f6:	fa02 f303 	lsl.w	r3, r2, r3
 80043fa:	43da      	mvns	r2, r3
 80043fc:	68bb      	ldr	r3, [r7, #8]
 80043fe:	401a      	ands	r2, r3
 8004400:	697b      	ldr	r3, [r7, #20]
 8004402:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004404:	f04f 31ff 	mov.w	r1, #4294967295
 8004408:	697b      	ldr	r3, [r7, #20]
 800440a:	fa01 f303 	lsl.w	r3, r1, r3
 800440e:	43d9      	mvns	r1, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004414:	4313      	orrs	r3, r2
         );
}
 8004416:	4618      	mov	r0, r3
 8004418:	3724      	adds	r7, #36	; 0x24
 800441a:	46bd      	mov	sp, r7
 800441c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004420:	4770      	bx	lr
	...

08004424 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	3b01      	subs	r3, #1
 8004430:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004434:	d301      	bcc.n	800443a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004436:	2301      	movs	r3, #1
 8004438:	e00f      	b.n	800445a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800443a:	4a0a      	ldr	r2, [pc, #40]	; (8004464 <SysTick_Config+0x40>)
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	3b01      	subs	r3, #1
 8004440:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004442:	210f      	movs	r1, #15
 8004444:	f04f 30ff 	mov.w	r0, #4294967295
 8004448:	f7ff ff8e 	bl	8004368 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800444c:	4b05      	ldr	r3, [pc, #20]	; (8004464 <SysTick_Config+0x40>)
 800444e:	2200      	movs	r2, #0
 8004450:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004452:	4b04      	ldr	r3, [pc, #16]	; (8004464 <SysTick_Config+0x40>)
 8004454:	2207      	movs	r2, #7
 8004456:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004458:	2300      	movs	r3, #0
}
 800445a:	4618      	mov	r0, r3
 800445c:	3708      	adds	r7, #8
 800445e:	46bd      	mov	sp, r7
 8004460:	bd80      	pop	{r7, pc}
 8004462:	bf00      	nop
 8004464:	e000e010 	.word	0xe000e010

08004468 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004468:	b580      	push	{r7, lr}
 800446a:	b082      	sub	sp, #8
 800446c:	af00      	add	r7, sp, #0
 800446e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004470:	6878      	ldr	r0, [r7, #4]
 8004472:	f7ff ff29 	bl	80042c8 <__NVIC_SetPriorityGrouping>
}
 8004476:	bf00      	nop
 8004478:	3708      	adds	r7, #8
 800447a:	46bd      	mov	sp, r7
 800447c:	bd80      	pop	{r7, pc}

0800447e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800447e:	b580      	push	{r7, lr}
 8004480:	b086      	sub	sp, #24
 8004482:	af00      	add	r7, sp, #0
 8004484:	4603      	mov	r3, r0
 8004486:	60b9      	str	r1, [r7, #8]
 8004488:	607a      	str	r2, [r7, #4]
 800448a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800448c:	2300      	movs	r3, #0
 800448e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004490:	f7ff ff3e 	bl	8004310 <__NVIC_GetPriorityGrouping>
 8004494:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004496:	687a      	ldr	r2, [r7, #4]
 8004498:	68b9      	ldr	r1, [r7, #8]
 800449a:	6978      	ldr	r0, [r7, #20]
 800449c:	f7ff ff8e 	bl	80043bc <NVIC_EncodePriority>
 80044a0:	4602      	mov	r2, r0
 80044a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80044a6:	4611      	mov	r1, r2
 80044a8:	4618      	mov	r0, r3
 80044aa:	f7ff ff5d 	bl	8004368 <__NVIC_SetPriority>
}
 80044ae:	bf00      	nop
 80044b0:	3718      	adds	r7, #24
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bd80      	pop	{r7, pc}

080044b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80044b6:	b580      	push	{r7, lr}
 80044b8:	b082      	sub	sp, #8
 80044ba:	af00      	add	r7, sp, #0
 80044bc:	4603      	mov	r3, r0
 80044be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80044c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80044c4:	4618      	mov	r0, r3
 80044c6:	f7ff ff31 	bl	800432c <__NVIC_EnableIRQ>
}
 80044ca:	bf00      	nop
 80044cc:	3708      	adds	r7, #8
 80044ce:	46bd      	mov	sp, r7
 80044d0:	bd80      	pop	{r7, pc}

080044d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80044d2:	b580      	push	{r7, lr}
 80044d4:	b082      	sub	sp, #8
 80044d6:	af00      	add	r7, sp, #0
 80044d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f7ff ffa2 	bl	8004424 <SysTick_Config>
 80044e0:	4603      	mov	r3, r0
}
 80044e2:	4618      	mov	r0, r3
 80044e4:	3708      	adds	r7, #8
 80044e6:	46bd      	mov	sp, r7
 80044e8:	bd80      	pop	{r7, pc}

080044ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80044ea:	b580      	push	{r7, lr}
 80044ec:	b084      	sub	sp, #16
 80044ee:	af00      	add	r7, sp, #0
 80044f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80044f8:	f7ff f81e 	bl	8003538 <HAL_GetTick>
 80044fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004504:	b2db      	uxtb	r3, r3
 8004506:	2b02      	cmp	r3, #2
 8004508:	d008      	beq.n	800451c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	2280      	movs	r2, #128	; 0x80
 800450e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2200      	movs	r2, #0
 8004514:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e052      	b.n	80045c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f022 0216 	bic.w	r2, r2, #22
 800452a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	695a      	ldr	r2, [r3, #20]
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800453a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004540:	2b00      	cmp	r3, #0
 8004542:	d103      	bne.n	800454c <HAL_DMA_Abort+0x62>
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004548:	2b00      	cmp	r3, #0
 800454a:	d007      	beq.n	800455c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	f022 0208 	bic.w	r2, r2, #8
 800455a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	681a      	ldr	r2, [r3, #0]
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f022 0201 	bic.w	r2, r2, #1
 800456a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800456c:	e013      	b.n	8004596 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800456e:	f7fe ffe3 	bl	8003538 <HAL_GetTick>
 8004572:	4602      	mov	r2, r0
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	1ad3      	subs	r3, r2, r3
 8004578:	2b05      	cmp	r3, #5
 800457a:	d90c      	bls.n	8004596 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2220      	movs	r2, #32
 8004580:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	2203      	movs	r2, #3
 8004586:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	2200      	movs	r2, #0
 800458e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8004592:	2303      	movs	r3, #3
 8004594:	e015      	b.n	80045c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f003 0301 	and.w	r3, r3, #1
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d1e4      	bne.n	800456e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80045a8:	223f      	movs	r2, #63	; 0x3f
 80045aa:	409a      	lsls	r2, r3
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2200      	movs	r2, #0
 80045bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3710      	adds	r7, #16
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}

080045ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80045ca:	b480      	push	{r7}
 80045cc:	b083      	sub	sp, #12
 80045ce:	af00      	add	r7, sp, #0
 80045d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80045d8:	b2db      	uxtb	r3, r3
 80045da:	2b02      	cmp	r3, #2
 80045dc:	d004      	beq.n	80045e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2280      	movs	r2, #128	; 0x80
 80045e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80045e4:	2301      	movs	r3, #1
 80045e6:	e00c      	b.n	8004602 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	2205      	movs	r2, #5
 80045ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	681a      	ldr	r2, [r3, #0]
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f022 0201 	bic.w	r2, r2, #1
 80045fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004600:	2300      	movs	r3, #0
}
 8004602:	4618      	mov	r0, r3
 8004604:	370c      	adds	r7, #12
 8004606:	46bd      	mov	sp, r7
 8004608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800460c:	4770      	bx	lr
	...

08004610 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004610:	b480      	push	{r7}
 8004612:	b089      	sub	sp, #36	; 0x24
 8004614:	af00      	add	r7, sp, #0
 8004616:	6078      	str	r0, [r7, #4]
 8004618:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800461a:	2300      	movs	r3, #0
 800461c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800461e:	2300      	movs	r3, #0
 8004620:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8004622:	2300      	movs	r3, #0
 8004624:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8004626:	2300      	movs	r3, #0
 8004628:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800462a:	2300      	movs	r3, #0
 800462c:	61fb      	str	r3, [r7, #28]
 800462e:	e175      	b.n	800491c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8004630:	2201      	movs	r2, #1
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	4013      	ands	r3, r2
 8004642:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004644:	693a      	ldr	r2, [r7, #16]
 8004646:	697b      	ldr	r3, [r7, #20]
 8004648:	429a      	cmp	r2, r3
 800464a:	f040 8164 	bne.w	8004916 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800464e:	683b      	ldr	r3, [r7, #0]
 8004650:	685b      	ldr	r3, [r3, #4]
 8004652:	f003 0303 	and.w	r3, r3, #3
 8004656:	2b01      	cmp	r3, #1
 8004658:	d005      	beq.n	8004666 <HAL_GPIO_Init+0x56>
 800465a:	683b      	ldr	r3, [r7, #0]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	f003 0303 	and.w	r3, r3, #3
 8004662:	2b02      	cmp	r3, #2
 8004664:	d130      	bne.n	80046c8 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	689b      	ldr	r3, [r3, #8]
 800466a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800466c:	69fb      	ldr	r3, [r7, #28]
 800466e:	005b      	lsls	r3, r3, #1
 8004670:	2203      	movs	r2, #3
 8004672:	fa02 f303 	lsl.w	r3, r2, r3
 8004676:	43db      	mvns	r3, r3
 8004678:	69ba      	ldr	r2, [r7, #24]
 800467a:	4013      	ands	r3, r2
 800467c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800467e:	683b      	ldr	r3, [r7, #0]
 8004680:	68da      	ldr	r2, [r3, #12]
 8004682:	69fb      	ldr	r3, [r7, #28]
 8004684:	005b      	lsls	r3, r3, #1
 8004686:	fa02 f303 	lsl.w	r3, r2, r3
 800468a:	69ba      	ldr	r2, [r7, #24]
 800468c:	4313      	orrs	r3, r2
 800468e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	69ba      	ldr	r2, [r7, #24]
 8004694:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	685b      	ldr	r3, [r3, #4]
 800469a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800469c:	2201      	movs	r2, #1
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	fa02 f303 	lsl.w	r3, r2, r3
 80046a4:	43db      	mvns	r3, r3
 80046a6:	69ba      	ldr	r2, [r7, #24]
 80046a8:	4013      	ands	r3, r2
 80046aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80046ac:	683b      	ldr	r3, [r7, #0]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	091b      	lsrs	r3, r3, #4
 80046b2:	f003 0201 	and.w	r2, r3, #1
 80046b6:	69fb      	ldr	r3, [r7, #28]
 80046b8:	fa02 f303 	lsl.w	r3, r2, r3
 80046bc:	69ba      	ldr	r2, [r7, #24]
 80046be:	4313      	orrs	r3, r2
 80046c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	69ba      	ldr	r2, [r7, #24]
 80046c6:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	f003 0303 	and.w	r3, r3, #3
 80046d0:	2b03      	cmp	r3, #3
 80046d2:	d017      	beq.n	8004704 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80046da:	69fb      	ldr	r3, [r7, #28]
 80046dc:	005b      	lsls	r3, r3, #1
 80046de:	2203      	movs	r2, #3
 80046e0:	fa02 f303 	lsl.w	r3, r2, r3
 80046e4:	43db      	mvns	r3, r3
 80046e6:	69ba      	ldr	r2, [r7, #24]
 80046e8:	4013      	ands	r3, r2
 80046ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80046ec:	683b      	ldr	r3, [r7, #0]
 80046ee:	689a      	ldr	r2, [r3, #8]
 80046f0:	69fb      	ldr	r3, [r7, #28]
 80046f2:	005b      	lsls	r3, r3, #1
 80046f4:	fa02 f303 	lsl.w	r3, r2, r3
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	4313      	orrs	r3, r2
 80046fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	69ba      	ldr	r2, [r7, #24]
 8004702:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f003 0303 	and.w	r3, r3, #3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d123      	bne.n	8004758 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8004710:	69fb      	ldr	r3, [r7, #28]
 8004712:	08da      	lsrs	r2, r3, #3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	3208      	adds	r2, #8
 8004718:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800471c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800471e:	69fb      	ldr	r3, [r7, #28]
 8004720:	f003 0307 	and.w	r3, r3, #7
 8004724:	009b      	lsls	r3, r3, #2
 8004726:	220f      	movs	r2, #15
 8004728:	fa02 f303 	lsl.w	r3, r2, r3
 800472c:	43db      	mvns	r3, r3
 800472e:	69ba      	ldr	r2, [r7, #24]
 8004730:	4013      	ands	r3, r2
 8004732:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8004734:	683b      	ldr	r3, [r7, #0]
 8004736:	691a      	ldr	r2, [r3, #16]
 8004738:	69fb      	ldr	r3, [r7, #28]
 800473a:	f003 0307 	and.w	r3, r3, #7
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	fa02 f303 	lsl.w	r3, r2, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4313      	orrs	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	08da      	lsrs	r2, r3, #3
 800474e:	687b      	ldr	r3, [r7, #4]
 8004750:	3208      	adds	r2, #8
 8004752:	69b9      	ldr	r1, [r7, #24]
 8004754:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800475e:	69fb      	ldr	r3, [r7, #28]
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	2203      	movs	r2, #3
 8004764:	fa02 f303 	lsl.w	r3, r2, r3
 8004768:	43db      	mvns	r3, r3
 800476a:	69ba      	ldr	r2, [r7, #24]
 800476c:	4013      	ands	r3, r2
 800476e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8004770:	683b      	ldr	r3, [r7, #0]
 8004772:	685b      	ldr	r3, [r3, #4]
 8004774:	f003 0203 	and.w	r2, r3, #3
 8004778:	69fb      	ldr	r3, [r7, #28]
 800477a:	005b      	lsls	r3, r3, #1
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	69ba      	ldr	r2, [r7, #24]
 8004782:	4313      	orrs	r3, r2
 8004784:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	69ba      	ldr	r2, [r7, #24]
 800478a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800478c:	683b      	ldr	r3, [r7, #0]
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004794:	2b00      	cmp	r3, #0
 8004796:	f000 80be 	beq.w	8004916 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800479a:	4b66      	ldr	r3, [pc, #408]	; (8004934 <HAL_GPIO_Init+0x324>)
 800479c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800479e:	4a65      	ldr	r2, [pc, #404]	; (8004934 <HAL_GPIO_Init+0x324>)
 80047a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80047a4:	6453      	str	r3, [r2, #68]	; 0x44
 80047a6:	4b63      	ldr	r3, [pc, #396]	; (8004934 <HAL_GPIO_Init+0x324>)
 80047a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80047ae:	60fb      	str	r3, [r7, #12]
 80047b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80047b2:	4a61      	ldr	r2, [pc, #388]	; (8004938 <HAL_GPIO_Init+0x328>)
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	089b      	lsrs	r3, r3, #2
 80047b8:	3302      	adds	r3, #2
 80047ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047be:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80047c0:	69fb      	ldr	r3, [r7, #28]
 80047c2:	f003 0303 	and.w	r3, r3, #3
 80047c6:	009b      	lsls	r3, r3, #2
 80047c8:	220f      	movs	r2, #15
 80047ca:	fa02 f303 	lsl.w	r3, r2, r3
 80047ce:	43db      	mvns	r3, r3
 80047d0:	69ba      	ldr	r2, [r7, #24]
 80047d2:	4013      	ands	r3, r2
 80047d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	4a58      	ldr	r2, [pc, #352]	; (800493c <HAL_GPIO_Init+0x32c>)
 80047da:	4293      	cmp	r3, r2
 80047dc:	d037      	beq.n	800484e <HAL_GPIO_Init+0x23e>
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a57      	ldr	r2, [pc, #348]	; (8004940 <HAL_GPIO_Init+0x330>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d031      	beq.n	800484a <HAL_GPIO_Init+0x23a>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	4a56      	ldr	r2, [pc, #344]	; (8004944 <HAL_GPIO_Init+0x334>)
 80047ea:	4293      	cmp	r3, r2
 80047ec:	d02b      	beq.n	8004846 <HAL_GPIO_Init+0x236>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a55      	ldr	r2, [pc, #340]	; (8004948 <HAL_GPIO_Init+0x338>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d025      	beq.n	8004842 <HAL_GPIO_Init+0x232>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a54      	ldr	r2, [pc, #336]	; (800494c <HAL_GPIO_Init+0x33c>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d01f      	beq.n	800483e <HAL_GPIO_Init+0x22e>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a53      	ldr	r2, [pc, #332]	; (8004950 <HAL_GPIO_Init+0x340>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d019      	beq.n	800483a <HAL_GPIO_Init+0x22a>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a52      	ldr	r2, [pc, #328]	; (8004954 <HAL_GPIO_Init+0x344>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d013      	beq.n	8004836 <HAL_GPIO_Init+0x226>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a51      	ldr	r2, [pc, #324]	; (8004958 <HAL_GPIO_Init+0x348>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d00d      	beq.n	8004832 <HAL_GPIO_Init+0x222>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a50      	ldr	r2, [pc, #320]	; (800495c <HAL_GPIO_Init+0x34c>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d007      	beq.n	800482e <HAL_GPIO_Init+0x21e>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a4f      	ldr	r2, [pc, #316]	; (8004960 <HAL_GPIO_Init+0x350>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d101      	bne.n	800482a <HAL_GPIO_Init+0x21a>
 8004826:	2309      	movs	r3, #9
 8004828:	e012      	b.n	8004850 <HAL_GPIO_Init+0x240>
 800482a:	230a      	movs	r3, #10
 800482c:	e010      	b.n	8004850 <HAL_GPIO_Init+0x240>
 800482e:	2308      	movs	r3, #8
 8004830:	e00e      	b.n	8004850 <HAL_GPIO_Init+0x240>
 8004832:	2307      	movs	r3, #7
 8004834:	e00c      	b.n	8004850 <HAL_GPIO_Init+0x240>
 8004836:	2306      	movs	r3, #6
 8004838:	e00a      	b.n	8004850 <HAL_GPIO_Init+0x240>
 800483a:	2305      	movs	r3, #5
 800483c:	e008      	b.n	8004850 <HAL_GPIO_Init+0x240>
 800483e:	2304      	movs	r3, #4
 8004840:	e006      	b.n	8004850 <HAL_GPIO_Init+0x240>
 8004842:	2303      	movs	r3, #3
 8004844:	e004      	b.n	8004850 <HAL_GPIO_Init+0x240>
 8004846:	2302      	movs	r3, #2
 8004848:	e002      	b.n	8004850 <HAL_GPIO_Init+0x240>
 800484a:	2301      	movs	r3, #1
 800484c:	e000      	b.n	8004850 <HAL_GPIO_Init+0x240>
 800484e:	2300      	movs	r3, #0
 8004850:	69fa      	ldr	r2, [r7, #28]
 8004852:	f002 0203 	and.w	r2, r2, #3
 8004856:	0092      	lsls	r2, r2, #2
 8004858:	4093      	lsls	r3, r2
 800485a:	69ba      	ldr	r2, [r7, #24]
 800485c:	4313      	orrs	r3, r2
 800485e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8004860:	4935      	ldr	r1, [pc, #212]	; (8004938 <HAL_GPIO_Init+0x328>)
 8004862:	69fb      	ldr	r3, [r7, #28]
 8004864:	089b      	lsrs	r3, r3, #2
 8004866:	3302      	adds	r3, #2
 8004868:	69ba      	ldr	r2, [r7, #24]
 800486a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800486e:	4b3d      	ldr	r3, [pc, #244]	; (8004964 <HAL_GPIO_Init+0x354>)
 8004870:	689b      	ldr	r3, [r3, #8]
 8004872:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004874:	693b      	ldr	r3, [r7, #16]
 8004876:	43db      	mvns	r3, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4013      	ands	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	685b      	ldr	r3, [r3, #4]
 8004882:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004886:	2b00      	cmp	r3, #0
 8004888:	d003      	beq.n	8004892 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	4313      	orrs	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004892:	4a34      	ldr	r2, [pc, #208]	; (8004964 <HAL_GPIO_Init+0x354>)
 8004894:	69bb      	ldr	r3, [r7, #24]
 8004896:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004898:	4b32      	ldr	r3, [pc, #200]	; (8004964 <HAL_GPIO_Init+0x354>)
 800489a:	68db      	ldr	r3, [r3, #12]
 800489c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800489e:	693b      	ldr	r3, [r7, #16]
 80048a0:	43db      	mvns	r3, r3
 80048a2:	69ba      	ldr	r2, [r7, #24]
 80048a4:	4013      	ands	r3, r2
 80048a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80048a8:	683b      	ldr	r3, [r7, #0]
 80048aa:	685b      	ldr	r3, [r3, #4]
 80048ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d003      	beq.n	80048bc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80048b4:	69ba      	ldr	r2, [r7, #24]
 80048b6:	693b      	ldr	r3, [r7, #16]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80048bc:	4a29      	ldr	r2, [pc, #164]	; (8004964 <HAL_GPIO_Init+0x354>)
 80048be:	69bb      	ldr	r3, [r7, #24]
 80048c0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80048c2:	4b28      	ldr	r3, [pc, #160]	; (8004964 <HAL_GPIO_Init+0x354>)
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048c8:	693b      	ldr	r3, [r7, #16]
 80048ca:	43db      	mvns	r3, r3
 80048cc:	69ba      	ldr	r2, [r7, #24]
 80048ce:	4013      	ands	r3, r2
 80048d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	685b      	ldr	r3, [r3, #4]
 80048d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d003      	beq.n	80048e6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80048de:	69ba      	ldr	r2, [r7, #24]
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	4313      	orrs	r3, r2
 80048e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80048e6:	4a1f      	ldr	r2, [pc, #124]	; (8004964 <HAL_GPIO_Init+0x354>)
 80048e8:	69bb      	ldr	r3, [r7, #24]
 80048ea:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80048ec:	4b1d      	ldr	r3, [pc, #116]	; (8004964 <HAL_GPIO_Init+0x354>)
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	43db      	mvns	r3, r3
 80048f6:	69ba      	ldr	r2, [r7, #24]
 80048f8:	4013      	ands	r3, r2
 80048fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80048fc:	683b      	ldr	r3, [r7, #0]
 80048fe:	685b      	ldr	r3, [r3, #4]
 8004900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004904:	2b00      	cmp	r3, #0
 8004906:	d003      	beq.n	8004910 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8004908:	69ba      	ldr	r2, [r7, #24]
 800490a:	693b      	ldr	r3, [r7, #16]
 800490c:	4313      	orrs	r3, r2
 800490e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004910:	4a14      	ldr	r2, [pc, #80]	; (8004964 <HAL_GPIO_Init+0x354>)
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	3301      	adds	r3, #1
 800491a:	61fb      	str	r3, [r7, #28]
 800491c:	69fb      	ldr	r3, [r7, #28]
 800491e:	2b0f      	cmp	r3, #15
 8004920:	f67f ae86 	bls.w	8004630 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004924:	bf00      	nop
 8004926:	bf00      	nop
 8004928:	3724      	adds	r7, #36	; 0x24
 800492a:	46bd      	mov	sp, r7
 800492c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004930:	4770      	bx	lr
 8004932:	bf00      	nop
 8004934:	40023800 	.word	0x40023800
 8004938:	40013800 	.word	0x40013800
 800493c:	40020000 	.word	0x40020000
 8004940:	40020400 	.word	0x40020400
 8004944:	40020800 	.word	0x40020800
 8004948:	40020c00 	.word	0x40020c00
 800494c:	40021000 	.word	0x40021000
 8004950:	40021400 	.word	0x40021400
 8004954:	40021800 	.word	0x40021800
 8004958:	40021c00 	.word	0x40021c00
 800495c:	40022000 	.word	0x40022000
 8004960:	40022400 	.word	0x40022400
 8004964:	40013c00 	.word	0x40013c00

08004968 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004968:	b480      	push	{r7}
 800496a:	b083      	sub	sp, #12
 800496c:	af00      	add	r7, sp, #0
 800496e:	6078      	str	r0, [r7, #4]
 8004970:	460b      	mov	r3, r1
 8004972:	807b      	strh	r3, [r7, #2]
 8004974:	4613      	mov	r3, r2
 8004976:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004978:	787b      	ldrb	r3, [r7, #1]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d003      	beq.n	8004986 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800497e:	887a      	ldrh	r2, [r7, #2]
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8004984:	e003      	b.n	800498e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8004986:	887b      	ldrh	r3, [r7, #2]
 8004988:	041a      	lsls	r2, r3, #16
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	619a      	str	r2, [r3, #24]
}
 800498e:	bf00      	nop
 8004990:	370c      	adds	r7, #12
 8004992:	46bd      	mov	sp, r7
 8004994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004998:	4770      	bx	lr

0800499a <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800499a:	b480      	push	{r7}
 800499c:	b085      	sub	sp, #20
 800499e:	af00      	add	r7, sp, #0
 80049a0:	6078      	str	r0, [r7, #4]
 80049a2:	460b      	mov	r3, r1
 80049a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	695b      	ldr	r3, [r3, #20]
 80049aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80049ac:	887a      	ldrh	r2, [r7, #2]
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4013      	ands	r3, r2
 80049b2:	041a      	lsls	r2, r3, #16
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	43d9      	mvns	r1, r3
 80049b8:	887b      	ldrh	r3, [r7, #2]
 80049ba:	400b      	ands	r3, r1
 80049bc:	431a      	orrs	r2, r3
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	619a      	str	r2, [r3, #24]
}
 80049c2:	bf00      	nop
 80049c4:	3714      	adds	r7, #20
 80049c6:	46bd      	mov	sp, r7
 80049c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049cc:	4770      	bx	lr
	...

080049d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b082      	sub	sp, #8
 80049d4:	af00      	add	r7, sp, #0
 80049d6:	4603      	mov	r3, r0
 80049d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80049da:	4b08      	ldr	r3, [pc, #32]	; (80049fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049dc:	695a      	ldr	r2, [r3, #20]
 80049de:	88fb      	ldrh	r3, [r7, #6]
 80049e0:	4013      	ands	r3, r2
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d006      	beq.n	80049f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80049e6:	4a05      	ldr	r2, [pc, #20]	; (80049fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80049e8:	88fb      	ldrh	r3, [r7, #6]
 80049ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80049ec:	88fb      	ldrh	r3, [r7, #6]
 80049ee:	4618      	mov	r0, r3
 80049f0:	f7fc f9fc 	bl	8000dec <HAL_GPIO_EXTI_Callback>
  }
}
 80049f4:	bf00      	nop
 80049f6:	3708      	adds	r7, #8
 80049f8:	46bd      	mov	sp, r7
 80049fa:	bd80      	pop	{r7, pc}
 80049fc:	40013c00 	.word	0x40013c00

08004a00 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8004a00:	b580      	push	{r7, lr}
 8004a02:	b082      	sub	sp, #8
 8004a04:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8004a06:	2300      	movs	r3, #0
 8004a08:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8004a0a:	4b23      	ldr	r3, [pc, #140]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a0e:	4a22      	ldr	r2, [pc, #136]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a10:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a14:	6413      	str	r3, [r2, #64]	; 0x40
 8004a16:	4b20      	ldr	r3, [pc, #128]	; (8004a98 <HAL_PWREx_EnableOverDrive+0x98>)
 8004a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004a1e:	603b      	str	r3, [r7, #0]
 8004a20:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8004a22:	4b1e      	ldr	r3, [pc, #120]	; (8004a9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	4a1d      	ldr	r2, [pc, #116]	; (8004a9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a2c:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a2e:	f7fe fd83 	bl	8003538 <HAL_GetTick>
 8004a32:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a34:	e009      	b.n	8004a4a <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a36:	f7fe fd7f 	bl	8003538 <HAL_GetTick>
 8004a3a:	4602      	mov	r2, r0
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	1ad3      	subs	r3, r2, r3
 8004a40:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a44:	d901      	bls.n	8004a4a <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e022      	b.n	8004a90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8004a4a:	4b14      	ldr	r3, [pc, #80]	; (8004a9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a4c:	685b      	ldr	r3, [r3, #4]
 8004a4e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a56:	d1ee      	bne.n	8004a36 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8004a58:	4b10      	ldr	r3, [pc, #64]	; (8004a9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	4a0f      	ldr	r2, [pc, #60]	; (8004a9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a5e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004a62:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004a64:	f7fe fd68 	bl	8003538 <HAL_GetTick>
 8004a68:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a6a:	e009      	b.n	8004a80 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8004a6c:	f7fe fd64 	bl	8003538 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004a7a:	d901      	bls.n	8004a80 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8004a7c:	2303      	movs	r3, #3
 8004a7e:	e007      	b.n	8004a90 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8004a80:	4b06      	ldr	r3, [pc, #24]	; (8004a9c <HAL_PWREx_EnableOverDrive+0x9c>)
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a8c:	d1ee      	bne.n	8004a6c <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8004a8e:	2300      	movs	r3, #0
}
 8004a90:	4618      	mov	r0, r3
 8004a92:	3708      	adds	r7, #8
 8004a94:	46bd      	mov	sp, r7
 8004a96:	bd80      	pop	{r7, pc}
 8004a98:	40023800 	.word	0x40023800
 8004a9c:	40007000 	.word	0x40007000

08004aa0 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b086      	sub	sp, #24
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d101      	bne.n	8004ab6 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8004ab2:	2301      	movs	r3, #1
 8004ab4:	e291      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0301 	and.w	r3, r3, #1
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	f000 8087 	beq.w	8004bd2 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8004ac4:	4b96      	ldr	r3, [pc, #600]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004ac6:	689b      	ldr	r3, [r3, #8]
 8004ac8:	f003 030c 	and.w	r3, r3, #12
 8004acc:	2b04      	cmp	r3, #4
 8004ace:	d00c      	beq.n	8004aea <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ad0:	4b93      	ldr	r3, [pc, #588]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004ad2:	689b      	ldr	r3, [r3, #8]
 8004ad4:	f003 030c 	and.w	r3, r3, #12
 8004ad8:	2b08      	cmp	r3, #8
 8004ada:	d112      	bne.n	8004b02 <HAL_RCC_OscConfig+0x62>
 8004adc:	4b90      	ldr	r3, [pc, #576]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004ade:	685b      	ldr	r3, [r3, #4]
 8004ae0:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ae4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004ae8:	d10b      	bne.n	8004b02 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004aea:	4b8d      	ldr	r3, [pc, #564]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d06c      	beq.n	8004bd0 <HAL_RCC_OscConfig+0x130>
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d168      	bne.n	8004bd0 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e26b      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004b0a:	d106      	bne.n	8004b1a <HAL_RCC_OscConfig+0x7a>
 8004b0c:	4b84      	ldr	r3, [pc, #528]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	4a83      	ldr	r2, [pc, #524]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b12:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b16:	6013      	str	r3, [r2, #0]
 8004b18:	e02e      	b.n	8004b78 <HAL_RCC_OscConfig+0xd8>
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	2b00      	cmp	r3, #0
 8004b20:	d10c      	bne.n	8004b3c <HAL_RCC_OscConfig+0x9c>
 8004b22:	4b7f      	ldr	r3, [pc, #508]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a7e      	ldr	r2, [pc, #504]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b28:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b2c:	6013      	str	r3, [r2, #0]
 8004b2e:	4b7c      	ldr	r3, [pc, #496]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	4a7b      	ldr	r2, [pc, #492]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b34:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b38:	6013      	str	r3, [r2, #0]
 8004b3a:	e01d      	b.n	8004b78 <HAL_RCC_OscConfig+0xd8>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004b44:	d10c      	bne.n	8004b60 <HAL_RCC_OscConfig+0xc0>
 8004b46:	4b76      	ldr	r3, [pc, #472]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	4a75      	ldr	r2, [pc, #468]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004b50:	6013      	str	r3, [r2, #0]
 8004b52:	4b73      	ldr	r3, [pc, #460]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	4a72      	ldr	r2, [pc, #456]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004b5c:	6013      	str	r3, [r2, #0]
 8004b5e:	e00b      	b.n	8004b78 <HAL_RCC_OscConfig+0xd8>
 8004b60:	4b6f      	ldr	r3, [pc, #444]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4a6e      	ldr	r2, [pc, #440]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004b6a:	6013      	str	r3, [r2, #0]
 8004b6c:	4b6c      	ldr	r3, [pc, #432]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	4a6b      	ldr	r2, [pc, #428]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004b76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	685b      	ldr	r3, [r3, #4]
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d013      	beq.n	8004ba8 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b80:	f7fe fcda 	bl	8003538 <HAL_GetTick>
 8004b84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b86:	e008      	b.n	8004b9a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004b88:	f7fe fcd6 	bl	8003538 <HAL_GetTick>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	693b      	ldr	r3, [r7, #16]
 8004b90:	1ad3      	subs	r3, r2, r3
 8004b92:	2b64      	cmp	r3, #100	; 0x64
 8004b94:	d901      	bls.n	8004b9a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004b96:	2303      	movs	r3, #3
 8004b98:	e21f      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b9a:	4b61      	ldr	r3, [pc, #388]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004b9c:	681b      	ldr	r3, [r3, #0]
 8004b9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	d0f0      	beq.n	8004b88 <HAL_RCC_OscConfig+0xe8>
 8004ba6:	e014      	b.n	8004bd2 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ba8:	f7fe fcc6 	bl	8003538 <HAL_GetTick>
 8004bac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bae:	e008      	b.n	8004bc2 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004bb0:	f7fe fcc2 	bl	8003538 <HAL_GetTick>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	693b      	ldr	r3, [r7, #16]
 8004bb8:	1ad3      	subs	r3, r2, r3
 8004bba:	2b64      	cmp	r3, #100	; 0x64
 8004bbc:	d901      	bls.n	8004bc2 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8004bbe:	2303      	movs	r3, #3
 8004bc0:	e20b      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004bc2:	4b57      	ldr	r3, [pc, #348]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f0      	bne.n	8004bb0 <HAL_RCC_OscConfig+0x110>
 8004bce:	e000      	b.n	8004bd2 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004bd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	f003 0302 	and.w	r3, r3, #2
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d069      	beq.n	8004cb2 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004bde:	4b50      	ldr	r3, [pc, #320]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004be0:	689b      	ldr	r3, [r3, #8]
 8004be2:	f003 030c 	and.w	r3, r3, #12
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00b      	beq.n	8004c02 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004bea:	4b4d      	ldr	r3, [pc, #308]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004bec:	689b      	ldr	r3, [r3, #8]
 8004bee:	f003 030c 	and.w	r3, r3, #12
 8004bf2:	2b08      	cmp	r3, #8
 8004bf4:	d11c      	bne.n	8004c30 <HAL_RCC_OscConfig+0x190>
 8004bf6:	4b4a      	ldr	r3, [pc, #296]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d116      	bne.n	8004c30 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c02:	4b47      	ldr	r3, [pc, #284]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f003 0302 	and.w	r3, r3, #2
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <HAL_RCC_OscConfig+0x17a>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	68db      	ldr	r3, [r3, #12]
 8004c12:	2b01      	cmp	r3, #1
 8004c14:	d001      	beq.n	8004c1a <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e1df      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c1a:	4b41      	ldr	r3, [pc, #260]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	691b      	ldr	r3, [r3, #16]
 8004c26:	00db      	lsls	r3, r3, #3
 8004c28:	493d      	ldr	r1, [pc, #244]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c2a:	4313      	orrs	r3, r2
 8004c2c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c2e:	e040      	b.n	8004cb2 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	68db      	ldr	r3, [r3, #12]
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d023      	beq.n	8004c80 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004c38:	4b39      	ldr	r3, [pc, #228]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4a38      	ldr	r2, [pc, #224]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c3e:	f043 0301 	orr.w	r3, r3, #1
 8004c42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c44:	f7fe fc78 	bl	8003538 <HAL_GetTick>
 8004c48:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c4a:	e008      	b.n	8004c5e <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c4c:	f7fe fc74 	bl	8003538 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	1ad3      	subs	r3, r2, r3
 8004c56:	2b02      	cmp	r3, #2
 8004c58:	d901      	bls.n	8004c5e <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8004c5a:	2303      	movs	r3, #3
 8004c5c:	e1bd      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c5e:	4b30      	ldr	r3, [pc, #192]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f003 0302 	and.w	r3, r3, #2
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d0f0      	beq.n	8004c4c <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004c6a:	4b2d      	ldr	r3, [pc, #180]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c6c:	681b      	ldr	r3, [r3, #0]
 8004c6e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	691b      	ldr	r3, [r3, #16]
 8004c76:	00db      	lsls	r3, r3, #3
 8004c78:	4929      	ldr	r1, [pc, #164]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c7a:	4313      	orrs	r3, r2
 8004c7c:	600b      	str	r3, [r1, #0]
 8004c7e:	e018      	b.n	8004cb2 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004c80:	4b27      	ldr	r3, [pc, #156]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4a26      	ldr	r2, [pc, #152]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004c86:	f023 0301 	bic.w	r3, r3, #1
 8004c8a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004c8c:	f7fe fc54 	bl	8003538 <HAL_GetTick>
 8004c90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004c92:	e008      	b.n	8004ca6 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004c94:	f7fe fc50 	bl	8003538 <HAL_GetTick>
 8004c98:	4602      	mov	r2, r0
 8004c9a:	693b      	ldr	r3, [r7, #16]
 8004c9c:	1ad3      	subs	r3, r2, r3
 8004c9e:	2b02      	cmp	r3, #2
 8004ca0:	d901      	bls.n	8004ca6 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8004ca2:	2303      	movs	r3, #3
 8004ca4:	e199      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004ca6:	4b1e      	ldr	r3, [pc, #120]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0302 	and.w	r3, r3, #2
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d1f0      	bne.n	8004c94 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	f003 0308 	and.w	r3, r3, #8
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d038      	beq.n	8004d30 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	695b      	ldr	r3, [r3, #20]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d019      	beq.n	8004cfa <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004cc6:	4b16      	ldr	r3, [pc, #88]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004cc8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cca:	4a15      	ldr	r2, [pc, #84]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004ccc:	f043 0301 	orr.w	r3, r3, #1
 8004cd0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd2:	f7fe fc31 	bl	8003538 <HAL_GetTick>
 8004cd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cd8:	e008      	b.n	8004cec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004cda:	f7fe fc2d 	bl	8003538 <HAL_GetTick>
 8004cde:	4602      	mov	r2, r0
 8004ce0:	693b      	ldr	r3, [r7, #16]
 8004ce2:	1ad3      	subs	r3, r2, r3
 8004ce4:	2b02      	cmp	r3, #2
 8004ce6:	d901      	bls.n	8004cec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004ce8:	2303      	movs	r3, #3
 8004cea:	e176      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004cec:	4b0c      	ldr	r3, [pc, #48]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004cee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cf0:	f003 0302 	and.w	r3, r3, #2
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	d0f0      	beq.n	8004cda <HAL_RCC_OscConfig+0x23a>
 8004cf8:	e01a      	b.n	8004d30 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004cfa:	4b09      	ldr	r3, [pc, #36]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004cfc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004cfe:	4a08      	ldr	r2, [pc, #32]	; (8004d20 <HAL_RCC_OscConfig+0x280>)
 8004d00:	f023 0301 	bic.w	r3, r3, #1
 8004d04:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d06:	f7fe fc17 	bl	8003538 <HAL_GetTick>
 8004d0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d0c:	e00a      	b.n	8004d24 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004d0e:	f7fe fc13 	bl	8003538 <HAL_GetTick>
 8004d12:	4602      	mov	r2, r0
 8004d14:	693b      	ldr	r3, [r7, #16]
 8004d16:	1ad3      	subs	r3, r2, r3
 8004d18:	2b02      	cmp	r3, #2
 8004d1a:	d903      	bls.n	8004d24 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004d1c:	2303      	movs	r3, #3
 8004d1e:	e15c      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
 8004d20:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d24:	4b91      	ldr	r3, [pc, #580]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004d26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d28:	f003 0302 	and.w	r3, r3, #2
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	d1ee      	bne.n	8004d0e <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	681b      	ldr	r3, [r3, #0]
 8004d34:	f003 0304 	and.w	r3, r3, #4
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	f000 80a4 	beq.w	8004e86 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d3e:	4b8b      	ldr	r3, [pc, #556]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d10d      	bne.n	8004d66 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d4a:	4b88      	ldr	r3, [pc, #544]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d4e:	4a87      	ldr	r2, [pc, #540]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004d50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d54:	6413      	str	r3, [r2, #64]	; 0x40
 8004d56:	4b85      	ldr	r3, [pc, #532]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d5e:	60bb      	str	r3, [r7, #8]
 8004d60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d62:	2301      	movs	r3, #1
 8004d64:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d66:	4b82      	ldr	r3, [pc, #520]	; (8004f70 <HAL_RCC_OscConfig+0x4d0>)
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d6e:	2b00      	cmp	r3, #0
 8004d70:	d118      	bne.n	8004da4 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8004d72:	4b7f      	ldr	r3, [pc, #508]	; (8004f70 <HAL_RCC_OscConfig+0x4d0>)
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	4a7e      	ldr	r2, [pc, #504]	; (8004f70 <HAL_RCC_OscConfig+0x4d0>)
 8004d78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d7e:	f7fe fbdb 	bl	8003538 <HAL_GetTick>
 8004d82:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d84:	e008      	b.n	8004d98 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d86:	f7fe fbd7 	bl	8003538 <HAL_GetTick>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	693b      	ldr	r3, [r7, #16]
 8004d8e:	1ad3      	subs	r3, r2, r3
 8004d90:	2b64      	cmp	r3, #100	; 0x64
 8004d92:	d901      	bls.n	8004d98 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8004d94:	2303      	movs	r3, #3
 8004d96:	e120      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004d98:	4b75      	ldr	r3, [pc, #468]	; (8004f70 <HAL_RCC_OscConfig+0x4d0>)
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d0f0      	beq.n	8004d86 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2b01      	cmp	r3, #1
 8004daa:	d106      	bne.n	8004dba <HAL_RCC_OscConfig+0x31a>
 8004dac:	4b6f      	ldr	r3, [pc, #444]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004db0:	4a6e      	ldr	r2, [pc, #440]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004db2:	f043 0301 	orr.w	r3, r3, #1
 8004db6:	6713      	str	r3, [r2, #112]	; 0x70
 8004db8:	e02d      	b.n	8004e16 <HAL_RCC_OscConfig+0x376>
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	689b      	ldr	r3, [r3, #8]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d10c      	bne.n	8004ddc <HAL_RCC_OscConfig+0x33c>
 8004dc2:	4b6a      	ldr	r3, [pc, #424]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004dc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dc6:	4a69      	ldr	r2, [pc, #420]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004dc8:	f023 0301 	bic.w	r3, r3, #1
 8004dcc:	6713      	str	r3, [r2, #112]	; 0x70
 8004dce:	4b67      	ldr	r3, [pc, #412]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004dd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004dd2:	4a66      	ldr	r2, [pc, #408]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004dd4:	f023 0304 	bic.w	r3, r3, #4
 8004dd8:	6713      	str	r3, [r2, #112]	; 0x70
 8004dda:	e01c      	b.n	8004e16 <HAL_RCC_OscConfig+0x376>
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	689b      	ldr	r3, [r3, #8]
 8004de0:	2b05      	cmp	r3, #5
 8004de2:	d10c      	bne.n	8004dfe <HAL_RCC_OscConfig+0x35e>
 8004de4:	4b61      	ldr	r3, [pc, #388]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004de6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004de8:	4a60      	ldr	r2, [pc, #384]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004dea:	f043 0304 	orr.w	r3, r3, #4
 8004dee:	6713      	str	r3, [r2, #112]	; 0x70
 8004df0:	4b5e      	ldr	r3, [pc, #376]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004df2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004df4:	4a5d      	ldr	r2, [pc, #372]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004df6:	f043 0301 	orr.w	r3, r3, #1
 8004dfa:	6713      	str	r3, [r2, #112]	; 0x70
 8004dfc:	e00b      	b.n	8004e16 <HAL_RCC_OscConfig+0x376>
 8004dfe:	4b5b      	ldr	r3, [pc, #364]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e00:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e02:	4a5a      	ldr	r2, [pc, #360]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e04:	f023 0301 	bic.w	r3, r3, #1
 8004e08:	6713      	str	r3, [r2, #112]	; 0x70
 8004e0a:	4b58      	ldr	r3, [pc, #352]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e0e:	4a57      	ldr	r2, [pc, #348]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e10:	f023 0304 	bic.w	r3, r3, #4
 8004e14:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	689b      	ldr	r3, [r3, #8]
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	d015      	beq.n	8004e4a <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e1e:	f7fe fb8b 	bl	8003538 <HAL_GetTick>
 8004e22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e24:	e00a      	b.n	8004e3c <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e26:	f7fe fb87 	bl	8003538 <HAL_GetTick>
 8004e2a:	4602      	mov	r2, r0
 8004e2c:	693b      	ldr	r3, [r7, #16]
 8004e2e:	1ad3      	subs	r3, r2, r3
 8004e30:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e34:	4293      	cmp	r3, r2
 8004e36:	d901      	bls.n	8004e3c <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8004e38:	2303      	movs	r3, #3
 8004e3a:	e0ce      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e3c:	4b4b      	ldr	r3, [pc, #300]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e40:	f003 0302 	and.w	r3, r3, #2
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d0ee      	beq.n	8004e26 <HAL_RCC_OscConfig+0x386>
 8004e48:	e014      	b.n	8004e74 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e4a:	f7fe fb75 	bl	8003538 <HAL_GetTick>
 8004e4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e50:	e00a      	b.n	8004e68 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004e52:	f7fe fb71 	bl	8003538 <HAL_GetTick>
 8004e56:	4602      	mov	r2, r0
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	1ad3      	subs	r3, r2, r3
 8004e5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d901      	bls.n	8004e68 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8004e64:	2303      	movs	r3, #3
 8004e66:	e0b8      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004e68:	4b40      	ldr	r3, [pc, #256]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6c:	f003 0302 	and.w	r3, r3, #2
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d1ee      	bne.n	8004e52 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004e74:	7dfb      	ldrb	r3, [r7, #23]
 8004e76:	2b01      	cmp	r3, #1
 8004e78:	d105      	bne.n	8004e86 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e7a:	4b3c      	ldr	r3, [pc, #240]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e7e:	4a3b      	ldr	r2, [pc, #236]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e80:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e84:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	699b      	ldr	r3, [r3, #24]
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 80a4 	beq.w	8004fd8 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8004e90:	4b36      	ldr	r3, [pc, #216]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004e92:	689b      	ldr	r3, [r3, #8]
 8004e94:	f003 030c 	and.w	r3, r3, #12
 8004e98:	2b08      	cmp	r3, #8
 8004e9a:	d06b      	beq.n	8004f74 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	699b      	ldr	r3, [r3, #24]
 8004ea0:	2b02      	cmp	r3, #2
 8004ea2:	d149      	bne.n	8004f38 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004ea4:	4b31      	ldr	r3, [pc, #196]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	4a30      	ldr	r2, [pc, #192]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004eaa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004eae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004eb0:	f7fe fb42 	bl	8003538 <HAL_GetTick>
 8004eb4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eb6:	e008      	b.n	8004eca <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004eb8:	f7fe fb3e 	bl	8003538 <HAL_GetTick>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	693b      	ldr	r3, [r7, #16]
 8004ec0:	1ad3      	subs	r3, r2, r3
 8004ec2:	2b02      	cmp	r3, #2
 8004ec4:	d901      	bls.n	8004eca <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8004ec6:	2303      	movs	r3, #3
 8004ec8:	e087      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004eca:	4b28      	ldr	r3, [pc, #160]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d1f0      	bne.n	8004eb8 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	69da      	ldr	r2, [r3, #28]
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	6a1b      	ldr	r3, [r3, #32]
 8004ede:	431a      	orrs	r2, r3
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee4:	019b      	lsls	r3, r3, #6
 8004ee6:	431a      	orrs	r2, r3
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004eec:	085b      	lsrs	r3, r3, #1
 8004eee:	3b01      	subs	r3, #1
 8004ef0:	041b      	lsls	r3, r3, #16
 8004ef2:	431a      	orrs	r2, r3
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ef8:	061b      	lsls	r3, r3, #24
 8004efa:	4313      	orrs	r3, r2
 8004efc:	4a1b      	ldr	r2, [pc, #108]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004efe:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004f02:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f04:	4b19      	ldr	r3, [pc, #100]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	4a18      	ldr	r2, [pc, #96]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004f0a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8004f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f10:	f7fe fb12 	bl	8003538 <HAL_GetTick>
 8004f14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f16:	e008      	b.n	8004f2a <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f18:	f7fe fb0e 	bl	8003538 <HAL_GetTick>
 8004f1c:	4602      	mov	r2, r0
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	1ad3      	subs	r3, r2, r3
 8004f22:	2b02      	cmp	r3, #2
 8004f24:	d901      	bls.n	8004f2a <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8004f26:	2303      	movs	r3, #3
 8004f28:	e057      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f2a:	4b10      	ldr	r3, [pc, #64]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d0f0      	beq.n	8004f18 <HAL_RCC_OscConfig+0x478>
 8004f36:	e04f      	b.n	8004fd8 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f38:	4b0c      	ldr	r3, [pc, #48]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4a0b      	ldr	r2, [pc, #44]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004f3e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f42:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f44:	f7fe faf8 	bl	8003538 <HAL_GetTick>
 8004f48:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f4a:	e008      	b.n	8004f5e <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004f4c:	f7fe faf4 	bl	8003538 <HAL_GetTick>
 8004f50:	4602      	mov	r2, r0
 8004f52:	693b      	ldr	r3, [r7, #16]
 8004f54:	1ad3      	subs	r3, r2, r3
 8004f56:	2b02      	cmp	r3, #2
 8004f58:	d901      	bls.n	8004f5e <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8004f5a:	2303      	movs	r3, #3
 8004f5c:	e03d      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f5e:	4b03      	ldr	r3, [pc, #12]	; (8004f6c <HAL_RCC_OscConfig+0x4cc>)
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f66:	2b00      	cmp	r3, #0
 8004f68:	d1f0      	bne.n	8004f4c <HAL_RCC_OscConfig+0x4ac>
 8004f6a:	e035      	b.n	8004fd8 <HAL_RCC_OscConfig+0x538>
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8004f74:	4b1b      	ldr	r3, [pc, #108]	; (8004fe4 <HAL_RCC_OscConfig+0x544>)
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	699b      	ldr	r3, [r3, #24]
 8004f7e:	2b01      	cmp	r3, #1
 8004f80:	d028      	beq.n	8004fd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f82:	68fb      	ldr	r3, [r7, #12]
 8004f84:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004f8c:	429a      	cmp	r2, r3
 8004f8e:	d121      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004f9a:	429a      	cmp	r2, r3
 8004f9c:	d11a      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004f9e:	68fa      	ldr	r2, [r7, #12]
 8004fa0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004fa4:	4013      	ands	r3, r2
 8004fa6:	687a      	ldr	r2, [r7, #4]
 8004fa8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004faa:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8004fac:	4293      	cmp	r3, r2
 8004fae:	d111      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004fba:	085b      	lsrs	r3, r3, #1
 8004fbc:	3b01      	subs	r3, #1
 8004fbe:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8004fc0:	429a      	cmp	r2, r3
 8004fc2:	d107      	bne.n	8004fd4 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004fce:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8004fd0:	429a      	cmp	r2, r3
 8004fd2:	d001      	beq.n	8004fd8 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8004fd4:	2301      	movs	r3, #1
 8004fd6:	e000      	b.n	8004fda <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8004fd8:	2300      	movs	r3, #0
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3718      	adds	r7, #24
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	40023800 	.word	0x40023800

08004fe8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004fe8:	b580      	push	{r7, lr}
 8004fea:	b084      	sub	sp, #16
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
 8004ff0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8004ff2:	2300      	movs	r3, #0
 8004ff4:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d101      	bne.n	8005000 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004ffc:	2301      	movs	r3, #1
 8004ffe:	e0d0      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005000:	4b6a      	ldr	r3, [pc, #424]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f003 030f 	and.w	r3, r3, #15
 8005008:	683a      	ldr	r2, [r7, #0]
 800500a:	429a      	cmp	r2, r3
 800500c:	d910      	bls.n	8005030 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800500e:	4b67      	ldr	r3, [pc, #412]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	f023 020f 	bic.w	r2, r3, #15
 8005016:	4965      	ldr	r1, [pc, #404]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 8005018:	683b      	ldr	r3, [r7, #0]
 800501a:	4313      	orrs	r3, r2
 800501c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800501e:	4b63      	ldr	r3, [pc, #396]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	f003 030f 	and.w	r3, r3, #15
 8005026:	683a      	ldr	r2, [r7, #0]
 8005028:	429a      	cmp	r2, r3
 800502a:	d001      	beq.n	8005030 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e0b8      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 0302 	and.w	r3, r3, #2
 8005038:	2b00      	cmp	r3, #0
 800503a:	d020      	beq.n	800507e <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	f003 0304 	and.w	r3, r3, #4
 8005044:	2b00      	cmp	r3, #0
 8005046:	d005      	beq.n	8005054 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005048:	4b59      	ldr	r3, [pc, #356]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 800504a:	689b      	ldr	r3, [r3, #8]
 800504c:	4a58      	ldr	r2, [pc, #352]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 800504e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005052:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0308 	and.w	r3, r3, #8
 800505c:	2b00      	cmp	r3, #0
 800505e:	d005      	beq.n	800506c <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005060:	4b53      	ldr	r3, [pc, #332]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005062:	689b      	ldr	r3, [r3, #8]
 8005064:	4a52      	ldr	r2, [pc, #328]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005066:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800506a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800506c:	4b50      	ldr	r3, [pc, #320]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 800506e:	689b      	ldr	r3, [r3, #8]
 8005070:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	689b      	ldr	r3, [r3, #8]
 8005078:	494d      	ldr	r1, [pc, #308]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 800507a:	4313      	orrs	r3, r2
 800507c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d040      	beq.n	800510c <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	685b      	ldr	r3, [r3, #4]
 800508e:	2b01      	cmp	r3, #1
 8005090:	d107      	bne.n	80050a2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005092:	4b47      	ldr	r3, [pc, #284]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509a:	2b00      	cmp	r3, #0
 800509c:	d115      	bne.n	80050ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800509e:	2301      	movs	r3, #1
 80050a0:	e07f      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	685b      	ldr	r3, [r3, #4]
 80050a6:	2b02      	cmp	r3, #2
 80050a8:	d107      	bne.n	80050ba <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050aa:	4b41      	ldr	r3, [pc, #260]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d109      	bne.n	80050ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050b6:	2301      	movs	r3, #1
 80050b8:	e073      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80050ba:	4b3d      	ldr	r3, [pc, #244]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d101      	bne.n	80050ca <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80050c6:	2301      	movs	r3, #1
 80050c8:	e06b      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80050ca:	4b39      	ldr	r3, [pc, #228]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	f023 0203 	bic.w	r2, r3, #3
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	4936      	ldr	r1, [pc, #216]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 80050d8:	4313      	orrs	r3, r2
 80050da:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80050dc:	f7fe fa2c 	bl	8003538 <HAL_GetTick>
 80050e0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050e2:	e00a      	b.n	80050fa <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80050e4:	f7fe fa28 	bl	8003538 <HAL_GetTick>
 80050e8:	4602      	mov	r2, r0
 80050ea:	68fb      	ldr	r3, [r7, #12]
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	f241 3288 	movw	r2, #5000	; 0x1388
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d901      	bls.n	80050fa <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80050f6:	2303      	movs	r3, #3
 80050f8:	e053      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80050fa:	4b2d      	ldr	r3, [pc, #180]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 80050fc:	689b      	ldr	r3, [r3, #8]
 80050fe:	f003 020c 	and.w	r2, r3, #12
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	685b      	ldr	r3, [r3, #4]
 8005106:	009b      	lsls	r3, r3, #2
 8005108:	429a      	cmp	r2, r3
 800510a:	d1eb      	bne.n	80050e4 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800510c:	4b27      	ldr	r3, [pc, #156]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f003 030f 	and.w	r3, r3, #15
 8005114:	683a      	ldr	r2, [r7, #0]
 8005116:	429a      	cmp	r2, r3
 8005118:	d210      	bcs.n	800513c <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800511a:	4b24      	ldr	r3, [pc, #144]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	f023 020f 	bic.w	r2, r3, #15
 8005122:	4922      	ldr	r1, [pc, #136]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 8005124:	683b      	ldr	r3, [r7, #0]
 8005126:	4313      	orrs	r3, r2
 8005128:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800512a:	4b20      	ldr	r3, [pc, #128]	; (80051ac <HAL_RCC_ClockConfig+0x1c4>)
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	f003 030f 	and.w	r3, r3, #15
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	429a      	cmp	r2, r3
 8005136:	d001      	beq.n	800513c <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e032      	b.n	80051a2 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	f003 0304 	and.w	r3, r3, #4
 8005144:	2b00      	cmp	r3, #0
 8005146:	d008      	beq.n	800515a <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005148:	4b19      	ldr	r3, [pc, #100]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 800514a:	689b      	ldr	r3, [r3, #8]
 800514c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68db      	ldr	r3, [r3, #12]
 8005154:	4916      	ldr	r1, [pc, #88]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005156:	4313      	orrs	r3, r2
 8005158:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0308 	and.w	r3, r3, #8
 8005162:	2b00      	cmp	r3, #0
 8005164:	d009      	beq.n	800517a <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8005166:	4b12      	ldr	r3, [pc, #72]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	00db      	lsls	r3, r3, #3
 8005174:	490e      	ldr	r1, [pc, #56]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005176:	4313      	orrs	r3, r2
 8005178:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800517a:	f000 f821 	bl	80051c0 <HAL_RCC_GetSysClockFreq>
 800517e:	4602      	mov	r2, r0
 8005180:	4b0b      	ldr	r3, [pc, #44]	; (80051b0 <HAL_RCC_ClockConfig+0x1c8>)
 8005182:	689b      	ldr	r3, [r3, #8]
 8005184:	091b      	lsrs	r3, r3, #4
 8005186:	f003 030f 	and.w	r3, r3, #15
 800518a:	490a      	ldr	r1, [pc, #40]	; (80051b4 <HAL_RCC_ClockConfig+0x1cc>)
 800518c:	5ccb      	ldrb	r3, [r1, r3]
 800518e:	fa22 f303 	lsr.w	r3, r2, r3
 8005192:	4a09      	ldr	r2, [pc, #36]	; (80051b8 <HAL_RCC_ClockConfig+0x1d0>)
 8005194:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005196:	4b09      	ldr	r3, [pc, #36]	; (80051bc <HAL_RCC_ClockConfig+0x1d4>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f7fe f988 	bl	80034b0 <HAL_InitTick>

  return HAL_OK;
 80051a0:	2300      	movs	r3, #0
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	3710      	adds	r7, #16
 80051a6:	46bd      	mov	sp, r7
 80051a8:	bd80      	pop	{r7, pc}
 80051aa:	bf00      	nop
 80051ac:	40023c00 	.word	0x40023c00
 80051b0:	40023800 	.word	0x40023800
 80051b4:	08007d70 	.word	0x08007d70
 80051b8:	20000004 	.word	0x20000004
 80051bc:	20000008 	.word	0x20000008

080051c0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80051c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80051c4:	b094      	sub	sp, #80	; 0x50
 80051c6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80051c8:	2300      	movs	r3, #0
 80051ca:	647b      	str	r3, [r7, #68]	; 0x44
 80051cc:	2300      	movs	r3, #0
 80051ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80051d0:	2300      	movs	r3, #0
 80051d2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 80051d4:	2300      	movs	r3, #0
 80051d6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051d8:	4b79      	ldr	r3, [pc, #484]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80051da:	689b      	ldr	r3, [r3, #8]
 80051dc:	f003 030c 	and.w	r3, r3, #12
 80051e0:	2b08      	cmp	r3, #8
 80051e2:	d00d      	beq.n	8005200 <HAL_RCC_GetSysClockFreq+0x40>
 80051e4:	2b08      	cmp	r3, #8
 80051e6:	f200 80e1 	bhi.w	80053ac <HAL_RCC_GetSysClockFreq+0x1ec>
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d002      	beq.n	80051f4 <HAL_RCC_GetSysClockFreq+0x34>
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d003      	beq.n	80051fa <HAL_RCC_GetSysClockFreq+0x3a>
 80051f2:	e0db      	b.n	80053ac <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80051f4:	4b73      	ldr	r3, [pc, #460]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80051f6:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051f8:	e0db      	b.n	80053b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80051fa:	4b73      	ldr	r3, [pc, #460]	; (80053c8 <HAL_RCC_GetSysClockFreq+0x208>)
 80051fc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80051fe:	e0d8      	b.n	80053b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005200:	4b6f      	ldr	r3, [pc, #444]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005202:	685b      	ldr	r3, [r3, #4]
 8005204:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005208:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800520a:	4b6d      	ldr	r3, [pc, #436]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x200>)
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d063      	beq.n	80052de <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005216:	4b6a      	ldr	r3, [pc, #424]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005218:	685b      	ldr	r3, [r3, #4]
 800521a:	099b      	lsrs	r3, r3, #6
 800521c:	2200      	movs	r2, #0
 800521e:	63bb      	str	r3, [r7, #56]	; 0x38
 8005220:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005222:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005228:	633b      	str	r3, [r7, #48]	; 0x30
 800522a:	2300      	movs	r3, #0
 800522c:	637b      	str	r3, [r7, #52]	; 0x34
 800522e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005232:	4622      	mov	r2, r4
 8005234:	462b      	mov	r3, r5
 8005236:	f04f 0000 	mov.w	r0, #0
 800523a:	f04f 0100 	mov.w	r1, #0
 800523e:	0159      	lsls	r1, r3, #5
 8005240:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005244:	0150      	lsls	r0, r2, #5
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	4621      	mov	r1, r4
 800524c:	1a51      	subs	r1, r2, r1
 800524e:	6139      	str	r1, [r7, #16]
 8005250:	4629      	mov	r1, r5
 8005252:	eb63 0301 	sbc.w	r3, r3, r1
 8005256:	617b      	str	r3, [r7, #20]
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005264:	4659      	mov	r1, fp
 8005266:	018b      	lsls	r3, r1, #6
 8005268:	4651      	mov	r1, sl
 800526a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800526e:	4651      	mov	r1, sl
 8005270:	018a      	lsls	r2, r1, #6
 8005272:	4651      	mov	r1, sl
 8005274:	ebb2 0801 	subs.w	r8, r2, r1
 8005278:	4659      	mov	r1, fp
 800527a:	eb63 0901 	sbc.w	r9, r3, r1
 800527e:	f04f 0200 	mov.w	r2, #0
 8005282:	f04f 0300 	mov.w	r3, #0
 8005286:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800528a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800528e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005292:	4690      	mov	r8, r2
 8005294:	4699      	mov	r9, r3
 8005296:	4623      	mov	r3, r4
 8005298:	eb18 0303 	adds.w	r3, r8, r3
 800529c:	60bb      	str	r3, [r7, #8]
 800529e:	462b      	mov	r3, r5
 80052a0:	eb49 0303 	adc.w	r3, r9, r3
 80052a4:	60fb      	str	r3, [r7, #12]
 80052a6:	f04f 0200 	mov.w	r2, #0
 80052aa:	f04f 0300 	mov.w	r3, #0
 80052ae:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052b2:	4629      	mov	r1, r5
 80052b4:	024b      	lsls	r3, r1, #9
 80052b6:	4621      	mov	r1, r4
 80052b8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80052bc:	4621      	mov	r1, r4
 80052be:	024a      	lsls	r2, r1, #9
 80052c0:	4610      	mov	r0, r2
 80052c2:	4619      	mov	r1, r3
 80052c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80052c6:	2200      	movs	r2, #0
 80052c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ca:	62fa      	str	r2, [r7, #44]	; 0x2c
 80052cc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052d0:	f7fb fbb0 	bl	8000a34 <__aeabi_uldivmod>
 80052d4:	4602      	mov	r2, r0
 80052d6:	460b      	mov	r3, r1
 80052d8:	4613      	mov	r3, r2
 80052da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052dc:	e058      	b.n	8005390 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80052de:	4b38      	ldr	r3, [pc, #224]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x200>)
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	099b      	lsrs	r3, r3, #6
 80052e4:	2200      	movs	r2, #0
 80052e6:	4618      	mov	r0, r3
 80052e8:	4611      	mov	r1, r2
 80052ea:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80052ee:	623b      	str	r3, [r7, #32]
 80052f0:	2300      	movs	r3, #0
 80052f2:	627b      	str	r3, [r7, #36]	; 0x24
 80052f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80052f8:	4642      	mov	r2, r8
 80052fa:	464b      	mov	r3, r9
 80052fc:	f04f 0000 	mov.w	r0, #0
 8005300:	f04f 0100 	mov.w	r1, #0
 8005304:	0159      	lsls	r1, r3, #5
 8005306:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800530a:	0150      	lsls	r0, r2, #5
 800530c:	4602      	mov	r2, r0
 800530e:	460b      	mov	r3, r1
 8005310:	4641      	mov	r1, r8
 8005312:	ebb2 0a01 	subs.w	sl, r2, r1
 8005316:	4649      	mov	r1, r9
 8005318:	eb63 0b01 	sbc.w	fp, r3, r1
 800531c:	f04f 0200 	mov.w	r2, #0
 8005320:	f04f 0300 	mov.w	r3, #0
 8005324:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005328:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800532c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005330:	ebb2 040a 	subs.w	r4, r2, sl
 8005334:	eb63 050b 	sbc.w	r5, r3, fp
 8005338:	f04f 0200 	mov.w	r2, #0
 800533c:	f04f 0300 	mov.w	r3, #0
 8005340:	00eb      	lsls	r3, r5, #3
 8005342:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005346:	00e2      	lsls	r2, r4, #3
 8005348:	4614      	mov	r4, r2
 800534a:	461d      	mov	r5, r3
 800534c:	4643      	mov	r3, r8
 800534e:	18e3      	adds	r3, r4, r3
 8005350:	603b      	str	r3, [r7, #0]
 8005352:	464b      	mov	r3, r9
 8005354:	eb45 0303 	adc.w	r3, r5, r3
 8005358:	607b      	str	r3, [r7, #4]
 800535a:	f04f 0200 	mov.w	r2, #0
 800535e:	f04f 0300 	mov.w	r3, #0
 8005362:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005366:	4629      	mov	r1, r5
 8005368:	028b      	lsls	r3, r1, #10
 800536a:	4621      	mov	r1, r4
 800536c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005370:	4621      	mov	r1, r4
 8005372:	028a      	lsls	r2, r1, #10
 8005374:	4610      	mov	r0, r2
 8005376:	4619      	mov	r1, r3
 8005378:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800537a:	2200      	movs	r2, #0
 800537c:	61bb      	str	r3, [r7, #24]
 800537e:	61fa      	str	r2, [r7, #28]
 8005380:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005384:	f7fb fb56 	bl	8000a34 <__aeabi_uldivmod>
 8005388:	4602      	mov	r2, r0
 800538a:	460b      	mov	r3, r1
 800538c:	4613      	mov	r3, r2
 800538e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8005390:	4b0b      	ldr	r3, [pc, #44]	; (80053c0 <HAL_RCC_GetSysClockFreq+0x200>)
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	0c1b      	lsrs	r3, r3, #16
 8005396:	f003 0303 	and.w	r3, r3, #3
 800539a:	3301      	adds	r3, #1
 800539c:	005b      	lsls	r3, r3, #1
 800539e:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80053a0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053a2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80053a8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053aa:	e002      	b.n	80053b2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053ac:	4b05      	ldr	r3, [pc, #20]	; (80053c4 <HAL_RCC_GetSysClockFreq+0x204>)
 80053ae:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053b0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80053b4:	4618      	mov	r0, r3
 80053b6:	3750      	adds	r7, #80	; 0x50
 80053b8:	46bd      	mov	sp, r7
 80053ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80053be:	bf00      	nop
 80053c0:	40023800 	.word	0x40023800
 80053c4:	00f42400 	.word	0x00f42400
 80053c8:	007a1200 	.word	0x007a1200

080053cc <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80053cc:	b480      	push	{r7}
 80053ce:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80053d0:	4b03      	ldr	r3, [pc, #12]	; (80053e0 <HAL_RCC_GetHCLKFreq+0x14>)
 80053d2:	681b      	ldr	r3, [r3, #0]
}
 80053d4:	4618      	mov	r0, r3
 80053d6:	46bd      	mov	sp, r7
 80053d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053dc:	4770      	bx	lr
 80053de:	bf00      	nop
 80053e0:	20000004 	.word	0x20000004

080053e4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80053e4:	b580      	push	{r7, lr}
 80053e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80053e8:	f7ff fff0 	bl	80053cc <HAL_RCC_GetHCLKFreq>
 80053ec:	4602      	mov	r2, r0
 80053ee:	4b05      	ldr	r3, [pc, #20]	; (8005404 <HAL_RCC_GetPCLK1Freq+0x20>)
 80053f0:	689b      	ldr	r3, [r3, #8]
 80053f2:	0a9b      	lsrs	r3, r3, #10
 80053f4:	f003 0307 	and.w	r3, r3, #7
 80053f8:	4903      	ldr	r1, [pc, #12]	; (8005408 <HAL_RCC_GetPCLK1Freq+0x24>)
 80053fa:	5ccb      	ldrb	r3, [r1, r3]
 80053fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005400:	4618      	mov	r0, r3
 8005402:	bd80      	pop	{r7, pc}
 8005404:	40023800 	.word	0x40023800
 8005408:	08007d80 	.word	0x08007d80

0800540c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005410:	f7ff ffdc 	bl	80053cc <HAL_RCC_GetHCLKFreq>
 8005414:	4602      	mov	r2, r0
 8005416:	4b05      	ldr	r3, [pc, #20]	; (800542c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005418:	689b      	ldr	r3, [r3, #8]
 800541a:	0b5b      	lsrs	r3, r3, #13
 800541c:	f003 0307 	and.w	r3, r3, #7
 8005420:	4903      	ldr	r1, [pc, #12]	; (8005430 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005422:	5ccb      	ldrb	r3, [r1, r3]
 8005424:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005428:	4618      	mov	r0, r3
 800542a:	bd80      	pop	{r7, pc}
 800542c:	40023800 	.word	0x40023800
 8005430:	08007d80 	.word	0x08007d80

08005434 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005434:	b580      	push	{r7, lr}
 8005436:	b088      	sub	sp, #32
 8005438:	af00      	add	r7, sp, #0
 800543a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 800543c:	2300      	movs	r3, #0
 800543e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8005440:	2300      	movs	r3, #0
 8005442:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8005444:	2300      	movs	r3, #0
 8005446:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8005448:	2300      	movs	r3, #0
 800544a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 800544c:	2300      	movs	r3, #0
 800544e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	f003 0301 	and.w	r3, r3, #1
 8005458:	2b00      	cmp	r3, #0
 800545a:	d012      	beq.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800545c:	4b69      	ldr	r3, [pc, #420]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800545e:	689b      	ldr	r3, [r3, #8]
 8005460:	4a68      	ldr	r2, [pc, #416]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005462:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8005466:	6093      	str	r3, [r2, #8]
 8005468:	4b66      	ldr	r3, [pc, #408]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800546a:	689a      	ldr	r2, [r3, #8]
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005470:	4964      	ldr	r1, [pc, #400]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005472:	4313      	orrs	r3, r2
 8005474:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800547a:	2b00      	cmp	r3, #0
 800547c:	d101      	bne.n	8005482 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800547e:	2301      	movs	r3, #1
 8005480:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800548a:	2b00      	cmp	r3, #0
 800548c:	d017      	beq.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800548e:	4b5d      	ldr	r3, [pc, #372]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005490:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005494:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800549c:	4959      	ldr	r1, [pc, #356]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800549e:	4313      	orrs	r3, r2
 80054a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80054ac:	d101      	bne.n	80054b2 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80054ae:	2301      	movs	r3, #1
 80054b0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d101      	bne.n	80054be <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80054ba:	2301      	movs	r3, #1
 80054bc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d017      	beq.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80054ca:	4b4e      	ldr	r3, [pc, #312]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80054d0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d8:	494a      	ldr	r1, [pc, #296]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80054da:	4313      	orrs	r3, r2
 80054dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80054e8:	d101      	bne.n	80054ee <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80054ea:	2301      	movs	r3, #1
 80054ec:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d101      	bne.n	80054fa <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80054f6:	2301      	movs	r3, #1
 80054f8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005502:	2b00      	cmp	r3, #0
 8005504:	d001      	beq.n	800550a <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8005506:	2301      	movs	r3, #1
 8005508:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0320 	and.w	r3, r3, #32
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 808b 	beq.w	800562e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8005518:	4b3a      	ldr	r3, [pc, #232]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800551a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800551c:	4a39      	ldr	r2, [pc, #228]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800551e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005522:	6413      	str	r3, [r2, #64]	; 0x40
 8005524:	4b37      	ldr	r3, [pc, #220]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005528:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800552c:	60bb      	str	r3, [r7, #8]
 800552e:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8005530:	4b35      	ldr	r3, [pc, #212]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	4a34      	ldr	r2, [pc, #208]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005536:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800553a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800553c:	f7fd fffc 	bl	8003538 <HAL_GetTick>
 8005540:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005542:	e008      	b.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005544:	f7fd fff8 	bl	8003538 <HAL_GetTick>
 8005548:	4602      	mov	r2, r0
 800554a:	697b      	ldr	r3, [r7, #20]
 800554c:	1ad3      	subs	r3, r2, r3
 800554e:	2b64      	cmp	r3, #100	; 0x64
 8005550:	d901      	bls.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8005552:	2303      	movs	r3, #3
 8005554:	e357      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8005556:	4b2c      	ldr	r3, [pc, #176]	; (8005608 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8005558:	681b      	ldr	r3, [r3, #0]
 800555a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800555e:	2b00      	cmp	r3, #0
 8005560:	d0f0      	beq.n	8005544 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8005562:	4b28      	ldr	r3, [pc, #160]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005564:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005566:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800556a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800556c:	693b      	ldr	r3, [r7, #16]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d035      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005576:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800557a:	693a      	ldr	r2, [r7, #16]
 800557c:	429a      	cmp	r2, r3
 800557e:	d02e      	beq.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8005580:	4b20      	ldr	r3, [pc, #128]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005582:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005588:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800558a:	4b1e      	ldr	r3, [pc, #120]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800558c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800558e:	4a1d      	ldr	r2, [pc, #116]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005594:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8005596:	4b1b      	ldr	r3, [pc, #108]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8005598:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800559a:	4a1a      	ldr	r2, [pc, #104]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800559c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80055a0:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80055a2:	4a18      	ldr	r2, [pc, #96]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055a4:	693b      	ldr	r3, [r7, #16]
 80055a6:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80055a8:	4b16      	ldr	r3, [pc, #88]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055ac:	f003 0301 	and.w	r3, r3, #1
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	d114      	bne.n	80055de <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80055b4:	f7fd ffc0 	bl	8003538 <HAL_GetTick>
 80055b8:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055ba:	e00a      	b.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80055bc:	f7fd ffbc 	bl	8003538 <HAL_GetTick>
 80055c0:	4602      	mov	r2, r0
 80055c2:	697b      	ldr	r3, [r7, #20]
 80055c4:	1ad3      	subs	r3, r2, r3
 80055c6:	f241 3288 	movw	r2, #5000	; 0x1388
 80055ca:	4293      	cmp	r3, r2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e319      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80055d2:	4b0c      	ldr	r3, [pc, #48]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80055d6:	f003 0302 	and.w	r3, r3, #2
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d0ee      	beq.n	80055bc <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80055e2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80055e6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80055ea:	d111      	bne.n	8005610 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80055ec:	4b05      	ldr	r3, [pc, #20]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80055f8:	4b04      	ldr	r3, [pc, #16]	; (800560c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80055fa:	400b      	ands	r3, r1
 80055fc:	4901      	ldr	r1, [pc, #4]	; (8005604 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80055fe:	4313      	orrs	r3, r2
 8005600:	608b      	str	r3, [r1, #8]
 8005602:	e00b      	b.n	800561c <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8005604:	40023800 	.word	0x40023800
 8005608:	40007000 	.word	0x40007000
 800560c:	0ffffcff 	.word	0x0ffffcff
 8005610:	4baa      	ldr	r3, [pc, #680]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	4aa9      	ldr	r2, [pc, #676]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005616:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800561a:	6093      	str	r3, [r2, #8]
 800561c:	4ba7      	ldr	r3, [pc, #668]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800561e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005624:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005628:	49a4      	ldr	r1, [pc, #656]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800562a:	4313      	orrs	r3, r2
 800562c:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	f003 0310 	and.w	r3, r3, #16
 8005636:	2b00      	cmp	r3, #0
 8005638:	d010      	beq.n	800565c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800563a:	4ba0      	ldr	r3, [pc, #640]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800563c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005640:	4a9e      	ldr	r2, [pc, #632]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005642:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005646:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800564a:	4b9c      	ldr	r3, [pc, #624]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800564c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005654:	4999      	ldr	r1, [pc, #612]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005656:	4313      	orrs	r3, r2
 8005658:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005664:	2b00      	cmp	r3, #0
 8005666:	d00a      	beq.n	800567e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005668:	4b94      	ldr	r3, [pc, #592]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800566a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800566e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005676:	4991      	ldr	r1, [pc, #580]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005678:	4313      	orrs	r3, r2
 800567a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005686:	2b00      	cmp	r3, #0
 8005688:	d00a      	beq.n	80056a0 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800568a:	4b8c      	ldr	r3, [pc, #560]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800568c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005690:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8005698:	4988      	ldr	r1, [pc, #544]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800569a:	4313      	orrs	r3, r2
 800569c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	681b      	ldr	r3, [r3, #0]
 80056a4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d00a      	beq.n	80056c2 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80056ac:	4b83      	ldr	r3, [pc, #524]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80056ba:	4980      	ldr	r1, [pc, #512]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056bc:	4313      	orrs	r3, r2
 80056be:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056ca:	2b00      	cmp	r3, #0
 80056cc:	d00a      	beq.n	80056e4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80056ce:	4b7b      	ldr	r3, [pc, #492]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056dc:	4977      	ldr	r1, [pc, #476]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056de:	4313      	orrs	r3, r2
 80056e0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ec:	2b00      	cmp	r3, #0
 80056ee:	d00a      	beq.n	8005706 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80056f0:	4b72      	ldr	r3, [pc, #456]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80056f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80056f6:	f023 0203 	bic.w	r2, r3, #3
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056fe:	496f      	ldr	r1, [pc, #444]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005700:	4313      	orrs	r3, r2
 8005702:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800570e:	2b00      	cmp	r3, #0
 8005710:	d00a      	beq.n	8005728 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005712:	4b6a      	ldr	r3, [pc, #424]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005714:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005718:	f023 020c 	bic.w	r2, r3, #12
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005720:	4966      	ldr	r1, [pc, #408]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005722:	4313      	orrs	r3, r2
 8005724:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00a      	beq.n	800574a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005734:	4b61      	ldr	r3, [pc, #388]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005736:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800573a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005742:	495e      	ldr	r1, [pc, #376]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005744:	4313      	orrs	r3, r2
 8005746:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005752:	2b00      	cmp	r3, #0
 8005754:	d00a      	beq.n	800576c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005756:	4b59      	ldr	r3, [pc, #356]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005758:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800575c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005764:	4955      	ldr	r1, [pc, #340]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005766:	4313      	orrs	r3, r2
 8005768:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00a      	beq.n	800578e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005778:	4b50      	ldr	r3, [pc, #320]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800577a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800577e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005786:	494d      	ldr	r1, [pc, #308]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005788:	4313      	orrs	r3, r2
 800578a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005796:	2b00      	cmp	r3, #0
 8005798:	d00a      	beq.n	80057b0 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800579a:	4b48      	ldr	r3, [pc, #288]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800579c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057a0:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057a8:	4944      	ldr	r1, [pc, #272]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057aa:	4313      	orrs	r3, r2
 80057ac:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d00a      	beq.n	80057d2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80057bc:	4b3f      	ldr	r3, [pc, #252]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057be:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057c2:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80057ca:	493c      	ldr	r1, [pc, #240]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057cc:	4313      	orrs	r3, r2
 80057ce:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00a      	beq.n	80057f4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80057de:	4b37      	ldr	r3, [pc, #220]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80057e4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80057ec:	4933      	ldr	r1, [pc, #204]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80057ee:	4313      	orrs	r3, r2
 80057f0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80057fc:	2b00      	cmp	r3, #0
 80057fe:	d00a      	beq.n	8005816 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005800:	4b2e      	ldr	r3, [pc, #184]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005802:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005806:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800580e:	492b      	ldr	r1, [pc, #172]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005810:	4313      	orrs	r3, r2
 8005812:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800581e:	2b00      	cmp	r3, #0
 8005820:	d011      	beq.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8005822:	4b26      	ldr	r3, [pc, #152]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005824:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005828:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005830:	4922      	ldr	r1, [pc, #136]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005832:	4313      	orrs	r3, r2
 8005834:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800583c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005840:	d101      	bne.n	8005846 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8005842:	2301      	movs	r3, #1
 8005844:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f003 0308 	and.w	r3, r3, #8
 800584e:	2b00      	cmp	r3, #0
 8005850:	d001      	beq.n	8005856 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8005852:	2301      	movs	r3, #1
 8005854:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800585e:	2b00      	cmp	r3, #0
 8005860:	d00a      	beq.n	8005878 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005862:	4b16      	ldr	r3, [pc, #88]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005868:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005870:	4912      	ldr	r1, [pc, #72]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005872:	4313      	orrs	r3, r2
 8005874:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005880:	2b00      	cmp	r3, #0
 8005882:	d00b      	beq.n	800589c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8005884:	4b0d      	ldr	r3, [pc, #52]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800588a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005894:	4909      	ldr	r1, [pc, #36]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8005896:	4313      	orrs	r3, r2
 8005898:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800589c:	69fb      	ldr	r3, [r7, #28]
 800589e:	2b01      	cmp	r3, #1
 80058a0:	d006      	beq.n	80058b0 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80058aa:	2b00      	cmp	r3, #0
 80058ac:	f000 80d9 	beq.w	8005a62 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80058b0:	4b02      	ldr	r3, [pc, #8]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a01      	ldr	r2, [pc, #4]	; (80058bc <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80058b6:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80058ba:	e001      	b.n	80058c0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80058bc:	40023800 	.word	0x40023800
 80058c0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80058c2:	f7fd fe39 	bl	8003538 <HAL_GetTick>
 80058c6:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058c8:	e008      	b.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80058ca:	f7fd fe35 	bl	8003538 <HAL_GetTick>
 80058ce:	4602      	mov	r2, r0
 80058d0:	697b      	ldr	r3, [r7, #20]
 80058d2:	1ad3      	subs	r3, r2, r3
 80058d4:	2b64      	cmp	r3, #100	; 0x64
 80058d6:	d901      	bls.n	80058dc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80058d8:	2303      	movs	r3, #3
 80058da:	e194      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80058dc:	4b6c      	ldr	r3, [pc, #432]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	d1f0      	bne.n	80058ca <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f003 0301 	and.w	r3, r3, #1
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d021      	beq.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058f8:	2b00      	cmp	r3, #0
 80058fa:	d11d      	bne.n	8005938 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80058fc:	4b64      	ldr	r3, [pc, #400]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80058fe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005902:	0c1b      	lsrs	r3, r3, #16
 8005904:	f003 0303 	and.w	r3, r3, #3
 8005908:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800590a:	4b61      	ldr	r3, [pc, #388]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800590c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005910:	0e1b      	lsrs	r3, r3, #24
 8005912:	f003 030f 	and.w	r3, r3, #15
 8005916:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	685b      	ldr	r3, [r3, #4]
 800591c:	019a      	lsls	r2, r3, #6
 800591e:	693b      	ldr	r3, [r7, #16]
 8005920:	041b      	lsls	r3, r3, #16
 8005922:	431a      	orrs	r2, r3
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	061b      	lsls	r3, r3, #24
 8005928:	431a      	orrs	r2, r3
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	689b      	ldr	r3, [r3, #8]
 800592e:	071b      	lsls	r3, r3, #28
 8005930:	4957      	ldr	r1, [pc, #348]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005932:	4313      	orrs	r3, r2
 8005934:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005940:	2b00      	cmp	r3, #0
 8005942:	d004      	beq.n	800594e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005948:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800594c:	d00a      	beq.n	8005964 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8005956:	2b00      	cmp	r3, #0
 8005958:	d02e      	beq.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800595e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005962:	d129      	bne.n	80059b8 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8005964:	4b4a      	ldr	r3, [pc, #296]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005966:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800596a:	0c1b      	lsrs	r3, r3, #16
 800596c:	f003 0303 	and.w	r3, r3, #3
 8005970:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8005972:	4b47      	ldr	r3, [pc, #284]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005974:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005978:	0f1b      	lsrs	r3, r3, #28
 800597a:	f003 0307 	and.w	r3, r3, #7
 800597e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	685b      	ldr	r3, [r3, #4]
 8005984:	019a      	lsls	r2, r3, #6
 8005986:	693b      	ldr	r3, [r7, #16]
 8005988:	041b      	lsls	r3, r3, #16
 800598a:	431a      	orrs	r2, r3
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	68db      	ldr	r3, [r3, #12]
 8005990:	061b      	lsls	r3, r3, #24
 8005992:	431a      	orrs	r2, r3
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	071b      	lsls	r3, r3, #28
 8005998:	493d      	ldr	r1, [pc, #244]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800599a:	4313      	orrs	r3, r2
 800599c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80059a0:	4b3b      	ldr	r3, [pc, #236]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059a2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80059a6:	f023 021f 	bic.w	r2, r3, #31
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059ae:	3b01      	subs	r3, #1
 80059b0:	4937      	ldr	r1, [pc, #220]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059b2:	4313      	orrs	r3, r2
 80059b4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d01d      	beq.n	8005a00 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80059c4:	4b32      	ldr	r3, [pc, #200]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059c6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059ca:	0e1b      	lsrs	r3, r3, #24
 80059cc:	f003 030f 	and.w	r3, r3, #15
 80059d0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80059d2:	4b2f      	ldr	r3, [pc, #188]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059d4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80059d8:	0f1b      	lsrs	r3, r3, #28
 80059da:	f003 0307 	and.w	r3, r3, #7
 80059de:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	019a      	lsls	r2, r3, #6
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	691b      	ldr	r3, [r3, #16]
 80059ea:	041b      	lsls	r3, r3, #16
 80059ec:	431a      	orrs	r2, r3
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	061b      	lsls	r3, r3, #24
 80059f2:	431a      	orrs	r2, r3
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	071b      	lsls	r3, r3, #28
 80059f8:	4925      	ldr	r1, [pc, #148]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80059fa:	4313      	orrs	r3, r2
 80059fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d011      	beq.n	8005a30 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	019a      	lsls	r2, r3, #6
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	691b      	ldr	r3, [r3, #16]
 8005a16:	041b      	lsls	r3, r3, #16
 8005a18:	431a      	orrs	r2, r3
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	68db      	ldr	r3, [r3, #12]
 8005a1e:	061b      	lsls	r3, r3, #24
 8005a20:	431a      	orrs	r2, r3
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	689b      	ldr	r3, [r3, #8]
 8005a26:	071b      	lsls	r3, r3, #28
 8005a28:	4919      	ldr	r1, [pc, #100]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8005a30:	4b17      	ldr	r3, [pc, #92]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	4a16      	ldr	r2, [pc, #88]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a36:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005a3a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a3c:	f7fd fd7c 	bl	8003538 <HAL_GetTick>
 8005a40:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a42:	e008      	b.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8005a44:	f7fd fd78 	bl	8003538 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	697b      	ldr	r3, [r7, #20]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	2b64      	cmp	r3, #100	; 0x64
 8005a50:	d901      	bls.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a52:	2303      	movs	r3, #3
 8005a54:	e0d7      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8005a56:	4b0e      	ldr	r3, [pc, #56]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d0f0      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	2b01      	cmp	r3, #1
 8005a66:	f040 80cd 	bne.w	8005c04 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8005a6a:	4b09      	ldr	r3, [pc, #36]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	4a08      	ldr	r2, [pc, #32]	; (8005a90 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8005a70:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005a74:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005a76:	f7fd fd5f 	bl	8003538 <HAL_GetTick>
 8005a7a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a7c:	e00a      	b.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005a7e:	f7fd fd5b 	bl	8003538 <HAL_GetTick>
 8005a82:	4602      	mov	r2, r0
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	1ad3      	subs	r3, r2, r3
 8005a88:	2b64      	cmp	r3, #100	; 0x64
 8005a8a:	d903      	bls.n	8005a94 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005a8c:	2303      	movs	r3, #3
 8005a8e:	e0ba      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8005a90:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8005a94:	4b5e      	ldr	r3, [pc, #376]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a9c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005aa0:	d0ed      	beq.n	8005a7e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d003      	beq.n	8005ab6 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d009      	beq.n	8005aca <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d02e      	beq.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d12a      	bne.n	8005b20 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005aca:	4b51      	ldr	r3, [pc, #324]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad0:	0c1b      	lsrs	r3, r3, #16
 8005ad2:	f003 0303 	and.w	r3, r3, #3
 8005ad6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005ad8:	4b4d      	ldr	r3, [pc, #308]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005ada:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ade:	0f1b      	lsrs	r3, r3, #28
 8005ae0:	f003 0307 	and.w	r3, r3, #7
 8005ae4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	695b      	ldr	r3, [r3, #20]
 8005aea:	019a      	lsls	r2, r3, #6
 8005aec:	693b      	ldr	r3, [r7, #16]
 8005aee:	041b      	lsls	r3, r3, #16
 8005af0:	431a      	orrs	r2, r3
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	699b      	ldr	r3, [r3, #24]
 8005af6:	061b      	lsls	r3, r3, #24
 8005af8:	431a      	orrs	r2, r3
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	071b      	lsls	r3, r3, #28
 8005afe:	4944      	ldr	r1, [pc, #272]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b00:	4313      	orrs	r3, r2
 8005b02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8005b06:	4b42      	ldr	r3, [pc, #264]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b08:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005b0c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005b14:	3b01      	subs	r3, #1
 8005b16:	021b      	lsls	r3, r3, #8
 8005b18:	493d      	ldr	r1, [pc, #244]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b1a:	4313      	orrs	r3, r2
 8005b1c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d022      	beq.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005b30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b34:	d11d      	bne.n	8005b72 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b36:	4b36      	ldr	r3, [pc, #216]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b38:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b3c:	0e1b      	lsrs	r3, r3, #24
 8005b3e:	f003 030f 	and.w	r3, r3, #15
 8005b42:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8005b44:	4b32      	ldr	r3, [pc, #200]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4a:	0f1b      	lsrs	r3, r3, #28
 8005b4c:	f003 0307 	and.w	r3, r3, #7
 8005b50:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	695b      	ldr	r3, [r3, #20]
 8005b56:	019a      	lsls	r2, r3, #6
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	6a1b      	ldr	r3, [r3, #32]
 8005b5c:	041b      	lsls	r3, r3, #16
 8005b5e:	431a      	orrs	r2, r3
 8005b60:	693b      	ldr	r3, [r7, #16]
 8005b62:	061b      	lsls	r3, r3, #24
 8005b64:	431a      	orrs	r2, r3
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	071b      	lsls	r3, r3, #28
 8005b6a:	4929      	ldr	r1, [pc, #164]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b6c:	4313      	orrs	r3, r2
 8005b6e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0308 	and.w	r3, r3, #8
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d028      	beq.n	8005bd0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8005b7e:	4b24      	ldr	r3, [pc, #144]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b80:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b84:	0e1b      	lsrs	r3, r3, #24
 8005b86:	f003 030f 	and.w	r3, r3, #15
 8005b8a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8005b8c:	4b20      	ldr	r3, [pc, #128]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b92:	0c1b      	lsrs	r3, r3, #16
 8005b94:	f003 0303 	and.w	r3, r3, #3
 8005b98:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	695b      	ldr	r3, [r3, #20]
 8005b9e:	019a      	lsls	r2, r3, #6
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	041b      	lsls	r3, r3, #16
 8005ba4:	431a      	orrs	r2, r3
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	061b      	lsls	r3, r3, #24
 8005baa:	431a      	orrs	r2, r3
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	071b      	lsls	r3, r3, #28
 8005bb2:	4917      	ldr	r1, [pc, #92]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bb4:	4313      	orrs	r3, r2
 8005bb6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8005bba:	4b15      	ldr	r3, [pc, #84]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bbc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005bc0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bc8:	4911      	ldr	r1, [pc, #68]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8005bd0:	4b0f      	ldr	r3, [pc, #60]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	4a0e      	ldr	r2, [pc, #56]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005bda:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005bdc:	f7fd fcac 	bl	8003538 <HAL_GetTick>
 8005be0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005be2:	e008      	b.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8005be4:	f7fd fca8 	bl	8003538 <HAL_GetTick>
 8005be8:	4602      	mov	r2, r0
 8005bea:	697b      	ldr	r3, [r7, #20]
 8005bec:	1ad3      	subs	r3, r2, r3
 8005bee:	2b64      	cmp	r3, #100	; 0x64
 8005bf0:	d901      	bls.n	8005bf6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8005bf2:	2303      	movs	r3, #3
 8005bf4:	e007      	b.n	8005c06 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8005bf6:	4b06      	ldr	r3, [pc, #24]	; (8005c10 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bfe:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c02:	d1ef      	bne.n	8005be4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3720      	adds	r7, #32
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bd80      	pop	{r7, pc}
 8005c0e:	bf00      	nop
 8005c10:	40023800 	.word	0x40023800

08005c14 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c14:	b580      	push	{r7, lr}
 8005c16:	b082      	sub	sp, #8
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d101      	bne.n	8005c26 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c22:	2301      	movs	r3, #1
 8005c24:	e049      	b.n	8005cba <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d106      	bne.n	8005c40 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	2200      	movs	r2, #0
 8005c36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c3a:	6878      	ldr	r0, [r7, #4]
 8005c3c:	f7fd fa2c 	bl	8003098 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	2202      	movs	r2, #2
 8005c44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681a      	ldr	r2, [r3, #0]
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	3304      	adds	r3, #4
 8005c50:	4619      	mov	r1, r3
 8005c52:	4610      	mov	r0, r2
 8005c54:	f000 fc34 	bl	80064c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	2201      	movs	r2, #1
 8005c5c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	2201      	movs	r2, #1
 8005c64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	2201      	movs	r2, #1
 8005c6c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c70:	687b      	ldr	r3, [r7, #4]
 8005c72:	2201      	movs	r2, #1
 8005c74:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2201      	movs	r2, #1
 8005c8c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	2201      	movs	r2, #1
 8005c94:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	2201      	movs	r2, #1
 8005c9c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	2201      	movs	r2, #1
 8005ca4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cb8:	2300      	movs	r3, #0
}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3708      	adds	r7, #8
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}
	...

08005cc4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b085      	sub	sp, #20
 8005cc8:	af00      	add	r7, sp, #0
 8005cca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005cd2:	b2db      	uxtb	r3, r3
 8005cd4:	2b01      	cmp	r3, #1
 8005cd6:	d001      	beq.n	8005cdc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005cd8:	2301      	movs	r3, #1
 8005cda:	e054      	b.n	8005d86 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2202      	movs	r2, #2
 8005ce0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	68da      	ldr	r2, [r3, #12]
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	f042 0201 	orr.w	r2, r2, #1
 8005cf2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a26      	ldr	r2, [pc, #152]	; (8005d94 <HAL_TIM_Base_Start_IT+0xd0>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d022      	beq.n	8005d44 <HAL_TIM_Base_Start_IT+0x80>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d06:	d01d      	beq.n	8005d44 <HAL_TIM_Base_Start_IT+0x80>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a22      	ldr	r2, [pc, #136]	; (8005d98 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d018      	beq.n	8005d44 <HAL_TIM_Base_Start_IT+0x80>
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	4a21      	ldr	r2, [pc, #132]	; (8005d9c <HAL_TIM_Base_Start_IT+0xd8>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d013      	beq.n	8005d44 <HAL_TIM_Base_Start_IT+0x80>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a1f      	ldr	r2, [pc, #124]	; (8005da0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d00e      	beq.n	8005d44 <HAL_TIM_Base_Start_IT+0x80>
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	4a1e      	ldr	r2, [pc, #120]	; (8005da4 <HAL_TIM_Base_Start_IT+0xe0>)
 8005d2c:	4293      	cmp	r3, r2
 8005d2e:	d009      	beq.n	8005d44 <HAL_TIM_Base_Start_IT+0x80>
 8005d30:	687b      	ldr	r3, [r7, #4]
 8005d32:	681b      	ldr	r3, [r3, #0]
 8005d34:	4a1c      	ldr	r2, [pc, #112]	; (8005da8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005d36:	4293      	cmp	r3, r2
 8005d38:	d004      	beq.n	8005d44 <HAL_TIM_Base_Start_IT+0x80>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a1b      	ldr	r2, [pc, #108]	; (8005dac <HAL_TIM_Base_Start_IT+0xe8>)
 8005d40:	4293      	cmp	r3, r2
 8005d42:	d115      	bne.n	8005d70 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	689a      	ldr	r2, [r3, #8]
 8005d4a:	4b19      	ldr	r3, [pc, #100]	; (8005db0 <HAL_TIM_Base_Start_IT+0xec>)
 8005d4c:	4013      	ands	r3, r2
 8005d4e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d50:	68fb      	ldr	r3, [r7, #12]
 8005d52:	2b06      	cmp	r3, #6
 8005d54:	d015      	beq.n	8005d82 <HAL_TIM_Base_Start_IT+0xbe>
 8005d56:	68fb      	ldr	r3, [r7, #12]
 8005d58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d5c:	d011      	beq.n	8005d82 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	681a      	ldr	r2, [r3, #0]
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f042 0201 	orr.w	r2, r2, #1
 8005d6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d6e:	e008      	b.n	8005d82 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	681a      	ldr	r2, [r3, #0]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f042 0201 	orr.w	r2, r2, #1
 8005d7e:	601a      	str	r2, [r3, #0]
 8005d80:	e000      	b.n	8005d84 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d82:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005d84:	2300      	movs	r3, #0
}
 8005d86:	4618      	mov	r0, r3
 8005d88:	3714      	adds	r7, #20
 8005d8a:	46bd      	mov	sp, r7
 8005d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d90:	4770      	bx	lr
 8005d92:	bf00      	nop
 8005d94:	40010000 	.word	0x40010000
 8005d98:	40000400 	.word	0x40000400
 8005d9c:	40000800 	.word	0x40000800
 8005da0:	40000c00 	.word	0x40000c00
 8005da4:	40010400 	.word	0x40010400
 8005da8:	40014000 	.word	0x40014000
 8005dac:	40001800 	.word	0x40001800
 8005db0:	00010007 	.word	0x00010007

08005db4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005db4:	b580      	push	{r7, lr}
 8005db6:	b082      	sub	sp, #8
 8005db8:	af00      	add	r7, sp, #0
 8005dba:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d101      	bne.n	8005dc6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005dc2:	2301      	movs	r3, #1
 8005dc4:	e049      	b.n	8005e5a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d106      	bne.n	8005de0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	2200      	movs	r2, #0
 8005dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005dda:	6878      	ldr	r0, [r7, #4]
 8005ddc:	f000 f841 	bl	8005e62 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	2202      	movs	r2, #2
 8005de4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	3304      	adds	r3, #4
 8005df0:	4619      	mov	r1, r3
 8005df2:	4610      	mov	r0, r2
 8005df4:	f000 fb64 	bl	80064c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2201      	movs	r2, #1
 8005dfc:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	2201      	movs	r2, #1
 8005e04:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	2201      	movs	r2, #1
 8005e0c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e58:	2300      	movs	r3, #0
}
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	3708      	adds	r7, #8
 8005e5e:	46bd      	mov	sp, r7
 8005e60:	bd80      	pop	{r7, pc}

08005e62 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005e62:	b480      	push	{r7}
 8005e64:	b083      	sub	sp, #12
 8005e66:	af00      	add	r7, sp, #0
 8005e68:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005e6a:	bf00      	nop
 8005e6c:	370c      	adds	r7, #12
 8005e6e:	46bd      	mov	sp, r7
 8005e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e74:	4770      	bx	lr

08005e76 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005e76:	b580      	push	{r7, lr}
 8005e78:	b082      	sub	sp, #8
 8005e7a:	af00      	add	r7, sp, #0
 8005e7c:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	691b      	ldr	r3, [r3, #16]
 8005e84:	f003 0302 	and.w	r3, r3, #2
 8005e88:	2b02      	cmp	r3, #2
 8005e8a:	d122      	bne.n	8005ed2 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	68db      	ldr	r3, [r3, #12]
 8005e92:	f003 0302 	and.w	r3, r3, #2
 8005e96:	2b02      	cmp	r3, #2
 8005e98:	d11b      	bne.n	8005ed2 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	681b      	ldr	r3, [r3, #0]
 8005e9e:	f06f 0202 	mvn.w	r2, #2
 8005ea2:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005eaa:	687b      	ldr	r3, [r7, #4]
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	699b      	ldr	r3, [r3, #24]
 8005eb0:	f003 0303 	and.w	r3, r3, #3
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d003      	beq.n	8005ec0 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005eb8:	6878      	ldr	r0, [r7, #4]
 8005eba:	f000 fae3 	bl	8006484 <HAL_TIM_IC_CaptureCallback>
 8005ebe:	e005      	b.n	8005ecc <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ec0:	6878      	ldr	r0, [r7, #4]
 8005ec2:	f000 fad5 	bl	8006470 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ec6:	6878      	ldr	r0, [r7, #4]
 8005ec8:	f000 fae6 	bl	8006498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	2200      	movs	r2, #0
 8005ed0:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	691b      	ldr	r3, [r3, #16]
 8005ed8:	f003 0304 	and.w	r3, r3, #4
 8005edc:	2b04      	cmp	r3, #4
 8005ede:	d122      	bne.n	8005f26 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68db      	ldr	r3, [r3, #12]
 8005ee6:	f003 0304 	and.w	r3, r3, #4
 8005eea:	2b04      	cmp	r3, #4
 8005eec:	d11b      	bne.n	8005f26 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f06f 0204 	mvn.w	r2, #4
 8005ef6:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	699b      	ldr	r3, [r3, #24]
 8005f04:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d003      	beq.n	8005f14 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f0c:	6878      	ldr	r0, [r7, #4]
 8005f0e:	f000 fab9 	bl	8006484 <HAL_TIM_IC_CaptureCallback>
 8005f12:	e005      	b.n	8005f20 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f14:	6878      	ldr	r0, [r7, #4]
 8005f16:	f000 faab 	bl	8006470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f1a:	6878      	ldr	r0, [r7, #4]
 8005f1c:	f000 fabc 	bl	8006498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2200      	movs	r2, #0
 8005f24:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	691b      	ldr	r3, [r3, #16]
 8005f2c:	f003 0308 	and.w	r3, r3, #8
 8005f30:	2b08      	cmp	r3, #8
 8005f32:	d122      	bne.n	8005f7a <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	68db      	ldr	r3, [r3, #12]
 8005f3a:	f003 0308 	and.w	r3, r3, #8
 8005f3e:	2b08      	cmp	r3, #8
 8005f40:	d11b      	bne.n	8005f7a <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f06f 0208 	mvn.w	r2, #8
 8005f4a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	2204      	movs	r2, #4
 8005f50:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	69db      	ldr	r3, [r3, #28]
 8005f58:	f003 0303 	and.w	r3, r3, #3
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005f60:	6878      	ldr	r0, [r7, #4]
 8005f62:	f000 fa8f 	bl	8006484 <HAL_TIM_IC_CaptureCallback>
 8005f66:	e005      	b.n	8005f74 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005f68:	6878      	ldr	r0, [r7, #4]
 8005f6a:	f000 fa81 	bl	8006470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005f6e:	6878      	ldr	r0, [r7, #4]
 8005f70:	f000 fa92 	bl	8006498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	2200      	movs	r2, #0
 8005f78:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	691b      	ldr	r3, [r3, #16]
 8005f80:	f003 0310 	and.w	r3, r3, #16
 8005f84:	2b10      	cmp	r3, #16
 8005f86:	d122      	bne.n	8005fce <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	f003 0310 	and.w	r3, r3, #16
 8005f92:	2b10      	cmp	r3, #16
 8005f94:	d11b      	bne.n	8005fce <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f06f 0210 	mvn.w	r2, #16
 8005f9e:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	2208      	movs	r2, #8
 8005fa4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	69db      	ldr	r3, [r3, #28]
 8005fac:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d003      	beq.n	8005fbc <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005fb4:	6878      	ldr	r0, [r7, #4]
 8005fb6:	f000 fa65 	bl	8006484 <HAL_TIM_IC_CaptureCallback>
 8005fba:	e005      	b.n	8005fc8 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f000 fa57 	bl	8006470 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005fc2:	6878      	ldr	r0, [r7, #4]
 8005fc4:	f000 fa68 	bl	8006498 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	2200      	movs	r2, #0
 8005fcc:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	691b      	ldr	r3, [r3, #16]
 8005fd4:	f003 0301 	and.w	r3, r3, #1
 8005fd8:	2b01      	cmp	r3, #1
 8005fda:	d10e      	bne.n	8005ffa <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	f003 0301 	and.w	r3, r3, #1
 8005fe6:	2b01      	cmp	r3, #1
 8005fe8:	d107      	bne.n	8005ffa <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	f06f 0201 	mvn.w	r2, #1
 8005ff2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ff4:	6878      	ldr	r0, [r7, #4]
 8005ff6:	f7fa fe9f 	bl	8000d38 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	691b      	ldr	r3, [r3, #16]
 8006000:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006004:	2b80      	cmp	r3, #128	; 0x80
 8006006:	d10e      	bne.n	8006026 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	681b      	ldr	r3, [r3, #0]
 800600c:	68db      	ldr	r3, [r3, #12]
 800600e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006012:	2b80      	cmp	r3, #128	; 0x80
 8006014:	d107      	bne.n	8006026 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800601e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006020:	6878      	ldr	r0, [r7, #4]
 8006022:	f000 fe7d 	bl	8006d20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	691b      	ldr	r3, [r3, #16]
 800602c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006030:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006034:	d10e      	bne.n	8006054 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006040:	2b80      	cmp	r3, #128	; 0x80
 8006042:	d107      	bne.n	8006054 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800604c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800604e:	6878      	ldr	r0, [r7, #4]
 8006050:	f000 fe70 	bl	8006d34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	691b      	ldr	r3, [r3, #16]
 800605a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800605e:	2b40      	cmp	r3, #64	; 0x40
 8006060:	d10e      	bne.n	8006080 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	68db      	ldr	r3, [r3, #12]
 8006068:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606c:	2b40      	cmp	r3, #64	; 0x40
 800606e:	d107      	bne.n	8006080 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006078:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f000 fa16 	bl	80064ac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	f003 0320 	and.w	r3, r3, #32
 800608a:	2b20      	cmp	r3, #32
 800608c:	d10e      	bne.n	80060ac <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	68db      	ldr	r3, [r3, #12]
 8006094:	f003 0320 	and.w	r3, r3, #32
 8006098:	2b20      	cmp	r3, #32
 800609a:	d107      	bne.n	80060ac <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	f06f 0220 	mvn.w	r2, #32
 80060a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80060a6:	6878      	ldr	r0, [r7, #4]
 80060a8:	f000 fe30 	bl	8006d0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80060ac:	bf00      	nop
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b086      	sub	sp, #24
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	60f8      	str	r0, [r7, #12]
 80060bc:	60b9      	str	r1, [r7, #8]
 80060be:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80060c0:	2300      	movs	r3, #0
 80060c2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80060c4:	68fb      	ldr	r3, [r7, #12]
 80060c6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80060ca:	2b01      	cmp	r3, #1
 80060cc:	d101      	bne.n	80060d2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80060ce:	2302      	movs	r3, #2
 80060d0:	e0ff      	b.n	80062d2 <HAL_TIM_PWM_ConfigChannel+0x21e>
 80060d2:	68fb      	ldr	r3, [r7, #12]
 80060d4:	2201      	movs	r2, #1
 80060d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	2b14      	cmp	r3, #20
 80060de:	f200 80f0 	bhi.w	80062c2 <HAL_TIM_PWM_ConfigChannel+0x20e>
 80060e2:	a201      	add	r2, pc, #4	; (adr r2, 80060e8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80060e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060e8:	0800613d 	.word	0x0800613d
 80060ec:	080062c3 	.word	0x080062c3
 80060f0:	080062c3 	.word	0x080062c3
 80060f4:	080062c3 	.word	0x080062c3
 80060f8:	0800617d 	.word	0x0800617d
 80060fc:	080062c3 	.word	0x080062c3
 8006100:	080062c3 	.word	0x080062c3
 8006104:	080062c3 	.word	0x080062c3
 8006108:	080061bf 	.word	0x080061bf
 800610c:	080062c3 	.word	0x080062c3
 8006110:	080062c3 	.word	0x080062c3
 8006114:	080062c3 	.word	0x080062c3
 8006118:	080061ff 	.word	0x080061ff
 800611c:	080062c3 	.word	0x080062c3
 8006120:	080062c3 	.word	0x080062c3
 8006124:	080062c3 	.word	0x080062c3
 8006128:	08006241 	.word	0x08006241
 800612c:	080062c3 	.word	0x080062c3
 8006130:	080062c3 	.word	0x080062c3
 8006134:	080062c3 	.word	0x080062c3
 8006138:	08006281 	.word	0x08006281
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	68b9      	ldr	r1, [r7, #8]
 8006142:	4618      	mov	r0, r3
 8006144:	f000 fa5c 	bl	8006600 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	699a      	ldr	r2, [r3, #24]
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f042 0208 	orr.w	r2, r2, #8
 8006156:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	699a      	ldr	r2, [r3, #24]
 800615e:	68fb      	ldr	r3, [r7, #12]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	f022 0204 	bic.w	r2, r2, #4
 8006166:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	6999      	ldr	r1, [r3, #24]
 800616e:	68bb      	ldr	r3, [r7, #8]
 8006170:	691a      	ldr	r2, [r3, #16]
 8006172:	68fb      	ldr	r3, [r7, #12]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	430a      	orrs	r2, r1
 8006178:	619a      	str	r2, [r3, #24]
      break;
 800617a:	e0a5      	b.n	80062c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	68b9      	ldr	r1, [r7, #8]
 8006182:	4618      	mov	r0, r3
 8006184:	f000 faae 	bl	80066e4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	699a      	ldr	r2, [r3, #24]
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006196:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	699a      	ldr	r2, [r3, #24]
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	6999      	ldr	r1, [r3, #24]
 80061ae:	68bb      	ldr	r3, [r7, #8]
 80061b0:	691b      	ldr	r3, [r3, #16]
 80061b2:	021a      	lsls	r2, r3, #8
 80061b4:	68fb      	ldr	r3, [r7, #12]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	430a      	orrs	r2, r1
 80061ba:	619a      	str	r2, [r3, #24]
      break;
 80061bc:	e084      	b.n	80062c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	68b9      	ldr	r1, [r7, #8]
 80061c4:	4618      	mov	r0, r3
 80061c6:	f000 fb05 	bl	80067d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	69da      	ldr	r2, [r3, #28]
 80061d0:	68fb      	ldr	r3, [r7, #12]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f042 0208 	orr.w	r2, r2, #8
 80061d8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	69da      	ldr	r2, [r3, #28]
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	681b      	ldr	r3, [r3, #0]
 80061e4:	f022 0204 	bic.w	r2, r2, #4
 80061e8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	681b      	ldr	r3, [r3, #0]
 80061ee:	69d9      	ldr	r1, [r3, #28]
 80061f0:	68bb      	ldr	r3, [r7, #8]
 80061f2:	691a      	ldr	r2, [r3, #16]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	430a      	orrs	r2, r1
 80061fa:	61da      	str	r2, [r3, #28]
      break;
 80061fc:	e064      	b.n	80062c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	68b9      	ldr	r1, [r7, #8]
 8006204:	4618      	mov	r0, r3
 8006206:	f000 fb5b 	bl	80068c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800620a:	68fb      	ldr	r3, [r7, #12]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	69da      	ldr	r2, [r3, #28]
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006218:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	681b      	ldr	r3, [r3, #0]
 800621e:	69da      	ldr	r2, [r3, #28]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006228:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	69d9      	ldr	r1, [r3, #28]
 8006230:	68bb      	ldr	r3, [r7, #8]
 8006232:	691b      	ldr	r3, [r3, #16]
 8006234:	021a      	lsls	r2, r3, #8
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	430a      	orrs	r2, r1
 800623c:	61da      	str	r2, [r3, #28]
      break;
 800623e:	e043      	b.n	80062c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68b9      	ldr	r1, [r7, #8]
 8006246:	4618      	mov	r0, r3
 8006248:	f000 fb92 	bl	8006970 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0208 	orr.w	r2, r2, #8
 800625a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 0204 	bic.w	r2, r2, #4
 800626a:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6d59      	ldr	r1, [r3, #84]	; 0x54
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	691a      	ldr	r2, [r3, #16]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800627e:	e023      	b.n	80062c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68b9      	ldr	r1, [r7, #8]
 8006286:	4618      	mov	r0, r3
 8006288:	f000 fbc4 	bl	8006a14 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800629a:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062aa:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	021a      	lsls	r2, r3, #8
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80062c0:	e002      	b.n	80062c8 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80062c2:	2301      	movs	r3, #1
 80062c4:	75fb      	strb	r3, [r7, #23]
      break;
 80062c6:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80062c8:	68fb      	ldr	r3, [r7, #12]
 80062ca:	2200      	movs	r2, #0
 80062cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80062d0:	7dfb      	ldrb	r3, [r7, #23]
}
 80062d2:	4618      	mov	r0, r3
 80062d4:	3718      	adds	r7, #24
 80062d6:	46bd      	mov	sp, r7
 80062d8:	bd80      	pop	{r7, pc}
 80062da:	bf00      	nop

080062dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80062dc:	b580      	push	{r7, lr}
 80062de:	b084      	sub	sp, #16
 80062e0:	af00      	add	r7, sp, #0
 80062e2:	6078      	str	r0, [r7, #4]
 80062e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80062e6:	2300      	movs	r3, #0
 80062e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80062f0:	2b01      	cmp	r3, #1
 80062f2:	d101      	bne.n	80062f8 <HAL_TIM_ConfigClockSource+0x1c>
 80062f4:	2302      	movs	r3, #2
 80062f6:	e0b4      	b.n	8006462 <HAL_TIM_ConfigClockSource+0x186>
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	2201      	movs	r2, #1
 80062fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	2202      	movs	r2, #2
 8006304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	689b      	ldr	r3, [r3, #8]
 800630e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006310:	68ba      	ldr	r2, [r7, #8]
 8006312:	4b56      	ldr	r3, [pc, #344]	; (800646c <HAL_TIM_ConfigClockSource+0x190>)
 8006314:	4013      	ands	r3, r2
 8006316:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006318:	68bb      	ldr	r3, [r7, #8]
 800631a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800631e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	68ba      	ldr	r2, [r7, #8]
 8006326:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006330:	d03e      	beq.n	80063b0 <HAL_TIM_ConfigClockSource+0xd4>
 8006332:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006336:	f200 8087 	bhi.w	8006448 <HAL_TIM_ConfigClockSource+0x16c>
 800633a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800633e:	f000 8086 	beq.w	800644e <HAL_TIM_ConfigClockSource+0x172>
 8006342:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006346:	d87f      	bhi.n	8006448 <HAL_TIM_ConfigClockSource+0x16c>
 8006348:	2b70      	cmp	r3, #112	; 0x70
 800634a:	d01a      	beq.n	8006382 <HAL_TIM_ConfigClockSource+0xa6>
 800634c:	2b70      	cmp	r3, #112	; 0x70
 800634e:	d87b      	bhi.n	8006448 <HAL_TIM_ConfigClockSource+0x16c>
 8006350:	2b60      	cmp	r3, #96	; 0x60
 8006352:	d050      	beq.n	80063f6 <HAL_TIM_ConfigClockSource+0x11a>
 8006354:	2b60      	cmp	r3, #96	; 0x60
 8006356:	d877      	bhi.n	8006448 <HAL_TIM_ConfigClockSource+0x16c>
 8006358:	2b50      	cmp	r3, #80	; 0x50
 800635a:	d03c      	beq.n	80063d6 <HAL_TIM_ConfigClockSource+0xfa>
 800635c:	2b50      	cmp	r3, #80	; 0x50
 800635e:	d873      	bhi.n	8006448 <HAL_TIM_ConfigClockSource+0x16c>
 8006360:	2b40      	cmp	r3, #64	; 0x40
 8006362:	d058      	beq.n	8006416 <HAL_TIM_ConfigClockSource+0x13a>
 8006364:	2b40      	cmp	r3, #64	; 0x40
 8006366:	d86f      	bhi.n	8006448 <HAL_TIM_ConfigClockSource+0x16c>
 8006368:	2b30      	cmp	r3, #48	; 0x30
 800636a:	d064      	beq.n	8006436 <HAL_TIM_ConfigClockSource+0x15a>
 800636c:	2b30      	cmp	r3, #48	; 0x30
 800636e:	d86b      	bhi.n	8006448 <HAL_TIM_ConfigClockSource+0x16c>
 8006370:	2b20      	cmp	r3, #32
 8006372:	d060      	beq.n	8006436 <HAL_TIM_ConfigClockSource+0x15a>
 8006374:	2b20      	cmp	r3, #32
 8006376:	d867      	bhi.n	8006448 <HAL_TIM_ConfigClockSource+0x16c>
 8006378:	2b00      	cmp	r3, #0
 800637a:	d05c      	beq.n	8006436 <HAL_TIM_ConfigClockSource+0x15a>
 800637c:	2b10      	cmp	r3, #16
 800637e:	d05a      	beq.n	8006436 <HAL_TIM_ConfigClockSource+0x15a>
 8006380:	e062      	b.n	8006448 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	6818      	ldr	r0, [r3, #0]
 8006386:	683b      	ldr	r3, [r7, #0]
 8006388:	6899      	ldr	r1, [r3, #8]
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	685a      	ldr	r2, [r3, #4]
 800638e:	683b      	ldr	r3, [r7, #0]
 8006390:	68db      	ldr	r3, [r3, #12]
 8006392:	f000 fc0d 	bl	8006bb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	689b      	ldr	r3, [r3, #8]
 800639c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800639e:	68bb      	ldr	r3, [r7, #8]
 80063a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80063a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	609a      	str	r2, [r3, #8]
      break;
 80063ae:	e04f      	b.n	8006450 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	6818      	ldr	r0, [r3, #0]
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	6899      	ldr	r1, [r3, #8]
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	685a      	ldr	r2, [r3, #4]
 80063bc:	683b      	ldr	r3, [r7, #0]
 80063be:	68db      	ldr	r3, [r3, #12]
 80063c0:	f000 fbf6 	bl	8006bb0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	689a      	ldr	r2, [r3, #8]
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80063d2:	609a      	str	r2, [r3, #8]
      break;
 80063d4:	e03c      	b.n	8006450 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	6818      	ldr	r0, [r3, #0]
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	6859      	ldr	r1, [r3, #4]
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	461a      	mov	r2, r3
 80063e4:	f000 fb6a 	bl	8006abc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	2150      	movs	r1, #80	; 0x50
 80063ee:	4618      	mov	r0, r3
 80063f0:	f000 fbc3 	bl	8006b7a <TIM_ITRx_SetConfig>
      break;
 80063f4:	e02c      	b.n	8006450 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	6818      	ldr	r0, [r3, #0]
 80063fa:	683b      	ldr	r3, [r7, #0]
 80063fc:	6859      	ldr	r1, [r3, #4]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	68db      	ldr	r3, [r3, #12]
 8006402:	461a      	mov	r2, r3
 8006404:	f000 fb89 	bl	8006b1a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	2160      	movs	r1, #96	; 0x60
 800640e:	4618      	mov	r0, r3
 8006410:	f000 fbb3 	bl	8006b7a <TIM_ITRx_SetConfig>
      break;
 8006414:	e01c      	b.n	8006450 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6818      	ldr	r0, [r3, #0]
 800641a:	683b      	ldr	r3, [r7, #0]
 800641c:	6859      	ldr	r1, [r3, #4]
 800641e:	683b      	ldr	r3, [r7, #0]
 8006420:	68db      	ldr	r3, [r3, #12]
 8006422:	461a      	mov	r2, r3
 8006424:	f000 fb4a 	bl	8006abc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	2140      	movs	r1, #64	; 0x40
 800642e:	4618      	mov	r0, r3
 8006430:	f000 fba3 	bl	8006b7a <TIM_ITRx_SetConfig>
      break;
 8006434:	e00c      	b.n	8006450 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681a      	ldr	r2, [r3, #0]
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	681b      	ldr	r3, [r3, #0]
 800643e:	4619      	mov	r1, r3
 8006440:	4610      	mov	r0, r2
 8006442:	f000 fb9a 	bl	8006b7a <TIM_ITRx_SetConfig>
      break;
 8006446:	e003      	b.n	8006450 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006448:	2301      	movs	r3, #1
 800644a:	73fb      	strb	r3, [r7, #15]
      break;
 800644c:	e000      	b.n	8006450 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800644e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	2201      	movs	r2, #1
 8006454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	2200      	movs	r2, #0
 800645c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006460:	7bfb      	ldrb	r3, [r7, #15]
}
 8006462:	4618      	mov	r0, r3
 8006464:	3710      	adds	r7, #16
 8006466:	46bd      	mov	sp, r7
 8006468:	bd80      	pop	{r7, pc}
 800646a:	bf00      	nop
 800646c:	fffeff88 	.word	0xfffeff88

08006470 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006470:	b480      	push	{r7}
 8006472:	b083      	sub	sp, #12
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006478:	bf00      	nop
 800647a:	370c      	adds	r7, #12
 800647c:	46bd      	mov	sp, r7
 800647e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006482:	4770      	bx	lr

08006484 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006484:	b480      	push	{r7}
 8006486:	b083      	sub	sp, #12
 8006488:	af00      	add	r7, sp, #0
 800648a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800648c:	bf00      	nop
 800648e:	370c      	adds	r7, #12
 8006490:	46bd      	mov	sp, r7
 8006492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006496:	4770      	bx	lr

08006498 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006498:	b480      	push	{r7}
 800649a:	b083      	sub	sp, #12
 800649c:	af00      	add	r7, sp, #0
 800649e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80064a0:	bf00      	nop
 80064a2:	370c      	adds	r7, #12
 80064a4:	46bd      	mov	sp, r7
 80064a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064aa:	4770      	bx	lr

080064ac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80064ac:	b480      	push	{r7}
 80064ae:	b083      	sub	sp, #12
 80064b0:	af00      	add	r7, sp, #0
 80064b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80064b4:	bf00      	nop
 80064b6:	370c      	adds	r7, #12
 80064b8:	46bd      	mov	sp, r7
 80064ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064be:	4770      	bx	lr

080064c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	681b      	ldr	r3, [r3, #0]
 80064ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	4a40      	ldr	r2, [pc, #256]	; (80065d4 <TIM_Base_SetConfig+0x114>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d013      	beq.n	8006500 <TIM_Base_SetConfig+0x40>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064de:	d00f      	beq.n	8006500 <TIM_Base_SetConfig+0x40>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	4a3d      	ldr	r2, [pc, #244]	; (80065d8 <TIM_Base_SetConfig+0x118>)
 80064e4:	4293      	cmp	r3, r2
 80064e6:	d00b      	beq.n	8006500 <TIM_Base_SetConfig+0x40>
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	4a3c      	ldr	r2, [pc, #240]	; (80065dc <TIM_Base_SetConfig+0x11c>)
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d007      	beq.n	8006500 <TIM_Base_SetConfig+0x40>
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	4a3b      	ldr	r2, [pc, #236]	; (80065e0 <TIM_Base_SetConfig+0x120>)
 80064f4:	4293      	cmp	r3, r2
 80064f6:	d003      	beq.n	8006500 <TIM_Base_SetConfig+0x40>
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	4a3a      	ldr	r2, [pc, #232]	; (80065e4 <TIM_Base_SetConfig+0x124>)
 80064fc:	4293      	cmp	r3, r2
 80064fe:	d108      	bne.n	8006512 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006506:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	685b      	ldr	r3, [r3, #4]
 800650c:	68fa      	ldr	r2, [r7, #12]
 800650e:	4313      	orrs	r3, r2
 8006510:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	4a2f      	ldr	r2, [pc, #188]	; (80065d4 <TIM_Base_SetConfig+0x114>)
 8006516:	4293      	cmp	r3, r2
 8006518:	d02b      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006520:	d027      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	4a2c      	ldr	r2, [pc, #176]	; (80065d8 <TIM_Base_SetConfig+0x118>)
 8006526:	4293      	cmp	r3, r2
 8006528:	d023      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	4a2b      	ldr	r2, [pc, #172]	; (80065dc <TIM_Base_SetConfig+0x11c>)
 800652e:	4293      	cmp	r3, r2
 8006530:	d01f      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	4a2a      	ldr	r2, [pc, #168]	; (80065e0 <TIM_Base_SetConfig+0x120>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d01b      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	4a29      	ldr	r2, [pc, #164]	; (80065e4 <TIM_Base_SetConfig+0x124>)
 800653e:	4293      	cmp	r3, r2
 8006540:	d017      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	4a28      	ldr	r2, [pc, #160]	; (80065e8 <TIM_Base_SetConfig+0x128>)
 8006546:	4293      	cmp	r3, r2
 8006548:	d013      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	4a27      	ldr	r2, [pc, #156]	; (80065ec <TIM_Base_SetConfig+0x12c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d00f      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	4a26      	ldr	r2, [pc, #152]	; (80065f0 <TIM_Base_SetConfig+0x130>)
 8006556:	4293      	cmp	r3, r2
 8006558:	d00b      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	4a25      	ldr	r2, [pc, #148]	; (80065f4 <TIM_Base_SetConfig+0x134>)
 800655e:	4293      	cmp	r3, r2
 8006560:	d007      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	4a24      	ldr	r2, [pc, #144]	; (80065f8 <TIM_Base_SetConfig+0x138>)
 8006566:	4293      	cmp	r3, r2
 8006568:	d003      	beq.n	8006572 <TIM_Base_SetConfig+0xb2>
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	4a23      	ldr	r2, [pc, #140]	; (80065fc <TIM_Base_SetConfig+0x13c>)
 800656e:	4293      	cmp	r3, r2
 8006570:	d108      	bne.n	8006584 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006578:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800657a:	683b      	ldr	r3, [r7, #0]
 800657c:	68db      	ldr	r3, [r3, #12]
 800657e:	68fa      	ldr	r2, [r7, #12]
 8006580:	4313      	orrs	r3, r2
 8006582:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	695b      	ldr	r3, [r3, #20]
 800658e:	4313      	orrs	r3, r2
 8006590:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	68fa      	ldr	r2, [r7, #12]
 8006596:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006598:	683b      	ldr	r3, [r7, #0]
 800659a:	689a      	ldr	r2, [r3, #8]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065a0:	683b      	ldr	r3, [r7, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	4a0a      	ldr	r2, [pc, #40]	; (80065d4 <TIM_Base_SetConfig+0x114>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d003      	beq.n	80065b8 <TIM_Base_SetConfig+0xf8>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	4a0c      	ldr	r2, [pc, #48]	; (80065e4 <TIM_Base_SetConfig+0x124>)
 80065b4:	4293      	cmp	r3, r2
 80065b6:	d103      	bne.n	80065c0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	691a      	ldr	r2, [r3, #16]
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	2201      	movs	r2, #1
 80065c4:	615a      	str	r2, [r3, #20]
}
 80065c6:	bf00      	nop
 80065c8:	3714      	adds	r7, #20
 80065ca:	46bd      	mov	sp, r7
 80065cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065d0:	4770      	bx	lr
 80065d2:	bf00      	nop
 80065d4:	40010000 	.word	0x40010000
 80065d8:	40000400 	.word	0x40000400
 80065dc:	40000800 	.word	0x40000800
 80065e0:	40000c00 	.word	0x40000c00
 80065e4:	40010400 	.word	0x40010400
 80065e8:	40014000 	.word	0x40014000
 80065ec:	40014400 	.word	0x40014400
 80065f0:	40014800 	.word	0x40014800
 80065f4:	40001800 	.word	0x40001800
 80065f8:	40001c00 	.word	0x40001c00
 80065fc:	40002000 	.word	0x40002000

08006600 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006600:	b480      	push	{r7}
 8006602:	b087      	sub	sp, #28
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	6a1b      	ldr	r3, [r3, #32]
 800660e:	f023 0201 	bic.w	r2, r3, #1
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	6a1b      	ldr	r3, [r3, #32]
 800661a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	685b      	ldr	r3, [r3, #4]
 8006620:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	699b      	ldr	r3, [r3, #24]
 8006626:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006628:	68fa      	ldr	r2, [r7, #12]
 800662a:	4b2b      	ldr	r3, [pc, #172]	; (80066d8 <TIM_OC1_SetConfig+0xd8>)
 800662c:	4013      	ands	r3, r2
 800662e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	f023 0303 	bic.w	r3, r3, #3
 8006636:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	68fa      	ldr	r2, [r7, #12]
 800663e:	4313      	orrs	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	f023 0302 	bic.w	r3, r3, #2
 8006648:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800664a:	683b      	ldr	r3, [r7, #0]
 800664c:	689b      	ldr	r3, [r3, #8]
 800664e:	697a      	ldr	r2, [r7, #20]
 8006650:	4313      	orrs	r3, r2
 8006652:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	4a21      	ldr	r2, [pc, #132]	; (80066dc <TIM_OC1_SetConfig+0xdc>)
 8006658:	4293      	cmp	r3, r2
 800665a:	d003      	beq.n	8006664 <TIM_OC1_SetConfig+0x64>
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	4a20      	ldr	r2, [pc, #128]	; (80066e0 <TIM_OC1_SetConfig+0xe0>)
 8006660:	4293      	cmp	r3, r2
 8006662:	d10c      	bne.n	800667e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	f023 0308 	bic.w	r3, r3, #8
 800666a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800666c:	683b      	ldr	r3, [r7, #0]
 800666e:	68db      	ldr	r3, [r3, #12]
 8006670:	697a      	ldr	r2, [r7, #20]
 8006672:	4313      	orrs	r3, r2
 8006674:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	f023 0304 	bic.w	r3, r3, #4
 800667c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	4a16      	ldr	r2, [pc, #88]	; (80066dc <TIM_OC1_SetConfig+0xdc>)
 8006682:	4293      	cmp	r3, r2
 8006684:	d003      	beq.n	800668e <TIM_OC1_SetConfig+0x8e>
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	4a15      	ldr	r2, [pc, #84]	; (80066e0 <TIM_OC1_SetConfig+0xe0>)
 800668a:	4293      	cmp	r3, r2
 800668c:	d111      	bne.n	80066b2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800668e:	693b      	ldr	r3, [r7, #16]
 8006690:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006694:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006696:	693b      	ldr	r3, [r7, #16]
 8006698:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800669c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800669e:	683b      	ldr	r3, [r7, #0]
 80066a0:	695b      	ldr	r3, [r3, #20]
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	4313      	orrs	r3, r2
 80066a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066a8:	683b      	ldr	r3, [r7, #0]
 80066aa:	699b      	ldr	r3, [r3, #24]
 80066ac:	693a      	ldr	r2, [r7, #16]
 80066ae:	4313      	orrs	r3, r2
 80066b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	68fa      	ldr	r2, [r7, #12]
 80066bc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	685a      	ldr	r2, [r3, #4]
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	697a      	ldr	r2, [r7, #20]
 80066ca:	621a      	str	r2, [r3, #32]
}
 80066cc:	bf00      	nop
 80066ce:	371c      	adds	r7, #28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d6:	4770      	bx	lr
 80066d8:	fffeff8f 	.word	0xfffeff8f
 80066dc:	40010000 	.word	0x40010000
 80066e0:	40010400 	.word	0x40010400

080066e4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066e4:	b480      	push	{r7}
 80066e6:	b087      	sub	sp, #28
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]
 80066ec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	6a1b      	ldr	r3, [r3, #32]
 80066f2:	f023 0210 	bic.w	r2, r3, #16
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6a1b      	ldr	r3, [r3, #32]
 80066fe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	685b      	ldr	r3, [r3, #4]
 8006704:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	699b      	ldr	r3, [r3, #24]
 800670a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800670c:	68fa      	ldr	r2, [r7, #12]
 800670e:	4b2e      	ldr	r3, [pc, #184]	; (80067c8 <TIM_OC2_SetConfig+0xe4>)
 8006710:	4013      	ands	r3, r2
 8006712:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800671a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800671c:	683b      	ldr	r3, [r7, #0]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	021b      	lsls	r3, r3, #8
 8006722:	68fa      	ldr	r2, [r7, #12]
 8006724:	4313      	orrs	r3, r2
 8006726:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006728:	697b      	ldr	r3, [r7, #20]
 800672a:	f023 0320 	bic.w	r3, r3, #32
 800672e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006730:	683b      	ldr	r3, [r7, #0]
 8006732:	689b      	ldr	r3, [r3, #8]
 8006734:	011b      	lsls	r3, r3, #4
 8006736:	697a      	ldr	r2, [r7, #20]
 8006738:	4313      	orrs	r3, r2
 800673a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	4a23      	ldr	r2, [pc, #140]	; (80067cc <TIM_OC2_SetConfig+0xe8>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d003      	beq.n	800674c <TIM_OC2_SetConfig+0x68>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	4a22      	ldr	r2, [pc, #136]	; (80067d0 <TIM_OC2_SetConfig+0xec>)
 8006748:	4293      	cmp	r3, r2
 800674a:	d10d      	bne.n	8006768 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800674c:	697b      	ldr	r3, [r7, #20]
 800674e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006752:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006754:	683b      	ldr	r3, [r7, #0]
 8006756:	68db      	ldr	r3, [r3, #12]
 8006758:	011b      	lsls	r3, r3, #4
 800675a:	697a      	ldr	r2, [r7, #20]
 800675c:	4313      	orrs	r3, r2
 800675e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006760:	697b      	ldr	r3, [r7, #20]
 8006762:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006766:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	4a18      	ldr	r2, [pc, #96]	; (80067cc <TIM_OC2_SetConfig+0xe8>)
 800676c:	4293      	cmp	r3, r2
 800676e:	d003      	beq.n	8006778 <TIM_OC2_SetConfig+0x94>
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	4a17      	ldr	r2, [pc, #92]	; (80067d0 <TIM_OC2_SetConfig+0xec>)
 8006774:	4293      	cmp	r3, r2
 8006776:	d113      	bne.n	80067a0 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800677e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006786:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006788:	683b      	ldr	r3, [r7, #0]
 800678a:	695b      	ldr	r3, [r3, #20]
 800678c:	009b      	lsls	r3, r3, #2
 800678e:	693a      	ldr	r2, [r7, #16]
 8006790:	4313      	orrs	r3, r2
 8006792:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006794:	683b      	ldr	r3, [r7, #0]
 8006796:	699b      	ldr	r3, [r3, #24]
 8006798:	009b      	lsls	r3, r3, #2
 800679a:	693a      	ldr	r2, [r7, #16]
 800679c:	4313      	orrs	r3, r2
 800679e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	68fa      	ldr	r2, [r7, #12]
 80067aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	685a      	ldr	r2, [r3, #4]
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	697a      	ldr	r2, [r7, #20]
 80067b8:	621a      	str	r2, [r3, #32]
}
 80067ba:	bf00      	nop
 80067bc:	371c      	adds	r7, #28
 80067be:	46bd      	mov	sp, r7
 80067c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067c4:	4770      	bx	lr
 80067c6:	bf00      	nop
 80067c8:	feff8fff 	.word	0xfeff8fff
 80067cc:	40010000 	.word	0x40010000
 80067d0:	40010400 	.word	0x40010400

080067d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067fc:	68fa      	ldr	r2, [r7, #12]
 80067fe:	4b2d      	ldr	r3, [pc, #180]	; (80068b4 <TIM_OC3_SetConfig+0xe0>)
 8006800:	4013      	ands	r3, r2
 8006802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 0303 	bic.w	r3, r3, #3
 800680a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800681c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	021b      	lsls	r3, r3, #8
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	4313      	orrs	r3, r2
 8006828:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a22      	ldr	r2, [pc, #136]	; (80068b8 <TIM_OC3_SetConfig+0xe4>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d003      	beq.n	800683a <TIM_OC3_SetConfig+0x66>
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	4a21      	ldr	r2, [pc, #132]	; (80068bc <TIM_OC3_SetConfig+0xe8>)
 8006836:	4293      	cmp	r3, r2
 8006838:	d10d      	bne.n	8006856 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800683a:	697b      	ldr	r3, [r7, #20]
 800683c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006840:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	021b      	lsls	r3, r3, #8
 8006848:	697a      	ldr	r2, [r7, #20]
 800684a:	4313      	orrs	r3, r2
 800684c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800684e:	697b      	ldr	r3, [r7, #20]
 8006850:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006854:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	4a17      	ldr	r2, [pc, #92]	; (80068b8 <TIM_OC3_SetConfig+0xe4>)
 800685a:	4293      	cmp	r3, r2
 800685c:	d003      	beq.n	8006866 <TIM_OC3_SetConfig+0x92>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	4a16      	ldr	r2, [pc, #88]	; (80068bc <TIM_OC3_SetConfig+0xe8>)
 8006862:	4293      	cmp	r3, r2
 8006864:	d113      	bne.n	800688e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006866:	693b      	ldr	r3, [r7, #16]
 8006868:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800686c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800686e:	693b      	ldr	r3, [r7, #16]
 8006870:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006874:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006876:	683b      	ldr	r3, [r7, #0]
 8006878:	695b      	ldr	r3, [r3, #20]
 800687a:	011b      	lsls	r3, r3, #4
 800687c:	693a      	ldr	r2, [r7, #16]
 800687e:	4313      	orrs	r3, r2
 8006880:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006882:	683b      	ldr	r3, [r7, #0]
 8006884:	699b      	ldr	r3, [r3, #24]
 8006886:	011b      	lsls	r3, r3, #4
 8006888:	693a      	ldr	r2, [r7, #16]
 800688a:	4313      	orrs	r3, r2
 800688c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	693a      	ldr	r2, [r7, #16]
 8006892:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	68fa      	ldr	r2, [r7, #12]
 8006898:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	685a      	ldr	r2, [r3, #4]
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	697a      	ldr	r2, [r7, #20]
 80068a6:	621a      	str	r2, [r3, #32]
}
 80068a8:	bf00      	nop
 80068aa:	371c      	adds	r7, #28
 80068ac:	46bd      	mov	sp, r7
 80068ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b2:	4770      	bx	lr
 80068b4:	fffeff8f 	.word	0xfffeff8f
 80068b8:	40010000 	.word	0x40010000
 80068bc:	40010400 	.word	0x40010400

080068c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068c0:	b480      	push	{r7}
 80068c2:	b087      	sub	sp, #28
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
 80068c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	6a1b      	ldr	r3, [r3, #32]
 80068ce:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	6a1b      	ldr	r3, [r3, #32]
 80068da:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	685b      	ldr	r3, [r3, #4]
 80068e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	69db      	ldr	r3, [r3, #28]
 80068e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068e8:	68fa      	ldr	r2, [r7, #12]
 80068ea:	4b1e      	ldr	r3, [pc, #120]	; (8006964 <TIM_OC4_SetConfig+0xa4>)
 80068ec:	4013      	ands	r3, r2
 80068ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068f0:	68fb      	ldr	r3, [r7, #12]
 80068f2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	681b      	ldr	r3, [r3, #0]
 80068fc:	021b      	lsls	r3, r3, #8
 80068fe:	68fa      	ldr	r2, [r7, #12]
 8006900:	4313      	orrs	r3, r2
 8006902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006904:	693b      	ldr	r3, [r7, #16]
 8006906:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800690a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800690c:	683b      	ldr	r3, [r7, #0]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	031b      	lsls	r3, r3, #12
 8006912:	693a      	ldr	r2, [r7, #16]
 8006914:	4313      	orrs	r3, r2
 8006916:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a13      	ldr	r2, [pc, #76]	; (8006968 <TIM_OC4_SetConfig+0xa8>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d003      	beq.n	8006928 <TIM_OC4_SetConfig+0x68>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a12      	ldr	r2, [pc, #72]	; (800696c <TIM_OC4_SetConfig+0xac>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d109      	bne.n	800693c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800692e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006930:	683b      	ldr	r3, [r7, #0]
 8006932:	695b      	ldr	r3, [r3, #20]
 8006934:	019b      	lsls	r3, r3, #6
 8006936:	697a      	ldr	r2, [r7, #20]
 8006938:	4313      	orrs	r3, r2
 800693a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	697a      	ldr	r2, [r7, #20]
 8006940:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	68fa      	ldr	r2, [r7, #12]
 8006946:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	685a      	ldr	r2, [r3, #4]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006950:	687b      	ldr	r3, [r7, #4]
 8006952:	693a      	ldr	r2, [r7, #16]
 8006954:	621a      	str	r2, [r3, #32]
}
 8006956:	bf00      	nop
 8006958:	371c      	adds	r7, #28
 800695a:	46bd      	mov	sp, r7
 800695c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006960:	4770      	bx	lr
 8006962:	bf00      	nop
 8006964:	feff8fff 	.word	0xfeff8fff
 8006968:	40010000 	.word	0x40010000
 800696c:	40010400 	.word	0x40010400

08006970 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006970:	b480      	push	{r7}
 8006972:	b087      	sub	sp, #28
 8006974:	af00      	add	r7, sp, #0
 8006976:	6078      	str	r0, [r7, #4]
 8006978:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6a1b      	ldr	r3, [r3, #32]
 800697e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	6a1b      	ldr	r3, [r3, #32]
 800698a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	685b      	ldr	r3, [r3, #4]
 8006990:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006996:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006998:	68fa      	ldr	r2, [r7, #12]
 800699a:	4b1b      	ldr	r3, [pc, #108]	; (8006a08 <TIM_OC5_SetConfig+0x98>)
 800699c:	4013      	ands	r3, r2
 800699e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069a0:	683b      	ldr	r3, [r7, #0]
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	68fa      	ldr	r2, [r7, #12]
 80069a6:	4313      	orrs	r3, r2
 80069a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80069aa:	693b      	ldr	r3, [r7, #16]
 80069ac:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80069b0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	689b      	ldr	r3, [r3, #8]
 80069b6:	041b      	lsls	r3, r3, #16
 80069b8:	693a      	ldr	r2, [r7, #16]
 80069ba:	4313      	orrs	r3, r2
 80069bc:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	4a12      	ldr	r2, [pc, #72]	; (8006a0c <TIM_OC5_SetConfig+0x9c>)
 80069c2:	4293      	cmp	r3, r2
 80069c4:	d003      	beq.n	80069ce <TIM_OC5_SetConfig+0x5e>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	4a11      	ldr	r2, [pc, #68]	; (8006a10 <TIM_OC5_SetConfig+0xa0>)
 80069ca:	4293      	cmp	r3, r2
 80069cc:	d109      	bne.n	80069e2 <TIM_OC5_SetConfig+0x72>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 80069ce:	697b      	ldr	r3, [r7, #20]
 80069d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80069d4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	695b      	ldr	r3, [r3, #20]
 80069da:	021b      	lsls	r3, r3, #8
 80069dc:	697a      	ldr	r2, [r7, #20]
 80069de:	4313      	orrs	r3, r2
 80069e0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	697a      	ldr	r2, [r7, #20]
 80069e6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 80069ee:	683b      	ldr	r3, [r7, #0]
 80069f0:	685a      	ldr	r2, [r3, #4]
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	693a      	ldr	r2, [r7, #16]
 80069fa:	621a      	str	r2, [r3, #32]
}
 80069fc:	bf00      	nop
 80069fe:	371c      	adds	r7, #28
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr
 8006a08:	fffeff8f 	.word	0xfffeff8f
 8006a0c:	40010000 	.word	0x40010000
 8006a10:	40010400 	.word	0x40010400

08006a14 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006a14:	b480      	push	{r7}
 8006a16:	b087      	sub	sp, #28
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
 8006a1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	6a1b      	ldr	r3, [r3, #32]
 8006a22:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	6a1b      	ldr	r3, [r3, #32]
 8006a2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	685b      	ldr	r3, [r3, #4]
 8006a34:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006a3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006a3c:	68fa      	ldr	r2, [r7, #12]
 8006a3e:	4b1c      	ldr	r3, [pc, #112]	; (8006ab0 <TIM_OC6_SetConfig+0x9c>)
 8006a40:	4013      	ands	r3, r2
 8006a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	021b      	lsls	r3, r3, #8
 8006a4a:	68fa      	ldr	r2, [r7, #12]
 8006a4c:	4313      	orrs	r3, r2
 8006a4e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006a50:	693b      	ldr	r3, [r7, #16]
 8006a52:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006a56:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	689b      	ldr	r3, [r3, #8]
 8006a5c:	051b      	lsls	r3, r3, #20
 8006a5e:	693a      	ldr	r2, [r7, #16]
 8006a60:	4313      	orrs	r3, r2
 8006a62:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	4a13      	ldr	r2, [pc, #76]	; (8006ab4 <TIM_OC6_SetConfig+0xa0>)
 8006a68:	4293      	cmp	r3, r2
 8006a6a:	d003      	beq.n	8006a74 <TIM_OC6_SetConfig+0x60>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	4a12      	ldr	r2, [pc, #72]	; (8006ab8 <TIM_OC6_SetConfig+0xa4>)
 8006a70:	4293      	cmp	r3, r2
 8006a72:	d109      	bne.n	8006a88 <TIM_OC6_SetConfig+0x74>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006a7a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006a7c:	683b      	ldr	r3, [r7, #0]
 8006a7e:	695b      	ldr	r3, [r3, #20]
 8006a80:	029b      	lsls	r3, r3, #10
 8006a82:	697a      	ldr	r2, [r7, #20]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	697a      	ldr	r2, [r7, #20]
 8006a8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	68fa      	ldr	r2, [r7, #12]
 8006a92:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006a94:	683b      	ldr	r3, [r7, #0]
 8006a96:	685a      	ldr	r2, [r3, #4]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	621a      	str	r2, [r3, #32]
}
 8006aa2:	bf00      	nop
 8006aa4:	371c      	adds	r7, #28
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aac:	4770      	bx	lr
 8006aae:	bf00      	nop
 8006ab0:	feff8fff 	.word	0xfeff8fff
 8006ab4:	40010000 	.word	0x40010000
 8006ab8:	40010400 	.word	0x40010400

08006abc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b087      	sub	sp, #28
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	60f8      	str	r0, [r7, #12]
 8006ac4:	60b9      	str	r1, [r7, #8]
 8006ac6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	6a1b      	ldr	r3, [r3, #32]
 8006acc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	6a1b      	ldr	r3, [r3, #32]
 8006ad2:	f023 0201 	bic.w	r2, r3, #1
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ada:	68fb      	ldr	r3, [r7, #12]
 8006adc:	699b      	ldr	r3, [r3, #24]
 8006ade:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006ae0:	693b      	ldr	r3, [r7, #16]
 8006ae2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006ae6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	011b      	lsls	r3, r3, #4
 8006aec:	693a      	ldr	r2, [r7, #16]
 8006aee:	4313      	orrs	r3, r2
 8006af0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006af2:	697b      	ldr	r3, [r7, #20]
 8006af4:	f023 030a 	bic.w	r3, r3, #10
 8006af8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006afa:	697a      	ldr	r2, [r7, #20]
 8006afc:	68bb      	ldr	r3, [r7, #8]
 8006afe:	4313      	orrs	r3, r2
 8006b00:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006b02:	68fb      	ldr	r3, [r7, #12]
 8006b04:	693a      	ldr	r2, [r7, #16]
 8006b06:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	697a      	ldr	r2, [r7, #20]
 8006b0c:	621a      	str	r2, [r3, #32]
}
 8006b0e:	bf00      	nop
 8006b10:	371c      	adds	r7, #28
 8006b12:	46bd      	mov	sp, r7
 8006b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b18:	4770      	bx	lr

08006b1a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006b1a:	b480      	push	{r7}
 8006b1c:	b087      	sub	sp, #28
 8006b1e:	af00      	add	r7, sp, #0
 8006b20:	60f8      	str	r0, [r7, #12]
 8006b22:	60b9      	str	r1, [r7, #8]
 8006b24:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	6a1b      	ldr	r3, [r3, #32]
 8006b2a:	f023 0210 	bic.w	r2, r3, #16
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	699b      	ldr	r3, [r3, #24]
 8006b36:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	6a1b      	ldr	r3, [r3, #32]
 8006b3c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006b3e:	697b      	ldr	r3, [r7, #20]
 8006b40:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006b44:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	031b      	lsls	r3, r3, #12
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	4313      	orrs	r3, r2
 8006b4e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006b56:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006b58:	68bb      	ldr	r3, [r7, #8]
 8006b5a:	011b      	lsls	r3, r3, #4
 8006b5c:	693a      	ldr	r2, [r7, #16]
 8006b5e:	4313      	orrs	r3, r2
 8006b60:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	697a      	ldr	r2, [r7, #20]
 8006b66:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006b68:	68fb      	ldr	r3, [r7, #12]
 8006b6a:	693a      	ldr	r2, [r7, #16]
 8006b6c:	621a      	str	r2, [r3, #32]
}
 8006b6e:	bf00      	nop
 8006b70:	371c      	adds	r7, #28
 8006b72:	46bd      	mov	sp, r7
 8006b74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b78:	4770      	bx	lr

08006b7a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006b7a:	b480      	push	{r7}
 8006b7c:	b085      	sub	sp, #20
 8006b7e:	af00      	add	r7, sp, #0
 8006b80:	6078      	str	r0, [r7, #4]
 8006b82:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	689b      	ldr	r3, [r3, #8]
 8006b88:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006b8a:	68fb      	ldr	r3, [r7, #12]
 8006b8c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b90:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006b92:	683a      	ldr	r2, [r7, #0]
 8006b94:	68fb      	ldr	r3, [r7, #12]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	f043 0307 	orr.w	r3, r3, #7
 8006b9c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	68fa      	ldr	r2, [r7, #12]
 8006ba2:	609a      	str	r2, [r3, #8]
}
 8006ba4:	bf00      	nop
 8006ba6:	3714      	adds	r7, #20
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bae:	4770      	bx	lr

08006bb0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
 8006bbc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006bbe:	68fb      	ldr	r3, [r7, #12]
 8006bc0:	689b      	ldr	r3, [r3, #8]
 8006bc2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006bc4:	697b      	ldr	r3, [r7, #20]
 8006bc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006bca:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	021a      	lsls	r2, r3, #8
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	68bb      	ldr	r3, [r7, #8]
 8006bd6:	4313      	orrs	r3, r2
 8006bd8:	697a      	ldr	r2, [r7, #20]
 8006bda:	4313      	orrs	r3, r2
 8006bdc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	697a      	ldr	r2, [r7, #20]
 8006be2:	609a      	str	r2, [r3, #8]
}
 8006be4:	bf00      	nop
 8006be6:	371c      	adds	r7, #28
 8006be8:	46bd      	mov	sp, r7
 8006bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bee:	4770      	bx	lr

08006bf0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006bf0:	b480      	push	{r7}
 8006bf2:	b085      	sub	sp, #20
 8006bf4:	af00      	add	r7, sp, #0
 8006bf6:	6078      	str	r0, [r7, #4]
 8006bf8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c00:	2b01      	cmp	r3, #1
 8006c02:	d101      	bne.n	8006c08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006c04:	2302      	movs	r3, #2
 8006c06:	e06d      	b.n	8006ce4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2201      	movs	r2, #1
 8006c0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	2202      	movs	r2, #2
 8006c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	685b      	ldr	r3, [r3, #4]
 8006c1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	689b      	ldr	r3, [r3, #8]
 8006c26:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	4a30      	ldr	r2, [pc, #192]	; (8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d004      	beq.n	8006c3c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	681b      	ldr	r3, [r3, #0]
 8006c36:	4a2f      	ldr	r2, [pc, #188]	; (8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d108      	bne.n	8006c4e <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006c3c:	68fb      	ldr	r3, [r7, #12]
 8006c3e:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8006c42:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006c44:	683b      	ldr	r3, [r7, #0]
 8006c46:	685b      	ldr	r3, [r3, #4]
 8006c48:	68fa      	ldr	r2, [r7, #12]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006c4e:	68fb      	ldr	r3, [r7, #12]
 8006c50:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006c54:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006c56:	683b      	ldr	r3, [r7, #0]
 8006c58:	681b      	ldr	r3, [r3, #0]
 8006c5a:	68fa      	ldr	r2, [r7, #12]
 8006c5c:	4313      	orrs	r3, r2
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	68fa      	ldr	r2, [r7, #12]
 8006c66:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a20      	ldr	r2, [pc, #128]	; (8006cf0 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8006c6e:	4293      	cmp	r3, r2
 8006c70:	d022      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006c7a:	d01d      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	4a1d      	ldr	r2, [pc, #116]	; (8006cf8 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d018      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	4a1c      	ldr	r2, [pc, #112]	; (8006cfc <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d013      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	4a1a      	ldr	r2, [pc, #104]	; (8006d00 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8006c96:	4293      	cmp	r3, r2
 8006c98:	d00e      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	4a15      	ldr	r2, [pc, #84]	; (8006cf4 <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d009      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a16      	ldr	r2, [pc, #88]	; (8006d04 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d004      	beq.n	8006cb8 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a15      	ldr	r2, [pc, #84]	; (8006d08 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d10c      	bne.n	8006cd2 <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006cb8:	68bb      	ldr	r3, [r7, #8]
 8006cba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006cbe:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	689b      	ldr	r3, [r3, #8]
 8006cc4:	68ba      	ldr	r2, [r7, #8]
 8006cc6:	4313      	orrs	r3, r2
 8006cc8:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	68ba      	ldr	r2, [r7, #8]
 8006cd0:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2200      	movs	r2, #0
 8006cde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006ce2:	2300      	movs	r3, #0
}
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	3714      	adds	r7, #20
 8006ce8:	46bd      	mov	sp, r7
 8006cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cee:	4770      	bx	lr
 8006cf0:	40010000 	.word	0x40010000
 8006cf4:	40010400 	.word	0x40010400
 8006cf8:	40000400 	.word	0x40000400
 8006cfc:	40000800 	.word	0x40000800
 8006d00:	40000c00 	.word	0x40000c00
 8006d04:	40014000 	.word	0x40014000
 8006d08:	40001800 	.word	0x40001800

08006d0c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006d0c:	b480      	push	{r7}
 8006d0e:	b083      	sub	sp, #12
 8006d10:	af00      	add	r7, sp, #0
 8006d12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006d14:	bf00      	nop
 8006d16:	370c      	adds	r7, #12
 8006d18:	46bd      	mov	sp, r7
 8006d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1e:	4770      	bx	lr

08006d20 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006d20:	b480      	push	{r7}
 8006d22:	b083      	sub	sp, #12
 8006d24:	af00      	add	r7, sp, #0
 8006d26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006d28:	bf00      	nop
 8006d2a:	370c      	adds	r7, #12
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d32:	4770      	bx	lr

08006d34 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b082      	sub	sp, #8
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d101      	bne.n	8006d5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e040      	b.n	8006ddc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8006d5e:	2b00      	cmp	r3, #0
 8006d60:	d106      	bne.n	8006d70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	2200      	movs	r2, #0
 8006d66:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f7fc fa3a 	bl	80031e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	2224      	movs	r2, #36	; 0x24
 8006d74:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681a      	ldr	r2, [r3, #0]
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	f022 0201 	bic.w	r2, r2, #1
 8006d84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006d86:	6878      	ldr	r0, [r7, #4]
 8006d88:	f000 fb16 	bl	80073b8 <UART_SetConfig>
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d101      	bne.n	8006d96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e022      	b.n	8006ddc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d002      	beq.n	8006da4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8006d9e:	6878      	ldr	r0, [r7, #4]
 8006da0:	f000 fd6e 	bl	8007880 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	685a      	ldr	r2, [r3, #4]
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006db2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	689a      	ldr	r2, [r3, #8]
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006dc2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	f042 0201 	orr.w	r2, r2, #1
 8006dd2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fdf5 	bl	80079c4 <UART_CheckIdleState>
 8006dda:	4603      	mov	r3, r0
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3708      	adds	r7, #8
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}

08006de4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006de4:	b580      	push	{r7, lr}
 8006de6:	b0ba      	sub	sp, #232	; 0xe8
 8006de8:	af00      	add	r7, sp, #0
 8006dea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	69db      	ldr	r3, [r3, #28]
 8006df2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	689b      	ldr	r3, [r3, #8]
 8006e06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8006e0a:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8006e0e:	f640 030f 	movw	r3, #2063	; 0x80f
 8006e12:	4013      	ands	r3, r2
 8006e14:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8006e18:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	d115      	bne.n	8006e4c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8006e20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e24:	f003 0320 	and.w	r3, r3, #32
 8006e28:	2b00      	cmp	r3, #0
 8006e2a:	d00f      	beq.n	8006e4c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e30:	f003 0320 	and.w	r3, r3, #32
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d009      	beq.n	8006e4c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	f000 828f 	beq.w	8007360 <HAL_UART_IRQHandler+0x57c>
      {
        huart->RxISR(huart);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006e46:	6878      	ldr	r0, [r7, #4]
 8006e48:	4798      	blx	r3
      }
      return;
 8006e4a:	e289      	b.n	8007360 <HAL_UART_IRQHandler+0x57c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8006e4c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	f000 8117 	beq.w	8007084 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8006e56:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006e5a:	f003 0301 	and.w	r3, r3, #1
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d106      	bne.n	8006e70 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8006e62:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8006e66:	4b85      	ldr	r3, [pc, #532]	; (800707c <HAL_UART_IRQHandler+0x298>)
 8006e68:	4013      	ands	r3, r2
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	f000 810a 	beq.w	8007084 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8006e70:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006e74:	f003 0301 	and.w	r3, r3, #1
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d011      	beq.n	8006ea0 <HAL_UART_IRQHandler+0xbc>
 8006e7c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006e80:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006e84:	2b00      	cmp	r3, #0
 8006e86:	d00b      	beq.n	8006ea0 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	2201      	movs	r2, #1
 8006e8e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006e96:	f043 0201 	orr.w	r2, r3, #1
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ea4:	f003 0302 	and.w	r3, r3, #2
 8006ea8:	2b00      	cmp	r3, #0
 8006eaa:	d011      	beq.n	8006ed0 <HAL_UART_IRQHandler+0xec>
 8006eac:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006eb0:	f003 0301 	and.w	r3, r3, #1
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	d00b      	beq.n	8006ed0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	2202      	movs	r2, #2
 8006ebe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006ec0:	687b      	ldr	r3, [r7, #4]
 8006ec2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ec6:	f043 0204 	orr.w	r2, r3, #4
 8006eca:	687b      	ldr	r3, [r7, #4]
 8006ecc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8006ed0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ed4:	f003 0304 	and.w	r3, r3, #4
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d011      	beq.n	8006f00 <HAL_UART_IRQHandler+0x11c>
 8006edc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ee0:	f003 0301 	and.w	r3, r3, #1
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	d00b      	beq.n	8006f00 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8006ee8:	687b      	ldr	r3, [r7, #4]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2204      	movs	r2, #4
 8006eee:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006ef6:	f043 0202 	orr.w	r2, r3, #2
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8006f00:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f04:	f003 0308 	and.w	r3, r3, #8
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d017      	beq.n	8006f3c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f10:	f003 0320 	and.w	r3, r3, #32
 8006f14:	2b00      	cmp	r3, #0
 8006f16:	d105      	bne.n	8006f24 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8006f18:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006f1c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d00b      	beq.n	8006f3c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	2208      	movs	r2, #8
 8006f2a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f32:	f043 0208 	orr.w	r2, r3, #8
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8006f3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d012      	beq.n	8006f6e <HAL_UART_IRQHandler+0x18a>
 8006f48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f4c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d00c      	beq.n	8006f6e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f5c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f64:	f043 0220 	orr.w	r2, r3, #32
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	f000 81f5 	beq.w	8007364 <HAL_UART_IRQHandler+0x580>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8006f7a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f7e:	f003 0320 	and.w	r3, r3, #32
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d00d      	beq.n	8006fa2 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8006f86:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f8a:	f003 0320 	and.w	r3, r3, #32
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d007      	beq.n	8006fa2 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d003      	beq.n	8006fa2 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f9e:	6878      	ldr	r0, [r7, #4]
 8006fa0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8006fa8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	689b      	ldr	r3, [r3, #8]
 8006fb2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fb6:	2b40      	cmp	r3, #64	; 0x40
 8006fb8:	d005      	beq.n	8006fc6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8006fba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006fbe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d04f      	beq.n	8007066 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fdf3 	bl	8007bb2 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	681b      	ldr	r3, [r3, #0]
 8006fd0:	689b      	ldr	r3, [r3, #8]
 8006fd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006fd6:	2b40      	cmp	r3, #64	; 0x40
 8006fd8:	d141      	bne.n	800705e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3308      	adds	r3, #8
 8006fe0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fe4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006fe8:	e853 3f00 	ldrex	r3, [r3]
 8006fec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006ff0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006ff4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ff8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006ffc:	687b      	ldr	r3, [r7, #4]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	3308      	adds	r3, #8
 8007002:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007006:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800700a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800700e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007012:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007016:	e841 2300 	strex	r3, r2, [r1]
 800701a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800701e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1d9      	bne.n	8006fda <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800702a:	2b00      	cmp	r3, #0
 800702c:	d013      	beq.n	8007056 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007032:	4a13      	ldr	r2, [pc, #76]	; (8007080 <HAL_UART_IRQHandler+0x29c>)
 8007034:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800703a:	4618      	mov	r0, r3
 800703c:	f7fd fac5 	bl	80045ca <HAL_DMA_Abort_IT>
 8007040:	4603      	mov	r3, r0
 8007042:	2b00      	cmp	r3, #0
 8007044:	d017      	beq.n	8007076 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800704a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800704c:	687a      	ldr	r2, [r7, #4]
 800704e:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8007050:	4610      	mov	r0, r2
 8007052:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007054:	e00f      	b.n	8007076 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f000 f998 	bl	800738c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800705c:	e00b      	b.n	8007076 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 f994 	bl	800738c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007064:	e007      	b.n	8007076 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f000 f990 	bl	800738c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2200      	movs	r2, #0
 8007070:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8007074:	e176      	b.n	8007364 <HAL_UART_IRQHandler+0x580>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007076:	bf00      	nop
    return;
 8007078:	e174      	b.n	8007364 <HAL_UART_IRQHandler+0x580>
 800707a:	bf00      	nop
 800707c:	04000120 	.word	0x04000120
 8007080:	08007c79 	.word	0x08007c79

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007088:	2b01      	cmp	r3, #1
 800708a:	f040 8144 	bne.w	8007316 <HAL_UART_IRQHandler+0x532>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800708e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007092:	f003 0310 	and.w	r3, r3, #16
 8007096:	2b00      	cmp	r3, #0
 8007098:	f000 813d 	beq.w	8007316 <HAL_UART_IRQHandler+0x532>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800709c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80070a0:	f003 0310 	and.w	r3, r3, #16
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	f000 8136 	beq.w	8007316 <HAL_UART_IRQHandler+0x532>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80070aa:	687b      	ldr	r3, [r7, #4]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	2210      	movs	r2, #16
 80070b0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	689b      	ldr	r3, [r3, #8]
 80070b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070bc:	2b40      	cmp	r3, #64	; 0x40
 80070be:	f040 80b2 	bne.w	8007226 <HAL_UART_IRQHandler+0x442>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	685b      	ldr	r3, [r3, #4]
 80070ca:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80070ce:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	f000 8148 	beq.w	8007368 <HAL_UART_IRQHandler+0x584>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80070de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070e2:	429a      	cmp	r2, r3
 80070e4:	f080 8140 	bcs.w	8007368 <HAL_UART_IRQHandler+0x584>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80070ee:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80070f6:	69db      	ldr	r3, [r3, #28]
 80070f8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80070fc:	f000 8085 	beq.w	800720a <HAL_UART_IRQHandler+0x426>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007108:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800710c:	e853 3f00 	ldrex	r3, [r3]
 8007110:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007114:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007118:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800711c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007120:	687b      	ldr	r3, [r7, #4]
 8007122:	681b      	ldr	r3, [r3, #0]
 8007124:	461a      	mov	r2, r3
 8007126:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800712a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800712e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007132:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007136:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800713a:	e841 2300 	strex	r3, r2, [r1]
 800713e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007142:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007146:	2b00      	cmp	r3, #0
 8007148:	d1da      	bne.n	8007100 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	3308      	adds	r3, #8
 8007150:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007152:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007154:	e853 3f00 	ldrex	r3, [r3]
 8007158:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800715a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800715c:	f023 0301 	bic.w	r3, r3, #1
 8007160:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	3308      	adds	r3, #8
 800716a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800716e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007172:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007174:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007176:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800717a:	e841 2300 	strex	r3, r2, [r1]
 800717e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007180:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007182:	2b00      	cmp	r3, #0
 8007184:	d1e1      	bne.n	800714a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	681b      	ldr	r3, [r3, #0]
 800718a:	3308      	adds	r3, #8
 800718c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800718e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007190:	e853 3f00 	ldrex	r3, [r3]
 8007194:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007196:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007198:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800719c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	3308      	adds	r3, #8
 80071a6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80071aa:	66fa      	str	r2, [r7, #108]	; 0x6c
 80071ac:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ae:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80071b0:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80071b2:	e841 2300 	strex	r3, r2, [r1]
 80071b6:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80071b8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d1e3      	bne.n	8007186 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	2220      	movs	r2, #32
 80071c2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2200      	movs	r2, #0
 80071c8:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	681b      	ldr	r3, [r3, #0]
 80071ce:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071d0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80071d2:	e853 3f00 	ldrex	r3, [r3]
 80071d6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80071d8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80071da:	f023 0310 	bic.w	r3, r3, #16
 80071de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	461a      	mov	r2, r3
 80071e8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80071ec:	65bb      	str	r3, [r7, #88]	; 0x58
 80071ee:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80071f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80071f4:	e841 2300 	strex	r3, r2, [r1]
 80071f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80071fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1e4      	bne.n	80071ca <HAL_UART_IRQHandler+0x3e6>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007204:	4618      	mov	r0, r3
 8007206:	f7fd f970 	bl	80044ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007216:	b29b      	uxth	r3, r3
 8007218:	1ad3      	subs	r3, r2, r3
 800721a:	b29b      	uxth	r3, r3
 800721c:	4619      	mov	r1, r3
 800721e:	6878      	ldr	r0, [r7, #4]
 8007220:	f000 f8be 	bl	80073a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007224:	e0a0      	b.n	8007368 <HAL_UART_IRQHandler+0x584>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007232:	b29b      	uxth	r3, r3
 8007234:	1ad3      	subs	r3, r2, r3
 8007236:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8007240:	b29b      	uxth	r3, r3
 8007242:	2b00      	cmp	r3, #0
 8007244:	f000 8092 	beq.w	800736c <HAL_UART_IRQHandler+0x588>
          && (nb_rx_data > 0U))
 8007248:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800724c:	2b00      	cmp	r3, #0
 800724e:	f000 808d 	beq.w	800736c <HAL_UART_IRQHandler+0x588>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007252:	687b      	ldr	r3, [r7, #4]
 8007254:	681b      	ldr	r3, [r3, #0]
 8007256:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007258:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800725a:	e853 3f00 	ldrex	r3, [r3]
 800725e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007262:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007266:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	461a      	mov	r2, r3
 8007270:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007274:	647b      	str	r3, [r7, #68]	; 0x44
 8007276:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007278:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800727a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800727c:	e841 2300 	strex	r3, r2, [r1]
 8007280:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007282:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007284:	2b00      	cmp	r3, #0
 8007286:	d1e4      	bne.n	8007252 <HAL_UART_IRQHandler+0x46e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	681b      	ldr	r3, [r3, #0]
 800728c:	3308      	adds	r3, #8
 800728e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007290:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007292:	e853 3f00 	ldrex	r3, [r3]
 8007296:	623b      	str	r3, [r7, #32]
   return(result);
 8007298:	6a3b      	ldr	r3, [r7, #32]
 800729a:	f023 0301 	bic.w	r3, r3, #1
 800729e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	3308      	adds	r3, #8
 80072a8:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80072ac:	633a      	str	r2, [r7, #48]	; 0x30
 80072ae:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072b2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072b4:	e841 2300 	strex	r3, r2, [r1]
 80072b8:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072bc:	2b00      	cmp	r3, #0
 80072be:	d1e3      	bne.n	8007288 <HAL_UART_IRQHandler+0x4a4>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	2220      	movs	r2, #32
 80072c4:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	2200      	movs	r2, #0
 80072ca:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	2200      	movs	r2, #0
 80072d0:	665a      	str	r2, [r3, #100]	; 0x64

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072d8:	693b      	ldr	r3, [r7, #16]
 80072da:	e853 3f00 	ldrex	r3, [r3]
 80072de:	60fb      	str	r3, [r7, #12]
   return(result);
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f023 0310 	bic.w	r3, r3, #16
 80072e6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	461a      	mov	r2, r3
 80072f0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80072f4:	61fb      	str	r3, [r7, #28]
 80072f6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072f8:	69b9      	ldr	r1, [r7, #24]
 80072fa:	69fa      	ldr	r2, [r7, #28]
 80072fc:	e841 2300 	strex	r3, r2, [r1]
 8007300:	617b      	str	r3, [r7, #20]
   return(result);
 8007302:	697b      	ldr	r3, [r7, #20]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d1e4      	bne.n	80072d2 <HAL_UART_IRQHandler+0x4ee>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007308:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800730c:	4619      	mov	r1, r3
 800730e:	6878      	ldr	r0, [r7, #4]
 8007310:	f000 f846 	bl	80073a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007314:	e02a      	b.n	800736c <HAL_UART_IRQHandler+0x588>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8007316:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800731a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800731e:	2b00      	cmp	r3, #0
 8007320:	d00e      	beq.n	8007340 <HAL_UART_IRQHandler+0x55c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8007322:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800732a:	2b00      	cmp	r3, #0
 800732c:	d008      	beq.n	8007340 <HAL_UART_IRQHandler+0x55c>
  {
    if (huart->TxISR != NULL)
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8007332:	2b00      	cmp	r3, #0
 8007334:	d01c      	beq.n	8007370 <HAL_UART_IRQHandler+0x58c>
    {
      huart->TxISR(huart);
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	4798      	blx	r3
    }
    return;
 800733e:	e017      	b.n	8007370 <HAL_UART_IRQHandler+0x58c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007340:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007344:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007348:	2b00      	cmp	r3, #0
 800734a:	d012      	beq.n	8007372 <HAL_UART_IRQHandler+0x58e>
 800734c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007350:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007354:	2b00      	cmp	r3, #0
 8007356:	d00c      	beq.n	8007372 <HAL_UART_IRQHandler+0x58e>
  {
    UART_EndTransmit_IT(huart);
 8007358:	6878      	ldr	r0, [r7, #4]
 800735a:	f000 fca3 	bl	8007ca4 <UART_EndTransmit_IT>
    return;
 800735e:	e008      	b.n	8007372 <HAL_UART_IRQHandler+0x58e>
      return;
 8007360:	bf00      	nop
 8007362:	e006      	b.n	8007372 <HAL_UART_IRQHandler+0x58e>
    return;
 8007364:	bf00      	nop
 8007366:	e004      	b.n	8007372 <HAL_UART_IRQHandler+0x58e>
      return;
 8007368:	bf00      	nop
 800736a:	e002      	b.n	8007372 <HAL_UART_IRQHandler+0x58e>
      return;
 800736c:	bf00      	nop
 800736e:	e000      	b.n	8007372 <HAL_UART_IRQHandler+0x58e>
    return;
 8007370:	bf00      	nop
  }

}
 8007372:	37e8      	adds	r7, #232	; 0xe8
 8007374:	46bd      	mov	sp, r7
 8007376:	bd80      	pop	{r7, pc}

08007378 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007378:	b480      	push	{r7}
 800737a:	b083      	sub	sp, #12
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007380:	bf00      	nop
 8007382:	370c      	adds	r7, #12
 8007384:	46bd      	mov	sp, r7
 8007386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800738a:	4770      	bx	lr

0800738c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800738c:	b480      	push	{r7}
 800738e:	b083      	sub	sp, #12
 8007390:	af00      	add	r7, sp, #0
 8007392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007394:	bf00      	nop
 8007396:	370c      	adds	r7, #12
 8007398:	46bd      	mov	sp, r7
 800739a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800739e:	4770      	bx	lr

080073a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80073a0:	b480      	push	{r7}
 80073a2:	b083      	sub	sp, #12
 80073a4:	af00      	add	r7, sp, #0
 80073a6:	6078      	str	r0, [r7, #4]
 80073a8:	460b      	mov	r3, r1
 80073aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80073ac:	bf00      	nop
 80073ae:	370c      	adds	r7, #12
 80073b0:	46bd      	mov	sp, r7
 80073b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b6:	4770      	bx	lr

080073b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b088      	sub	sp, #32
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80073c0:	2300      	movs	r3, #0
 80073c2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	689a      	ldr	r2, [r3, #8]
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	691b      	ldr	r3, [r3, #16]
 80073cc:	431a      	orrs	r2, r3
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	695b      	ldr	r3, [r3, #20]
 80073d2:	431a      	orrs	r2, r3
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	69db      	ldr	r3, [r3, #28]
 80073d8:	4313      	orrs	r3, r2
 80073da:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	681a      	ldr	r2, [r3, #0]
 80073e2:	4ba6      	ldr	r3, [pc, #664]	; (800767c <UART_SetConfig+0x2c4>)
 80073e4:	4013      	ands	r3, r2
 80073e6:	687a      	ldr	r2, [r7, #4]
 80073e8:	6812      	ldr	r2, [r2, #0]
 80073ea:	6979      	ldr	r1, [r7, #20]
 80073ec:	430b      	orrs	r3, r1
 80073ee:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	685b      	ldr	r3, [r3, #4]
 80073f6:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	68da      	ldr	r2, [r3, #12]
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	681b      	ldr	r3, [r3, #0]
 8007402:	430a      	orrs	r2, r1
 8007404:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	699b      	ldr	r3, [r3, #24]
 800740a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	6a1b      	ldr	r3, [r3, #32]
 8007410:	697a      	ldr	r2, [r7, #20]
 8007412:	4313      	orrs	r3, r2
 8007414:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	681b      	ldr	r3, [r3, #0]
 800741a:	689b      	ldr	r3, [r3, #8]
 800741c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	697a      	ldr	r2, [r7, #20]
 8007426:	430a      	orrs	r2, r1
 8007428:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	4a94      	ldr	r2, [pc, #592]	; (8007680 <UART_SetConfig+0x2c8>)
 8007430:	4293      	cmp	r3, r2
 8007432:	d120      	bne.n	8007476 <UART_SetConfig+0xbe>
 8007434:	4b93      	ldr	r3, [pc, #588]	; (8007684 <UART_SetConfig+0x2cc>)
 8007436:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800743a:	f003 0303 	and.w	r3, r3, #3
 800743e:	2b03      	cmp	r3, #3
 8007440:	d816      	bhi.n	8007470 <UART_SetConfig+0xb8>
 8007442:	a201      	add	r2, pc, #4	; (adr r2, 8007448 <UART_SetConfig+0x90>)
 8007444:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007448:	08007459 	.word	0x08007459
 800744c:	08007465 	.word	0x08007465
 8007450:	0800745f 	.word	0x0800745f
 8007454:	0800746b 	.word	0x0800746b
 8007458:	2301      	movs	r3, #1
 800745a:	77fb      	strb	r3, [r7, #31]
 800745c:	e150      	b.n	8007700 <UART_SetConfig+0x348>
 800745e:	2302      	movs	r3, #2
 8007460:	77fb      	strb	r3, [r7, #31]
 8007462:	e14d      	b.n	8007700 <UART_SetConfig+0x348>
 8007464:	2304      	movs	r3, #4
 8007466:	77fb      	strb	r3, [r7, #31]
 8007468:	e14a      	b.n	8007700 <UART_SetConfig+0x348>
 800746a:	2308      	movs	r3, #8
 800746c:	77fb      	strb	r3, [r7, #31]
 800746e:	e147      	b.n	8007700 <UART_SetConfig+0x348>
 8007470:	2310      	movs	r3, #16
 8007472:	77fb      	strb	r3, [r7, #31]
 8007474:	e144      	b.n	8007700 <UART_SetConfig+0x348>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a83      	ldr	r2, [pc, #524]	; (8007688 <UART_SetConfig+0x2d0>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d132      	bne.n	80074e6 <UART_SetConfig+0x12e>
 8007480:	4b80      	ldr	r3, [pc, #512]	; (8007684 <UART_SetConfig+0x2cc>)
 8007482:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007486:	f003 030c 	and.w	r3, r3, #12
 800748a:	2b0c      	cmp	r3, #12
 800748c:	d828      	bhi.n	80074e0 <UART_SetConfig+0x128>
 800748e:	a201      	add	r2, pc, #4	; (adr r2, 8007494 <UART_SetConfig+0xdc>)
 8007490:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007494:	080074c9 	.word	0x080074c9
 8007498:	080074e1 	.word	0x080074e1
 800749c:	080074e1 	.word	0x080074e1
 80074a0:	080074e1 	.word	0x080074e1
 80074a4:	080074d5 	.word	0x080074d5
 80074a8:	080074e1 	.word	0x080074e1
 80074ac:	080074e1 	.word	0x080074e1
 80074b0:	080074e1 	.word	0x080074e1
 80074b4:	080074cf 	.word	0x080074cf
 80074b8:	080074e1 	.word	0x080074e1
 80074bc:	080074e1 	.word	0x080074e1
 80074c0:	080074e1 	.word	0x080074e1
 80074c4:	080074db 	.word	0x080074db
 80074c8:	2300      	movs	r3, #0
 80074ca:	77fb      	strb	r3, [r7, #31]
 80074cc:	e118      	b.n	8007700 <UART_SetConfig+0x348>
 80074ce:	2302      	movs	r3, #2
 80074d0:	77fb      	strb	r3, [r7, #31]
 80074d2:	e115      	b.n	8007700 <UART_SetConfig+0x348>
 80074d4:	2304      	movs	r3, #4
 80074d6:	77fb      	strb	r3, [r7, #31]
 80074d8:	e112      	b.n	8007700 <UART_SetConfig+0x348>
 80074da:	2308      	movs	r3, #8
 80074dc:	77fb      	strb	r3, [r7, #31]
 80074de:	e10f      	b.n	8007700 <UART_SetConfig+0x348>
 80074e0:	2310      	movs	r3, #16
 80074e2:	77fb      	strb	r3, [r7, #31]
 80074e4:	e10c      	b.n	8007700 <UART_SetConfig+0x348>
 80074e6:	687b      	ldr	r3, [r7, #4]
 80074e8:	681b      	ldr	r3, [r3, #0]
 80074ea:	4a68      	ldr	r2, [pc, #416]	; (800768c <UART_SetConfig+0x2d4>)
 80074ec:	4293      	cmp	r3, r2
 80074ee:	d120      	bne.n	8007532 <UART_SetConfig+0x17a>
 80074f0:	4b64      	ldr	r3, [pc, #400]	; (8007684 <UART_SetConfig+0x2cc>)
 80074f2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80074f6:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80074fa:	2b30      	cmp	r3, #48	; 0x30
 80074fc:	d013      	beq.n	8007526 <UART_SetConfig+0x16e>
 80074fe:	2b30      	cmp	r3, #48	; 0x30
 8007500:	d814      	bhi.n	800752c <UART_SetConfig+0x174>
 8007502:	2b20      	cmp	r3, #32
 8007504:	d009      	beq.n	800751a <UART_SetConfig+0x162>
 8007506:	2b20      	cmp	r3, #32
 8007508:	d810      	bhi.n	800752c <UART_SetConfig+0x174>
 800750a:	2b00      	cmp	r3, #0
 800750c:	d002      	beq.n	8007514 <UART_SetConfig+0x15c>
 800750e:	2b10      	cmp	r3, #16
 8007510:	d006      	beq.n	8007520 <UART_SetConfig+0x168>
 8007512:	e00b      	b.n	800752c <UART_SetConfig+0x174>
 8007514:	2300      	movs	r3, #0
 8007516:	77fb      	strb	r3, [r7, #31]
 8007518:	e0f2      	b.n	8007700 <UART_SetConfig+0x348>
 800751a:	2302      	movs	r3, #2
 800751c:	77fb      	strb	r3, [r7, #31]
 800751e:	e0ef      	b.n	8007700 <UART_SetConfig+0x348>
 8007520:	2304      	movs	r3, #4
 8007522:	77fb      	strb	r3, [r7, #31]
 8007524:	e0ec      	b.n	8007700 <UART_SetConfig+0x348>
 8007526:	2308      	movs	r3, #8
 8007528:	77fb      	strb	r3, [r7, #31]
 800752a:	e0e9      	b.n	8007700 <UART_SetConfig+0x348>
 800752c:	2310      	movs	r3, #16
 800752e:	77fb      	strb	r3, [r7, #31]
 8007530:	e0e6      	b.n	8007700 <UART_SetConfig+0x348>
 8007532:	687b      	ldr	r3, [r7, #4]
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4a56      	ldr	r2, [pc, #344]	; (8007690 <UART_SetConfig+0x2d8>)
 8007538:	4293      	cmp	r3, r2
 800753a:	d120      	bne.n	800757e <UART_SetConfig+0x1c6>
 800753c:	4b51      	ldr	r3, [pc, #324]	; (8007684 <UART_SetConfig+0x2cc>)
 800753e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8007542:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8007546:	2bc0      	cmp	r3, #192	; 0xc0
 8007548:	d013      	beq.n	8007572 <UART_SetConfig+0x1ba>
 800754a:	2bc0      	cmp	r3, #192	; 0xc0
 800754c:	d814      	bhi.n	8007578 <UART_SetConfig+0x1c0>
 800754e:	2b80      	cmp	r3, #128	; 0x80
 8007550:	d009      	beq.n	8007566 <UART_SetConfig+0x1ae>
 8007552:	2b80      	cmp	r3, #128	; 0x80
 8007554:	d810      	bhi.n	8007578 <UART_SetConfig+0x1c0>
 8007556:	2b00      	cmp	r3, #0
 8007558:	d002      	beq.n	8007560 <UART_SetConfig+0x1a8>
 800755a:	2b40      	cmp	r3, #64	; 0x40
 800755c:	d006      	beq.n	800756c <UART_SetConfig+0x1b4>
 800755e:	e00b      	b.n	8007578 <UART_SetConfig+0x1c0>
 8007560:	2300      	movs	r3, #0
 8007562:	77fb      	strb	r3, [r7, #31]
 8007564:	e0cc      	b.n	8007700 <UART_SetConfig+0x348>
 8007566:	2302      	movs	r3, #2
 8007568:	77fb      	strb	r3, [r7, #31]
 800756a:	e0c9      	b.n	8007700 <UART_SetConfig+0x348>
 800756c:	2304      	movs	r3, #4
 800756e:	77fb      	strb	r3, [r7, #31]
 8007570:	e0c6      	b.n	8007700 <UART_SetConfig+0x348>
 8007572:	2308      	movs	r3, #8
 8007574:	77fb      	strb	r3, [r7, #31]
 8007576:	e0c3      	b.n	8007700 <UART_SetConfig+0x348>
 8007578:	2310      	movs	r3, #16
 800757a:	77fb      	strb	r3, [r7, #31]
 800757c:	e0c0      	b.n	8007700 <UART_SetConfig+0x348>
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	681b      	ldr	r3, [r3, #0]
 8007582:	4a44      	ldr	r2, [pc, #272]	; (8007694 <UART_SetConfig+0x2dc>)
 8007584:	4293      	cmp	r3, r2
 8007586:	d125      	bne.n	80075d4 <UART_SetConfig+0x21c>
 8007588:	4b3e      	ldr	r3, [pc, #248]	; (8007684 <UART_SetConfig+0x2cc>)
 800758a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800758e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007592:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8007596:	d017      	beq.n	80075c8 <UART_SetConfig+0x210>
 8007598:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800759c:	d817      	bhi.n	80075ce <UART_SetConfig+0x216>
 800759e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075a2:	d00b      	beq.n	80075bc <UART_SetConfig+0x204>
 80075a4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80075a8:	d811      	bhi.n	80075ce <UART_SetConfig+0x216>
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d003      	beq.n	80075b6 <UART_SetConfig+0x1fe>
 80075ae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80075b2:	d006      	beq.n	80075c2 <UART_SetConfig+0x20a>
 80075b4:	e00b      	b.n	80075ce <UART_SetConfig+0x216>
 80075b6:	2300      	movs	r3, #0
 80075b8:	77fb      	strb	r3, [r7, #31]
 80075ba:	e0a1      	b.n	8007700 <UART_SetConfig+0x348>
 80075bc:	2302      	movs	r3, #2
 80075be:	77fb      	strb	r3, [r7, #31]
 80075c0:	e09e      	b.n	8007700 <UART_SetConfig+0x348>
 80075c2:	2304      	movs	r3, #4
 80075c4:	77fb      	strb	r3, [r7, #31]
 80075c6:	e09b      	b.n	8007700 <UART_SetConfig+0x348>
 80075c8:	2308      	movs	r3, #8
 80075ca:	77fb      	strb	r3, [r7, #31]
 80075cc:	e098      	b.n	8007700 <UART_SetConfig+0x348>
 80075ce:	2310      	movs	r3, #16
 80075d0:	77fb      	strb	r3, [r7, #31]
 80075d2:	e095      	b.n	8007700 <UART_SetConfig+0x348>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a2f      	ldr	r2, [pc, #188]	; (8007698 <UART_SetConfig+0x2e0>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d125      	bne.n	800762a <UART_SetConfig+0x272>
 80075de:	4b29      	ldr	r3, [pc, #164]	; (8007684 <UART_SetConfig+0x2cc>)
 80075e0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80075e4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80075e8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075ec:	d017      	beq.n	800761e <UART_SetConfig+0x266>
 80075ee:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80075f2:	d817      	bhi.n	8007624 <UART_SetConfig+0x26c>
 80075f4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075f8:	d00b      	beq.n	8007612 <UART_SetConfig+0x25a>
 80075fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80075fe:	d811      	bhi.n	8007624 <UART_SetConfig+0x26c>
 8007600:	2b00      	cmp	r3, #0
 8007602:	d003      	beq.n	800760c <UART_SetConfig+0x254>
 8007604:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007608:	d006      	beq.n	8007618 <UART_SetConfig+0x260>
 800760a:	e00b      	b.n	8007624 <UART_SetConfig+0x26c>
 800760c:	2301      	movs	r3, #1
 800760e:	77fb      	strb	r3, [r7, #31]
 8007610:	e076      	b.n	8007700 <UART_SetConfig+0x348>
 8007612:	2302      	movs	r3, #2
 8007614:	77fb      	strb	r3, [r7, #31]
 8007616:	e073      	b.n	8007700 <UART_SetConfig+0x348>
 8007618:	2304      	movs	r3, #4
 800761a:	77fb      	strb	r3, [r7, #31]
 800761c:	e070      	b.n	8007700 <UART_SetConfig+0x348>
 800761e:	2308      	movs	r3, #8
 8007620:	77fb      	strb	r3, [r7, #31]
 8007622:	e06d      	b.n	8007700 <UART_SetConfig+0x348>
 8007624:	2310      	movs	r3, #16
 8007626:	77fb      	strb	r3, [r7, #31]
 8007628:	e06a      	b.n	8007700 <UART_SetConfig+0x348>
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	4a1b      	ldr	r2, [pc, #108]	; (800769c <UART_SetConfig+0x2e4>)
 8007630:	4293      	cmp	r3, r2
 8007632:	d138      	bne.n	80076a6 <UART_SetConfig+0x2ee>
 8007634:	4b13      	ldr	r3, [pc, #76]	; (8007684 <UART_SetConfig+0x2cc>)
 8007636:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800763a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800763e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007642:	d017      	beq.n	8007674 <UART_SetConfig+0x2bc>
 8007644:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8007648:	d82a      	bhi.n	80076a0 <UART_SetConfig+0x2e8>
 800764a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800764e:	d00b      	beq.n	8007668 <UART_SetConfig+0x2b0>
 8007650:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007654:	d824      	bhi.n	80076a0 <UART_SetConfig+0x2e8>
 8007656:	2b00      	cmp	r3, #0
 8007658:	d003      	beq.n	8007662 <UART_SetConfig+0x2aa>
 800765a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800765e:	d006      	beq.n	800766e <UART_SetConfig+0x2b6>
 8007660:	e01e      	b.n	80076a0 <UART_SetConfig+0x2e8>
 8007662:	2300      	movs	r3, #0
 8007664:	77fb      	strb	r3, [r7, #31]
 8007666:	e04b      	b.n	8007700 <UART_SetConfig+0x348>
 8007668:	2302      	movs	r3, #2
 800766a:	77fb      	strb	r3, [r7, #31]
 800766c:	e048      	b.n	8007700 <UART_SetConfig+0x348>
 800766e:	2304      	movs	r3, #4
 8007670:	77fb      	strb	r3, [r7, #31]
 8007672:	e045      	b.n	8007700 <UART_SetConfig+0x348>
 8007674:	2308      	movs	r3, #8
 8007676:	77fb      	strb	r3, [r7, #31]
 8007678:	e042      	b.n	8007700 <UART_SetConfig+0x348>
 800767a:	bf00      	nop
 800767c:	efff69f3 	.word	0xefff69f3
 8007680:	40011000 	.word	0x40011000
 8007684:	40023800 	.word	0x40023800
 8007688:	40004400 	.word	0x40004400
 800768c:	40004800 	.word	0x40004800
 8007690:	40004c00 	.word	0x40004c00
 8007694:	40005000 	.word	0x40005000
 8007698:	40011400 	.word	0x40011400
 800769c:	40007800 	.word	0x40007800
 80076a0:	2310      	movs	r3, #16
 80076a2:	77fb      	strb	r3, [r7, #31]
 80076a4:	e02c      	b.n	8007700 <UART_SetConfig+0x348>
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	4a72      	ldr	r2, [pc, #456]	; (8007874 <UART_SetConfig+0x4bc>)
 80076ac:	4293      	cmp	r3, r2
 80076ae:	d125      	bne.n	80076fc <UART_SetConfig+0x344>
 80076b0:	4b71      	ldr	r3, [pc, #452]	; (8007878 <UART_SetConfig+0x4c0>)
 80076b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80076b6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80076ba:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80076be:	d017      	beq.n	80076f0 <UART_SetConfig+0x338>
 80076c0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80076c4:	d817      	bhi.n	80076f6 <UART_SetConfig+0x33e>
 80076c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076ca:	d00b      	beq.n	80076e4 <UART_SetConfig+0x32c>
 80076cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80076d0:	d811      	bhi.n	80076f6 <UART_SetConfig+0x33e>
 80076d2:	2b00      	cmp	r3, #0
 80076d4:	d003      	beq.n	80076de <UART_SetConfig+0x326>
 80076d6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80076da:	d006      	beq.n	80076ea <UART_SetConfig+0x332>
 80076dc:	e00b      	b.n	80076f6 <UART_SetConfig+0x33e>
 80076de:	2300      	movs	r3, #0
 80076e0:	77fb      	strb	r3, [r7, #31]
 80076e2:	e00d      	b.n	8007700 <UART_SetConfig+0x348>
 80076e4:	2302      	movs	r3, #2
 80076e6:	77fb      	strb	r3, [r7, #31]
 80076e8:	e00a      	b.n	8007700 <UART_SetConfig+0x348>
 80076ea:	2304      	movs	r3, #4
 80076ec:	77fb      	strb	r3, [r7, #31]
 80076ee:	e007      	b.n	8007700 <UART_SetConfig+0x348>
 80076f0:	2308      	movs	r3, #8
 80076f2:	77fb      	strb	r3, [r7, #31]
 80076f4:	e004      	b.n	8007700 <UART_SetConfig+0x348>
 80076f6:	2310      	movs	r3, #16
 80076f8:	77fb      	strb	r3, [r7, #31]
 80076fa:	e001      	b.n	8007700 <UART_SetConfig+0x348>
 80076fc:	2310      	movs	r3, #16
 80076fe:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	69db      	ldr	r3, [r3, #28]
 8007704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007708:	d15b      	bne.n	80077c2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800770a:	7ffb      	ldrb	r3, [r7, #31]
 800770c:	2b08      	cmp	r3, #8
 800770e:	d828      	bhi.n	8007762 <UART_SetConfig+0x3aa>
 8007710:	a201      	add	r2, pc, #4	; (adr r2, 8007718 <UART_SetConfig+0x360>)
 8007712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007716:	bf00      	nop
 8007718:	0800773d 	.word	0x0800773d
 800771c:	08007745 	.word	0x08007745
 8007720:	0800774d 	.word	0x0800774d
 8007724:	08007763 	.word	0x08007763
 8007728:	08007753 	.word	0x08007753
 800772c:	08007763 	.word	0x08007763
 8007730:	08007763 	.word	0x08007763
 8007734:	08007763 	.word	0x08007763
 8007738:	0800775b 	.word	0x0800775b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800773c:	f7fd fe52 	bl	80053e4 <HAL_RCC_GetPCLK1Freq>
 8007740:	61b8      	str	r0, [r7, #24]
        break;
 8007742:	e013      	b.n	800776c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8007744:	f7fd fe62 	bl	800540c <HAL_RCC_GetPCLK2Freq>
 8007748:	61b8      	str	r0, [r7, #24]
        break;
 800774a:	e00f      	b.n	800776c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800774c:	4b4b      	ldr	r3, [pc, #300]	; (800787c <UART_SetConfig+0x4c4>)
 800774e:	61bb      	str	r3, [r7, #24]
        break;
 8007750:	e00c      	b.n	800776c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8007752:	f7fd fd35 	bl	80051c0 <HAL_RCC_GetSysClockFreq>
 8007756:	61b8      	str	r0, [r7, #24]
        break;
 8007758:	e008      	b.n	800776c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800775a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800775e:	61bb      	str	r3, [r7, #24]
        break;
 8007760:	e004      	b.n	800776c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 8007762:	2300      	movs	r3, #0
 8007764:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8007766:	2301      	movs	r3, #1
 8007768:	77bb      	strb	r3, [r7, #30]
        break;
 800776a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800776c:	69bb      	ldr	r3, [r7, #24]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d074      	beq.n	800785c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007772:	69bb      	ldr	r3, [r7, #24]
 8007774:	005a      	lsls	r2, r3, #1
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	685b      	ldr	r3, [r3, #4]
 800777a:	085b      	lsrs	r3, r3, #1
 800777c:	441a      	add	r2, r3
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	fbb2 f3f3 	udiv	r3, r2, r3
 8007786:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007788:	693b      	ldr	r3, [r7, #16]
 800778a:	2b0f      	cmp	r3, #15
 800778c:	d916      	bls.n	80077bc <UART_SetConfig+0x404>
 800778e:	693b      	ldr	r3, [r7, #16]
 8007790:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007794:	d212      	bcs.n	80077bc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007796:	693b      	ldr	r3, [r7, #16]
 8007798:	b29b      	uxth	r3, r3
 800779a:	f023 030f 	bic.w	r3, r3, #15
 800779e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	085b      	lsrs	r3, r3, #1
 80077a4:	b29b      	uxth	r3, r3
 80077a6:	f003 0307 	and.w	r3, r3, #7
 80077aa:	b29a      	uxth	r2, r3
 80077ac:	89fb      	ldrh	r3, [r7, #14]
 80077ae:	4313      	orrs	r3, r2
 80077b0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	89fa      	ldrh	r2, [r7, #14]
 80077b8:	60da      	str	r2, [r3, #12]
 80077ba:	e04f      	b.n	800785c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80077bc:	2301      	movs	r3, #1
 80077be:	77bb      	strb	r3, [r7, #30]
 80077c0:	e04c      	b.n	800785c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 80077c2:	7ffb      	ldrb	r3, [r7, #31]
 80077c4:	2b08      	cmp	r3, #8
 80077c6:	d828      	bhi.n	800781a <UART_SetConfig+0x462>
 80077c8:	a201      	add	r2, pc, #4	; (adr r2, 80077d0 <UART_SetConfig+0x418>)
 80077ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077ce:	bf00      	nop
 80077d0:	080077f5 	.word	0x080077f5
 80077d4:	080077fd 	.word	0x080077fd
 80077d8:	08007805 	.word	0x08007805
 80077dc:	0800781b 	.word	0x0800781b
 80077e0:	0800780b 	.word	0x0800780b
 80077e4:	0800781b 	.word	0x0800781b
 80077e8:	0800781b 	.word	0x0800781b
 80077ec:	0800781b 	.word	0x0800781b
 80077f0:	08007813 	.word	0x08007813
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80077f4:	f7fd fdf6 	bl	80053e4 <HAL_RCC_GetPCLK1Freq>
 80077f8:	61b8      	str	r0, [r7, #24]
        break;
 80077fa:	e013      	b.n	8007824 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80077fc:	f7fd fe06 	bl	800540c <HAL_RCC_GetPCLK2Freq>
 8007800:	61b8      	str	r0, [r7, #24]
        break;
 8007802:	e00f      	b.n	8007824 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8007804:	4b1d      	ldr	r3, [pc, #116]	; (800787c <UART_SetConfig+0x4c4>)
 8007806:	61bb      	str	r3, [r7, #24]
        break;
 8007808:	e00c      	b.n	8007824 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800780a:	f7fd fcd9 	bl	80051c0 <HAL_RCC_GetSysClockFreq>
 800780e:	61b8      	str	r0, [r7, #24]
        break;
 8007810:	e008      	b.n	8007824 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007812:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007816:	61bb      	str	r3, [r7, #24]
        break;
 8007818:	e004      	b.n	8007824 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800781a:	2300      	movs	r3, #0
 800781c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800781e:	2301      	movs	r3, #1
 8007820:	77bb      	strb	r3, [r7, #30]
        break;
 8007822:	bf00      	nop
    }

    if (pclk != 0U)
 8007824:	69bb      	ldr	r3, [r7, #24]
 8007826:	2b00      	cmp	r3, #0
 8007828:	d018      	beq.n	800785c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	685b      	ldr	r3, [r3, #4]
 800782e:	085a      	lsrs	r2, r3, #1
 8007830:	69bb      	ldr	r3, [r7, #24]
 8007832:	441a      	add	r2, r3
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	685b      	ldr	r3, [r3, #4]
 8007838:	fbb2 f3f3 	udiv	r3, r2, r3
 800783c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	2b0f      	cmp	r3, #15
 8007842:	d909      	bls.n	8007858 <UART_SetConfig+0x4a0>
 8007844:	693b      	ldr	r3, [r7, #16]
 8007846:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800784a:	d205      	bcs.n	8007858 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800784c:	693b      	ldr	r3, [r7, #16]
 800784e:	b29a      	uxth	r2, r3
 8007850:	687b      	ldr	r3, [r7, #4]
 8007852:	681b      	ldr	r3, [r3, #0]
 8007854:	60da      	str	r2, [r3, #12]
 8007856:	e001      	b.n	800785c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8007858:	2301      	movs	r3, #1
 800785a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	2200      	movs	r2, #0
 8007860:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2200      	movs	r2, #0
 8007866:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8007868:	7fbb      	ldrb	r3, [r7, #30]
}
 800786a:	4618      	mov	r0, r3
 800786c:	3720      	adds	r7, #32
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}
 8007872:	bf00      	nop
 8007874:	40007c00 	.word	0x40007c00
 8007878:	40023800 	.word	0x40023800
 800787c:	00f42400 	.word	0x00f42400

08007880 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007880:	b480      	push	{r7}
 8007882:	b083      	sub	sp, #12
 8007884:	af00      	add	r7, sp, #0
 8007886:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800788c:	f003 0301 	and.w	r3, r3, #1
 8007890:	2b00      	cmp	r3, #0
 8007892:	d00a      	beq.n	80078aa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	681b      	ldr	r3, [r3, #0]
 8007898:	685b      	ldr	r3, [r3, #4]
 800789a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	430a      	orrs	r2, r1
 80078a8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078ae:	f003 0302 	and.w	r3, r3, #2
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d00a      	beq.n	80078cc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	685b      	ldr	r3, [r3, #4]
 80078bc:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	430a      	orrs	r2, r1
 80078ca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078d0:	f003 0304 	and.w	r3, r3, #4
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d00a      	beq.n	80078ee <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	430a      	orrs	r2, r1
 80078ec:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078f2:	f003 0308 	and.w	r3, r3, #8
 80078f6:	2b00      	cmp	r3, #0
 80078f8:	d00a      	beq.n	8007910 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	685b      	ldr	r3, [r3, #4]
 8007900:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	430a      	orrs	r2, r1
 800790e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007914:	f003 0310 	and.w	r3, r3, #16
 8007918:	2b00      	cmp	r3, #0
 800791a:	d00a      	beq.n	8007932 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	689b      	ldr	r3, [r3, #8]
 8007922:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	430a      	orrs	r2, r1
 8007930:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007936:	f003 0320 	and.w	r3, r3, #32
 800793a:	2b00      	cmp	r3, #0
 800793c:	d00a      	beq.n	8007954 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	689b      	ldr	r3, [r3, #8]
 8007944:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	430a      	orrs	r2, r1
 8007952:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007958:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800795c:	2b00      	cmp	r3, #0
 800795e:	d01a      	beq.n	8007996 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	685b      	ldr	r3, [r3, #4]
 8007966:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	430a      	orrs	r2, r1
 8007974:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800797a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800797e:	d10a      	bne.n	8007996 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	685b      	ldr	r3, [r3, #4]
 8007986:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	430a      	orrs	r2, r1
 8007994:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800799a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800799e:	2b00      	cmp	r3, #0
 80079a0:	d00a      	beq.n	80079b8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	685b      	ldr	r3, [r3, #4]
 80079a8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	430a      	orrs	r2, r1
 80079b6:	605a      	str	r2, [r3, #4]
  }
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b086      	sub	sp, #24
 80079c8:	af02      	add	r7, sp, #8
 80079ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2200      	movs	r2, #0
 80079d0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079d4:	f7fb fdb0 	bl	8003538 <HAL_GetTick>
 80079d8:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f003 0308 	and.w	r3, r3, #8
 80079e4:	2b08      	cmp	r3, #8
 80079e6:	d10e      	bne.n	8007a06 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079e8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079ec:	9300      	str	r3, [sp, #0]
 80079ee:	68fb      	ldr	r3, [r7, #12]
 80079f0:	2200      	movs	r2, #0
 80079f2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079f6:	6878      	ldr	r0, [r7, #4]
 80079f8:	f000 f817 	bl	8007a2a <UART_WaitOnFlagUntilTimeout>
 80079fc:	4603      	mov	r3, r0
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d001      	beq.n	8007a06 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a02:	2303      	movs	r3, #3
 8007a04:	e00d      	b.n	8007a22 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	2220      	movs	r2, #32
 8007a0a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2220      	movs	r2, #32
 8007a10:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a12:	687b      	ldr	r3, [r7, #4]
 8007a14:	2200      	movs	r2, #0
 8007a16:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8007a20:	2300      	movs	r3, #0
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3710      	adds	r7, #16
 8007a26:	46bd      	mov	sp, r7
 8007a28:	bd80      	pop	{r7, pc}

08007a2a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007a2a:	b580      	push	{r7, lr}
 8007a2c:	b09c      	sub	sp, #112	; 0x70
 8007a2e:	af00      	add	r7, sp, #0
 8007a30:	60f8      	str	r0, [r7, #12]
 8007a32:	60b9      	str	r1, [r7, #8]
 8007a34:	603b      	str	r3, [r7, #0]
 8007a36:	4613      	mov	r3, r2
 8007a38:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007a3a:	e0a5      	b.n	8007b88 <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007a3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a42:	f000 80a1 	beq.w	8007b88 <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a46:	f7fb fd77 	bl	8003538 <HAL_GetTick>
 8007a4a:	4602      	mov	r2, r0
 8007a4c:	683b      	ldr	r3, [r7, #0]
 8007a4e:	1ad3      	subs	r3, r2, r3
 8007a50:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d302      	bcc.n	8007a5c <UART_WaitOnFlagUntilTimeout+0x32>
 8007a56:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d13e      	bne.n	8007ada <UART_WaitOnFlagUntilTimeout+0xb0>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007a5c:	68fb      	ldr	r3, [r7, #12]
 8007a5e:	681b      	ldr	r3, [r3, #0]
 8007a60:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a64:	e853 3f00 	ldrex	r3, [r3]
 8007a68:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8007a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a6c:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007a70:	667b      	str	r3, [r7, #100]	; 0x64
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	461a      	mov	r2, r3
 8007a78:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007a7a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007a7c:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8007a80:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8007a82:	e841 2300 	strex	r3, r2, [r1]
 8007a86:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8007a88:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a8a:	2b00      	cmp	r3, #0
 8007a8c:	d1e6      	bne.n	8007a5c <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	3308      	adds	r3, #8
 8007a94:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a98:	e853 3f00 	ldrex	r3, [r3]
 8007a9c:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007aa0:	f023 0301 	bic.w	r3, r3, #1
 8007aa4:	663b      	str	r3, [r7, #96]	; 0x60
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	3308      	adds	r3, #8
 8007aac:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8007aae:	64ba      	str	r2, [r7, #72]	; 0x48
 8007ab0:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ab2:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8007ab4:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007ab6:	e841 2300 	strex	r3, r2, [r1]
 8007aba:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8007abc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8007abe:	2b00      	cmp	r3, #0
 8007ac0:	d1e5      	bne.n	8007a8e <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	2220      	movs	r2, #32
 8007ac6:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8007ac8:	68fb      	ldr	r3, [r7, #12]
 8007aca:	2220      	movs	r2, #32
 8007acc:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8007ad6:	2303      	movs	r3, #3
 8007ad8:	e067      	b.n	8007baa <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f003 0304 	and.w	r3, r3, #4
 8007ae4:	2b00      	cmp	r3, #0
 8007ae6:	d04f      	beq.n	8007b88 <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	69db      	ldr	r3, [r3, #28]
 8007aee:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007af2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007af6:	d147      	bne.n	8007b88 <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b00:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007b0a:	e853 3f00 	ldrex	r3, [r3]
 8007b0e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007b10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b12:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007b16:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	461a      	mov	r2, r3
 8007b1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8007b20:	637b      	str	r3, [r7, #52]	; 0x34
 8007b22:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b24:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007b26:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007b28:	e841 2300 	strex	r3, r2, [r1]
 8007b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8007b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007b30:	2b00      	cmp	r3, #0
 8007b32:	d1e6      	bne.n	8007b02 <UART_WaitOnFlagUntilTimeout+0xd8>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3308      	adds	r3, #8
 8007b3a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b3c:	697b      	ldr	r3, [r7, #20]
 8007b3e:	e853 3f00 	ldrex	r3, [r3]
 8007b42:	613b      	str	r3, [r7, #16]
   return(result);
 8007b44:	693b      	ldr	r3, [r7, #16]
 8007b46:	f023 0301 	bic.w	r3, r3, #1
 8007b4a:	66bb      	str	r3, [r7, #104]	; 0x68
 8007b4c:	68fb      	ldr	r3, [r7, #12]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	3308      	adds	r3, #8
 8007b52:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007b54:	623a      	str	r2, [r7, #32]
 8007b56:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b58:	69f9      	ldr	r1, [r7, #28]
 8007b5a:	6a3a      	ldr	r2, [r7, #32]
 8007b5c:	e841 2300 	strex	r3, r2, [r1]
 8007b60:	61bb      	str	r3, [r7, #24]
   return(result);
 8007b62:	69bb      	ldr	r3, [r7, #24]
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d1e5      	bne.n	8007b34 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	2220      	movs	r2, #32
 8007b6c:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	2220      	movs	r2, #32
 8007b72:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	2220      	movs	r2, #32
 8007b78:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b7c:	68fb      	ldr	r3, [r7, #12]
 8007b7e:	2200      	movs	r2, #0
 8007b80:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8007b84:	2303      	movs	r3, #3
 8007b86:	e010      	b.n	8007baa <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	69da      	ldr	r2, [r3, #28]
 8007b8e:	68bb      	ldr	r3, [r7, #8]
 8007b90:	4013      	ands	r3, r2
 8007b92:	68ba      	ldr	r2, [r7, #8]
 8007b94:	429a      	cmp	r2, r3
 8007b96:	bf0c      	ite	eq
 8007b98:	2301      	moveq	r3, #1
 8007b9a:	2300      	movne	r3, #0
 8007b9c:	b2db      	uxtb	r3, r3
 8007b9e:	461a      	mov	r2, r3
 8007ba0:	79fb      	ldrb	r3, [r7, #7]
 8007ba2:	429a      	cmp	r2, r3
 8007ba4:	f43f af4a 	beq.w	8007a3c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007ba8:	2300      	movs	r3, #0
}
 8007baa:	4618      	mov	r0, r3
 8007bac:	3770      	adds	r7, #112	; 0x70
 8007bae:	46bd      	mov	sp, r7
 8007bb0:	bd80      	pop	{r7, pc}

08007bb2 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bb2:	b480      	push	{r7}
 8007bb4:	b095      	sub	sp, #84	; 0x54
 8007bb6:	af00      	add	r7, sp, #0
 8007bb8:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007bc2:	e853 3f00 	ldrex	r3, [r3]
 8007bc6:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007bc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007bca:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bce:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	461a      	mov	r2, r3
 8007bd6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bd8:	643b      	str	r3, [r7, #64]	; 0x40
 8007bda:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bdc:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bde:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007be0:	e841 2300 	strex	r3, r2, [r1]
 8007be4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007be6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d1e6      	bne.n	8007bba <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bf4:	6a3b      	ldr	r3, [r7, #32]
 8007bf6:	e853 3f00 	ldrex	r3, [r3]
 8007bfa:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bfc:	69fb      	ldr	r3, [r7, #28]
 8007bfe:	f023 0301 	bic.w	r3, r3, #1
 8007c02:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	3308      	adds	r3, #8
 8007c0a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c0c:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c0e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c10:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c12:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c14:	e841 2300 	strex	r3, r2, [r1]
 8007c18:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c1c:	2b00      	cmp	r3, #0
 8007c1e:	d1e5      	bne.n	8007bec <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007c24:	2b01      	cmp	r3, #1
 8007c26:	d118      	bne.n	8007c5a <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c28:	687b      	ldr	r3, [r7, #4]
 8007c2a:	681b      	ldr	r3, [r3, #0]
 8007c2c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	e853 3f00 	ldrex	r3, [r3]
 8007c34:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c36:	68bb      	ldr	r3, [r7, #8]
 8007c38:	f023 0310 	bic.w	r3, r3, #16
 8007c3c:	647b      	str	r3, [r7, #68]	; 0x44
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	461a      	mov	r2, r3
 8007c44:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c46:	61bb      	str	r3, [r7, #24]
 8007c48:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c4a:	6979      	ldr	r1, [r7, #20]
 8007c4c:	69ba      	ldr	r2, [r7, #24]
 8007c4e:	e841 2300 	strex	r3, r2, [r1]
 8007c52:	613b      	str	r3, [r7, #16]
   return(result);
 8007c54:	693b      	ldr	r3, [r7, #16]
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d1e6      	bne.n	8007c28 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c5a:	687b      	ldr	r3, [r7, #4]
 8007c5c:	2220      	movs	r2, #32
 8007c5e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	2200      	movs	r2, #0
 8007c64:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	665a      	str	r2, [r3, #100]	; 0x64
}
 8007c6c:	bf00      	nop
 8007c6e:	3754      	adds	r7, #84	; 0x54
 8007c70:	46bd      	mov	sp, r7
 8007c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c76:	4770      	bx	lr

08007c78 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	b084      	sub	sp, #16
 8007c7c:	af00      	add	r7, sp, #0
 8007c7e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c84:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007c96:	68f8      	ldr	r0, [r7, #12]
 8007c98:	f7ff fb78 	bl	800738c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007c9c:	bf00      	nop
 8007c9e:	3710      	adds	r7, #16
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b088      	sub	sp, #32
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007cb2:	68fb      	ldr	r3, [r7, #12]
 8007cb4:	e853 3f00 	ldrex	r3, [r3]
 8007cb8:	60bb      	str	r3, [r7, #8]
   return(result);
 8007cba:	68bb      	ldr	r3, [r7, #8]
 8007cbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007cc0:	61fb      	str	r3, [r7, #28]
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	461a      	mov	r2, r3
 8007cc8:	69fb      	ldr	r3, [r7, #28]
 8007cca:	61bb      	str	r3, [r7, #24]
 8007ccc:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cce:	6979      	ldr	r1, [r7, #20]
 8007cd0:	69ba      	ldr	r2, [r7, #24]
 8007cd2:	e841 2300 	strex	r3, r2, [r1]
 8007cd6:	613b      	str	r3, [r7, #16]
   return(result);
 8007cd8:	693b      	ldr	r3, [r7, #16]
 8007cda:	2b00      	cmp	r3, #0
 8007cdc:	d1e6      	bne.n	8007cac <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	2220      	movs	r2, #32
 8007ce2:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007cea:	6878      	ldr	r0, [r7, #4]
 8007cec:	f7ff fb44 	bl	8007378 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007cf0:	bf00      	nop
 8007cf2:	3720      	adds	r7, #32
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}

08007cf8 <__libc_init_array>:
 8007cf8:	b570      	push	{r4, r5, r6, lr}
 8007cfa:	4d0d      	ldr	r5, [pc, #52]	; (8007d30 <__libc_init_array+0x38>)
 8007cfc:	4c0d      	ldr	r4, [pc, #52]	; (8007d34 <__libc_init_array+0x3c>)
 8007cfe:	1b64      	subs	r4, r4, r5
 8007d00:	10a4      	asrs	r4, r4, #2
 8007d02:	2600      	movs	r6, #0
 8007d04:	42a6      	cmp	r6, r4
 8007d06:	d109      	bne.n	8007d1c <__libc_init_array+0x24>
 8007d08:	4d0b      	ldr	r5, [pc, #44]	; (8007d38 <__libc_init_array+0x40>)
 8007d0a:	4c0c      	ldr	r4, [pc, #48]	; (8007d3c <__libc_init_array+0x44>)
 8007d0c:	f000 f820 	bl	8007d50 <_init>
 8007d10:	1b64      	subs	r4, r4, r5
 8007d12:	10a4      	asrs	r4, r4, #2
 8007d14:	2600      	movs	r6, #0
 8007d16:	42a6      	cmp	r6, r4
 8007d18:	d105      	bne.n	8007d26 <__libc_init_array+0x2e>
 8007d1a:	bd70      	pop	{r4, r5, r6, pc}
 8007d1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d20:	4798      	blx	r3
 8007d22:	3601      	adds	r6, #1
 8007d24:	e7ee      	b.n	8007d04 <__libc_init_array+0xc>
 8007d26:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d2a:	4798      	blx	r3
 8007d2c:	3601      	adds	r6, #1
 8007d2e:	e7f2      	b.n	8007d16 <__libc_init_array+0x1e>
 8007d30:	08007d90 	.word	0x08007d90
 8007d34:	08007d90 	.word	0x08007d90
 8007d38:	08007d90 	.word	0x08007d90
 8007d3c:	08007d94 	.word	0x08007d94

08007d40 <memset>:
 8007d40:	4402      	add	r2, r0
 8007d42:	4603      	mov	r3, r0
 8007d44:	4293      	cmp	r3, r2
 8007d46:	d100      	bne.n	8007d4a <memset+0xa>
 8007d48:	4770      	bx	lr
 8007d4a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d4e:	e7f9      	b.n	8007d44 <memset+0x4>

08007d50 <_init>:
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	bf00      	nop
 8007d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d56:	bc08      	pop	{r3}
 8007d58:	469e      	mov	lr, r3
 8007d5a:	4770      	bx	lr

08007d5c <_fini>:
 8007d5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d5e:	bf00      	nop
 8007d60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d62:	bc08      	pop	{r3}
 8007d64:	469e      	mov	lr, r3
 8007d66:	4770      	bx	lr
